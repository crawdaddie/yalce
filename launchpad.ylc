import engine/bindings/MIDI;
open lib/Arrays;
import lib/Math;
open lib/Ref;

# let _ = MIDI.toggle_midi_debug ();
let _ = MIDI.midi_out_setup ();

let LAUNCHPAD_DEST = MIDI.get_destination_by_name (cstr "Launchpad Mini");


let note_ons = [|
  0x0, 0x0, 0x60,
  0x0, 0x1, 0x60,
  0x0, 0x2, 0x60,
  0x0, 0x3, 0x60,
  0x0, 0x4, 0x60,
  0x0, 0x5, 0x60,
  0x0, 0x6, 0x60,
  0x0, 0x7, 0x60,

  0x0, 0x10, 0x60,
  0x0, 0x11, 0x60,
  0x0, 0x12, 0x60,
  0x0, 0x13, 0x60,
  0x0, 0x14, 0x60,
  0x0, 0x15, 0x60,
  0x0, 0x16, 0x60,
  0x0, 0x17, 0x60,

  0x0, 0x20, 0x60,
  0x0, 0x21, 0x60,
  0x0, 0x22, 0x60,
  0x0, 0x23, 0x60,
  0x0, 0x24, 0x60,
  0x0, 0x25, 0x60,
  0x0, 0x26, 0x60,
  0x0, 0x27, 0x60,

  0x0, 0x30, 0x60,
  0x0, 0x31, 0x60,
  0x0, 0x32, 0x60,
  0x0, 0x33, 0x60,
  0x0, 0x34, 0x60,
  0x0, 0x35, 0x60,
  0x0, 0x36, 0x60,
  0x0, 0x37, 0x60,

  0x0, 0x40, 0x60,
  0x0, 0x41, 0x60,
  0x0, 0x42, 0x60,
  0x0, 0x43, 0x60,
  0x0, 0x44, 0x60,
  0x0, 0x45, 0x60,
  0x0, 0x46, 0x60,
  0x0, 0x47, 0x60,

  0x0, 0x50, 0x60,
  0x0, 0x51, 0x60,
  0x0, 0x52, 0x60,
  0x0, 0x53, 0x60,
  0x0, 0x54, 0x60,
  0x0, 0x55, 0x60,
  0x0, 0x56, 0x60,
  0x0, 0x57, 0x60,

  0x0, 0x60, 0x50,
  0x0, 0x61, 0x50,
  0x0, 0x62, 0x50,
  0x0, 0x63, 0x50,
  0x0, 0x64, 0x50,
  0x0, 0x65, 0x50,
  0x0, 0x66, 0x50,
  0x0, 0x67, 0x50,

  0x0, 0x70, 0x50,
  0x0, 0x71, 0x50,
  0x0, 0x72, 0x50,
  0x0, 0x73, 0x50,
  0x0, 0x74, 0x50,
  0x0, 0x75, 0x50,
  0x0, 0x76, 0x50,
  0x0, 0x77, 0x50,
|]; 

let _ = MIDI.send_note_offs LAUNCHPAD_DEST (array_size note_ons) (cstr note_ons);


let state_ref = Ref (
  horz_offset: 0,
  grid_is_set: (fn i: (Int) -> false;), 
  grid_press_handler: (fn i: (Int) -> ();),
  max_cols: 0
);

let display_grid = fn () ->
  
  MIDI.send_note_offs LAUNCHPAD_DEST (array_size note_ons) (cstr note_ons);
  let (horz_offset, gis, _, max_cols) = deref state_ref;

  let grid_total = 8 * 8;

  let aux = fn i gis mc ho ->
    match i with
    | i if i < grid_total -> (
      let row = i / 8;
      let col = (ho) + i % 8;
      let is_set = gis @@ (row * mc) + col;
      match is_set with
      | true -> (
        let n = array_at note_ons @@ i * 3 + 1;
        MIDI.send_note_on LAUNCHPAD_DEST 0x0 n 0x7F;
        ()
        )
      | false -> ()
      ;
      aux (i + 1) gis mc ho
    )
    | _ -> ()
  ;;
  aux 0 gis max_cols horz_offset
;;

let slots = [|
  (fn () -> print "slot 0\n"; ()),
  (fn () -> print "slot 1\n"; ()),
  (fn () -> print "slot 2\n"; ()),
  (fn () -> print "slot 3\n"; ()),
  (fn () -> print "slot 4\n"; ()),
  (fn () -> print "slot 5\n"; ()),
  (fn () -> print "slot 6\n"; ()),
  (fn () -> print "slot 7\n"; ()),
|]; 

let _ = MIDI.register_note_on_handler 0 (fn midi_note: (Int) vel: (Double) ->
  match midi_note with
  | 8 -> (let f = array_at slots 0 in f ())
  | 24 -> (let f = array_at slots 1 in f ())
  | 40 -> (let f = array_at slots 2 in f ())
  | 56 -> (let f = array_at slots 3 in f ())
  | 72 -> (let f = array_at slots 4 in f ())
  | 88 -> (let f = array_at slots 5 in f ())
  | 104 -> (let f = array_at slots 6 in f ())
  | 120 -> (let f = array_at slots 7 in f ())
  | _ -> (
    let (ho, _, gph, mc) = deref state_ref;
    let col = midi_note % 16; # 16 is grid const
    let row = midi_note / 16; # 16 is grid const
    let pattern_idx = (row * mc) + ho + col;
    gph pattern_idx;
    MIDI.send_note_offs LAUNCHPAD_DEST (array_size note_ons) (cstr note_ons);
    display_grid ();
    ()
  ) 

);

# # left
let _ = MIDI.register_cc_handler 0 106 (fn val ->  

  let (ho, gis, gph, mc) = deref state_ref;

  match val with
  | val if val > 0 -> (
    array_set state_ref 0 ((Math.max_int (ho - 8) 0), gis, gph, mc);
    MIDI.send_note_offs LAUNCHPAD_DEST (array_size note_ons) (cstr note_ons);
    display_grid ();
    ()
  )
  | _ -> ()
);

# right 
let _ = MIDI.register_cc_handler 0 107 (fn val ->
  let (ho, gis, gph, mc) = deref state_ref;
  match val with 
  | val if val > 0 -> (
    array_set state_ref 0 ((Math.min_int (ho + 8) (mc - 8)), gis, gph, mc);
    MIDI.send_note_offs LAUNCHPAD_DEST (array_size note_ons) (cstr note_ons);
    display_grid ();
    ()
  )
  | _ -> ()
);

let top_row_addrs = [|
  0x68,
  0x69,
  0x6a,
  0x6b,
  0x6c,
  0x6d,
  0x6e,
  0x6f,
|];

let clear_top_row = fn () ->
  MIDI.send_ccs LAUNCHPAD_DEST 24 @@ cstr [|
    0x0, 0x68, 0x0,
    0x0, 0x69, 0x0,
    0x0, 0x6a, 0x0,
    0x0, 0x6b, 0x0,   
    0x0, 0x6c, 0x0,   
    0x0, 0x6d, 0x0,   
    0x0, 0x6e, 0x0,   
    0x0, 0x6f, 0x0,   
 |]
;;

let tick_ref = Ref 0;

let display_tick = fn () ->
  let (ho, _, _, mc) = deref state_ref;
  let t = deref tick_ref;
  clear_top_row ();
  match (t - ho) with
  | t if t < 8 -> (
    MIDI.send_cc LAUNCHPAD_DEST 0x0 (top_row_addrs[t]) 0x66;
    ()
  )
  | _ -> ()
;;

let set_tick_ref = fn t ->
  array_set tick_ref 0 t;
  display_tick ()
;;


let setup = fn max_cols: (Int) grid_press_handler: (Int -> ()) grid_is_set: (Int -> Bool) ->
  array_set state_ref 0 (
    0,
    grid_is_set,
    grid_press_handler,
    max_cols,
  );
  display_grid ();
  ()

;
