let Queue = module
  let of_list = fn l ->
    let t = l in 
    let h = t in
    (h, t)
  ;;

  let append = fn n (h, t) ->
    let nt = [n] in
    let tt = list_concat t nt in
    (h, tt)
  ;;

  let prepend = fn n (h, t) ->
    (n::h, t)
  ;;

  let print_deq = fn (h, t) ->
    print_list h
  ;;

  let pop_left = fn (h, t) ->
    match h with
    | x::rest -> Some (x, (rest, t))  
    | [] -> None
  ;;
;


let accept_cb = fn server_fd: (Int) ->
  print `accept with server fd {server_fd}\n`;
  yield 1
;;

let proc_tasks = fn server_fd tq: (List of (Coroutine of Int), List of (Coroutine of Int)) ->
  match Queue.pop_left tq with
  | Some (cb, d) -> (
    let _ = cb ();
    proc_tasks server_fd d
  )
  | None -> (proc_tasks server_fd (Queue.of_list [accept_cb server_fd]); ())
;;


proc_tasks 20 (Queue.of_list [accept_cb 20])

