#! env ylc

let AF_INET = 2;
let SOCK_STREAM = 1;
let INADDR_ANY = 0; 


let socket = extern fn Int -> Int -> Int -> Int;
let create_server_addr = extern fn Int -> Int -> Int -> Ptr; 
let bind = extern fn Int -> Ptr -> Int -> Int;
let listen = extern fn Int -> Int -> Int;
let accept = extern fn Int -> Ptr -> Ptr -> Int;
let recv = extern fn Int -> Ptr -> Int -> Int -> Int;  # recv(fd, buffer, size, flags)
let send = extern fn Int -> Ptr -> Int -> Int -> Int;  # send(fd, buffer, size, flags) 
let close = extern fn Int -> Int;                      # close(fd)

let string_split = extern fn String -> String -> List of String;

let Queue = module

  let of_list = fn l ->
    let t = l in 
    let h = t in
    (h, t)
  ;;

  let append = fn n (h, t) ->
    match list_empty h with
    | true -> of_list [n]
    | _ -> (
      let nt = [n] in
      let tt = list_concat t nt in
      (h, tt)
    )
  ;;

  let prepend = fn n (h, t) ->
    (n::h, t)
  ;;

  let pop_left = fn (h, t) ->
    match h with
    | x::rest -> Some (x, (rest, t))  
    | [] -> None
  ;;
;



let accept_conn = fn server_fd ->
  let client_addr = create_server_addr 0 0 0;
  let client_sock = accept server_fd client_addr (cstr [| 1 |]);
  match (client_sock >= 0) with
  | true -> Some (client_sock, client_addr)
  | _ -> None
;;

let read_bytes = fn client_sock -> let buffer = array_fill_const 1024 (Char 0);
  let bytes_read = recv client_sock (cstr buffer) 1024 0;
  match (bytes_read > 0) with
  | true -> Some buffer
  | _ -> None
;;

let parse_req = fn line ->
  let parts = string_split line " ";
  match parts with
  | meth::path::version::_ -> Some (meth, path) 
  | _ -> None
;;

let http_parse = fn req_buf ->
  let lines = string_split req_buf "\r\n";
  match lines with
  | req::header_lines -> (
    parse_req req
  )
  | _ -> None
;;

let process_req = fn req client_sock ->
  ()
;;

let accept_reqs = fn server_fd ->
  let (client_sock, _addr) = use_or_finish @@ accept_conn server_fd;
  yield 1;

  let buffer = use_or_finish @@ read_bytes client_sock;
  yield 1;

  let req = http_parse buffer;
  # process_req req client_sock;

  # print `req {req}\n`;
  # let _ = process_req req client_sock;


  # let response = "HTTP/1.1 200 OK\r\nContent-Length: 13\r\n\r\nHello, World!";
  let response = "HTTP/1.1 200 OK\r\nContent-Length: 13\r\nX-Clacks-Overhead: GNU Terry Pratchett\r\n\r\nHello, World!";
  send client_sock (cstr response) (array_size response) 0;

  close client_sock;
  yield 0 
;;



# let proc_tasks = fn server_fd tq ->
#   let qr = Queue.pop_left tq;
#   (
#   match qr with
#   | Some (task, remaining_tasks) -> 
#
#     match task () with
#     | Some 1 -> Queue.append task remaining_tasks
#     | _ -> remaining_task_q
#
#   | None -> Queue.of_list [accept_reqs server_fd]
#   )
#   |> proc_tasks server_fd 
# ;;

let proc_tasks = fn on_empty on_task ->
  let q = Queue.of_list [on_empty ()];

  let aux_rec = fn q on_empty on_task ->
    let nq = match Queue.pop_left q with
    | Some (task, remaining_tasks) ->
      match on_task task with
      | Some t -> Queue.append t remaining_tasks
      | _ -> remaining_tasks

    | None -> Queue.of_list [on_empty ()]
    ;
    aux_rec nq on_empty on_task
  ;;
  aux_rec q on_empty on_task
;;

let init_server = fn port ->
  let server_addr = create_server_addr AF_INET INADDR_ANY port;
  let server_fd = socket AF_INET SOCK_STREAM 0;
  bind server_fd server_addr 16;
  listen server_fd 10; 

  proc_tasks
    (fn () -> accept_reqs server_fd)
    (fn task -> 
      task ();
      match cor_status task with
      | -1 -> Some task
      | _ -> None
    )

;;
init_server 8000

