#! env ylc
%include Synth
%include String
%include Sched
%include Array

let kick_buf = read_buf (cstr "kick.wav");
let snare_buf = read_buf (cstr "snare.wav");
let hh_buf = read_buf (cstr "hh.wav");
let drum_machine = fn () ->
  let kt = inlet 0.0;
  let st = inlet 0.0;
  let ht = inlet 0.0;
  let kr = inlet 0.0;
  let sr = inlet 0.0;
  let hr = inlet 0.0;

  let k = bufplayer_1shot_node kick_buf kr  0.0 kt
  ;

  let s = bufplayer_1shot_node snare_buf sr 0.0 st
    |> comb_node 0.04 0.04 0.5
  ;

  let h = bufplayer_1shot_node hh_buf hr 0.0 ht;
  k + s + h
;;


let rates = [|
  1.0,
  1.0594630943592953,
  1.122462048309373,
  1.189207115002721,
  1.2599210498948732,
  1.3348398541700344,
  1.4142135623730951,
  1.4983070768766815,
  1.5874010519681994,
  1.681792830507429,
  1.7817974362806785,
  1.8877486253633868,
|];

let drums = drum_machine |> chain_wrap |> play;

#   |   |   |   |   |   |   |   #
let pattern = ```
x-----x---x-----x---------x--x--
----x-------2-------0---55--6-78
0123x5x789xxxxxx0123456789xxxxxx
```
|> transpose_string 3 32 32 3
;



let char_to_hex_int = extern fn Char -> Int;
let char_to_rate = fn c ->
  let rate_idx = char_to_hex_int c; 
  array_at rates (rate_idx % 12)
;;

let trig_func = fn line: (String) idx: (Int) offset: (Int) ->
  let k = array_at line idx in 
  match k with
  | '-' -> ()
  | 'x' -> (
    set_input_scalar_offset drums (idx + 3) offset 1.0;
    set_input_trig_offset drums idx offset;
    ()
  )
  | c -> (
    let r = char_to_rate c;
    set_input_scalar_offset drums (idx + 3) offset r;
    set_input_trig_offset drums idx offset;
    ()
  )

;; 

let drum_runner = fn
  args: (Ptr of (Double * Double * Int))
  frame_offset: (Int)
  ->
  let (duration, phase, tick) = *args;

  let line = array_slice (tick * 4) ((tick * 4) + 3) pattern;

  trig_func line 0 frame_offset;
  trig_func line 1 frame_offset;
  trig_func line 2 frame_offset;

  (duration, phase + duration, (tick + 1) % 32)

  |> schedule_event drum_runner duration
;;


schedule_event_quant drum_runner 1.0 (0.12, 0., 0);
