# %include Fmt
# %include Math

let init_audio = extern fn () -> ();
init_audio ();

let schedule_event = extern fn Uint64 -> Ptr -> Ptr -> Double -> ();

# type RoutineContinuation =
#   | Continue of (Double * Int * Uint64 * Ptr)
#   | None
# ;

# type a t = 
#   | None
#   | Some of a
# ;

# let handle_continuation = fn x ->
#   match x with
#   | None -> ()
#   | Continue (off, offi, ui64, data) -> (
#     printf "continue";
#     ()
#   )
# ;;
# let routine = fn (foffset, now, d) -> 
#   None
# ;;

# let sched_routine = fn cb data -> 
#   let sch_data = cb (get_frame_offset (), 0, data);
#   schedule_event cb sch_data 
#
#   
#
# sched_routine routine;
  

let x = 1;
let z = 1 * 5;
let y = &x;
let zz = *y;

