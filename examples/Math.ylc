# uniformly distributed integer between 0 and range-1
let rand_int = extern fn Int -> Int ;

# uniformly distributed double between 0 and 1.0
let rand_double = extern fn () -> Double ;

# uniformly distributed double between min and max
let rand_double_range = extern fn Double -> Double -> Double ;

let amp_db = extern fn Double -> Double;
let db_amp = extern fn Double -> Double;

let sin = extern fn Double -> Double;
let cos = extern fn Double -> Double;
let tan = extern fn Double -> Double;


let E       = 2.71828182845904523536028747135266250     # e              
let LOG2E   = 1.44269504088896340735992468100189214     # log2(e)        
let LOG10E  = 0.434294481903251827651128918916605082    # log10(e)       
let LN2     = 0.693147180559945309417232121458176568    # loge(2)        
let LN10    = 2.30258509299404568401799145468436421     # loge(10)       
let PI      = 3.14159265358979323846264338327950288     # pi             
let PI_2    = 1.57079632679489661923132169163975144     # pi/2           
let PI_4    = 0.785398163397448309615660845819875721    # pi/4           
let M_1_PI  = 0.318309886183790671537767526745028724    # 1/pi           
let M_2_PI  = 0.636619772367581343075535053490057448    # 2/pi           
let M_2_SQRTPI = 1.12837916709551257389615890312154517  # 2/sqrt(pi)     
let SQRT2   = 1.41421356237309504880168872420969808     # sqrt(2)        
let SQRT1_2 = 0.707106781186547524400844362104849039    # 1/sqrt(2)      

