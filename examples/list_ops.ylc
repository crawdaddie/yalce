
# let enqueue = fn (head, tail) item ->

let enqueue = fn (head, tail): (IntList * IntList) item: (Int) ->
# let enqueue = fn (head, tail) item ->
  let last = [item] in
  match head with
  | [] -> (last, last)
  | _ -> (
    let _ = list_concat tail last in
    (head, last)
  )
;;

let pop_left = fn (head, tail) ->
  match head with
  | [] -> ((head, tail), None)
  | x::rest -> ((rest, tail), Some x)  
;;

let head = Int[];
let tail = head;
let q = (head, tail) in
let q = enqueue q 1 in
let q = enqueue q 2 in
let q = enqueue q 3 in
let q = enqueue q 4 in
let (q, v) = pop_left q in
print `{v}`;


# let _, t = pop_left q in
# t
#
#
#
#
