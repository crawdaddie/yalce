type Ast =
  | Seq of List of Ast
  | Mul of (List of Ast, Int) 
  | Val of String
  ;

let isdigit = extern fn Char -> Bool;

let split_at = fn str: (String) delim: (String) ->
  let aux = fn str: (String) delim: (String) off: (Int) ->
    let delim_len = array_size delim;
    match array_range 0 delim_len str with
    | s if s == delim -> off
    | _ -> aux (array_succ str) delim (off + 1)
  ;;

  let split_offset = aux str delim 0;
  (str |> array_range 0 split_offset, str |> array_range split_offset ((array_size str) - split_offset))
;;


# let eval_seq_str = fn str ->
#   match (str[0]) with
#   | x if isdigit x -> print "is digit"
#   | '[' -> print "start seq with bracket"
#   | ']' -> print "end seq with bracket"
#   | _ -> print "no parse"
#   ;
#   ()
# ;;
# #
# eval_seq_str "1 2 3 4";
# (Seq []);
split_at "11 22" " ";

