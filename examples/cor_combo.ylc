#! env ylc
%include Array
%include ../engine/bindings/Sched
%include ../engine/bindings/Synth
%include Math


let st = (fn () -> 
  let f = inlet 58. |> lag_node 0.01;
  let trig = inlet 0.0;
  let chirp_decay = inlet 0.3;
  let ff = chirp_node 3000. 200. chirp_decay trig; 

  (sq_node f) +
  (sq_node (f * 1.01)) +
  (sq_node (f * 2))
  |> biquad_lp_node ff (inlet 4.)
  # |> comb_node 0.75 0.75 0.2
  ;)
  |> compile_blob_template;


let s = fn freq offset ->
  st
  |> instantiate_template [(0, freq)]
  |> play_node_offset offset
;;

let times = [| 0.125, 0.125, 0.5|];



let co = (
  # dur must be first field of struct
  dur: \array_choose times,

  # frame_offset must be second field of struct
  frame_offset: get_frame_offset,

  freq: iter_of_list [55., 330., 220., 110., 44., 33., 55., 110., 220., 660.] |> cor_loop,
  target: s 55. 0
)
|> cor_wrap_effect (fn (dur, frame_offset, freq, s) ->
  set_input_scalar_offset s 0 frame_offset freq;
  set_input_trig_offset s 1 frame_offset;
  ()
;)
in co |> cor_play schedule_event;

