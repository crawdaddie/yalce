#! env ylc

let AF_INET = 2;
let SOCK_STREAM = 1;
let INADDR_ANY = 0; 

# type SockAddr = Char * Char * Int ; 

	# __uint8_t       sa_len;         /* total length */
	# sa_family_t     sa_family;      /* [XSI] address family */
	# char            sa_data[14];    /* [XSI] addr value */

let socket = extern fn Int -> Int -> Int -> Int;
let create_server_addr = extern fn Int -> Int -> Int -> Ptr; 
let bind = extern fn Int -> SockAddr -> Int -> Int;
let listen = extern fn Int -> Int -> Int;
let listen = extern fn Int -> Int -> Int;
let accept = extern fn Int -> Ptr -> Ptr -> Int;

type Routine = Ptr;
type RoutineList = List of Routine;
let enqueue = fn (head, tail): (RoutineList * RoutineList) item: (Routine) ->
# let enqueue = fn (head, tail) item ->
  let last = [item] in
  match head with
  | [] -> (last, last)
  | _ -> (
    let _ = list_concat tail last in
    (head, last)
  )
;;

let pop_left = fn (head, tail) ->
  match head with
  | [] -> ((head, tail), None)
  | x::rest -> ((rest, tail), Some x)  
;;

let tasks_empty = fn (head, tail) ->
  match head with
  | [] -> true
  | _ -> false
;;


let run = fn server_fd ->
  let client_addr = create_server_addr 0 0 0;
  match accept server_fd client_addr [1] with
  | client_fd if client_fd > 0 -> (
  print "accepted client connection\n";
  ()
  )
  | _ -> ()
;;



let init_server = fn port ->
  let server_addr = create_server_addr AF_INET INADDR_ANY port;
  let server_fd = socket AF_INET SOCK_STREAM 0;
  bind server_fd server_addr 16;
  listen server_fd 5;

  let head = Routine[] ;
  let tail = Routine[] ;
  let tasks = Ref (head, tail);
  run server_fd;



;

init_server 8000


