#! env ylc
open Ref;

let AF_INET = 2;
let SOCK_STREAM = 1;
let INADDR_ANY = 0; 

# type SockAddr = Char * Char * Int ???; 

	# __uint8_t       sa_len;         /* total length */
	# sa_family_t     sa_family;      /* [XSI] address family */
	# char            sa_data[14];    /* [XSI] addr value */

let socket = extern fn Int -> Int -> Int -> Int;
let create_server_addr = extern fn Int -> Int -> Int -> Ptr; 
let bind = extern fn Int -> Ptr -> Int -> Int;
let listen = extern fn Int -> Int -> Int;
let listen = extern fn Int -> Int -> Int;
let accept = extern fn Int -> Ptr -> Ptr -> Int;



let accept_connections = fn server_fd ->
  # accept connnection, save client_fd to state and yield control
  # next yield actually process the client request using client_fd
  let client_addr = create_server_addr 0 0 0;
  yield (accept server_fd client_addr [1])
;;


let proc_tasks = extern fn (Queue of l) -> Int -> ();
let proc_tasks = fn tasks server_fd ->
  let ts = match (queue_pop_left tasks) with
  | Some r -> (
    match (r ()) with
    | Some _ -> queue_append_right tasks r
    | None -> tasks
  )
  | None -> queue_of_list [ (accept_connections server_fd) ]
  in
  proc_tasks ts server_fd
;;


let init_server = fn port ->
  let server_addr = create_server_addr AF_INET INADDR_ANY port;
  let server_fd = socket AF_INET SOCK_STREAM 0;
  bind server_fd server_addr 16;
  listen server_fd 5;
  let q = queue_of_list [ (accept_connections server_fd) ];
  proc_tasks q server_fd ;
  1
;;

init_server 8000


