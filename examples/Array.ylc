%include Math

let choose = fn arr ->
  let idx = rand_int (array_size arr);
  array_at arr idx 
;;

# pre-cache (Array of Double -> Double) & (Array of Int -> Int) versions of choose
# - not ideal but needed for now while we
# don't have proper tree-based scope management :(

choose [|0., 0.|];
choose [|0, 0|];


let (@) = fn array idx -> array_at array idx;;


type Array2d t = Int * Int * Array of t;
type Array3d t = Int * Int * Int * Array of t;

%test
let x = [|
  [|1., 2.|],
  [|3., 4.|],
  [|5., 6.|],
|];

test_val (array_at (array_at x 0) 0 == 1.) "array[0][0] == 1."; 
test_val (array_at (array_at x 0) 1 == 2.) "array[0][1] == 2.";
test_val (array_at (array_at x 1) 0 == 3.) "array[1][0] == 3.";
test_val (array_at (array_at x 1) 1 == 4.) "array[1][1] == 4.";
