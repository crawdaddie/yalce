#! env ylc
let AF_INET = 2;
let SOCK_STREAM = 1;
let INADDR_ANY = 0; 

# type SockAddr = Char * Char * Int ???; 

	# __uint8_t       sa_len;         /* total length */
	# sa_family_t     sa_family;      /* [XSI] address family */
	# char            sa_data[14];    /* [XSI] addr value */

let socket = extern fn Int -> Int -> Int -> Int;
let create_server_addr = extern fn Int -> Int -> Int -> Ptr; 
let bind = extern fn Int -> Ptr -> Int -> Int;
let listen = extern fn Int -> Int -> Int;
let accept = extern fn Int -> Ptr -> Ptr -> Int;
let recv = extern fn Int -> Ptr -> Int -> Int -> Int;  # recv(fd, buffer, size, flags)
let send = extern fn Int -> Ptr -> Int -> Int -> Int;  # send(fd, buffer, size, flags) 
let close = extern fn Int -> Int;                      # close(fd)



let Queue = module
  let of_list = fn l ->
    let t = l in 
    let h = t in
    (h, t)
  ;;

  let append = fn n (h, t) ->
    let nt = [n] in
    let tt = list_concat t nt in
    (h, tt)
  ;;

  let prepend = fn n (h, t) ->
    (n::h, t)
  ;;

  let print_deq = fn (h, t) ->
    print_list h
  ;;

  let pop_left = fn (h, t) ->
    match h with
    | x::rest -> Some (x, (rest, t))  
    | [] -> None
  ;;
;

let accept_cb = fn sfd ->
  let client_addr = create_server_addr 0 0 0;
  let client_fd = accept sfd client_addr (cstr [|1|]);
  print `accepted client fd: {client_fd}\n`;
  client_fd
;;

let read_cb = fn cfd: (Int) ->

  let buffer = array_fill_const 1024 0;
  let bytes_read = recv cfd (cstr buffer) 1024 0;

  if bytes_read > 0 then (
    Some @@ Write (cfd, "HTTP/1.1 200 OK\r\nContent-Length: 13\r\n\r\nHello, World!")
  ) else (
    close cfd;
    None
  )
;;

type CallbackType = 
  | Accept of Int           # server fd
  | Read of Int             # client fd  
  | Write of (Int, String)  # client fd + data to write
;

let proc_tasks = fn server_fd tq ->
  match Queue.pop_left tq with
  | Some (cbt, d) -> (
    match cbt with
    | Accept sfd -> (
      let cfd = accept_cb sfd;
      match cfd >= 0 with
      | true -> d |> Queue.append (Read cfd) |> proc_tasks server_fd 
      | _ -> d |> proc_tasks server_fd 
      ;
      ()
    )

    | Read cf -> (
      proc_tasks server_fd d;
      ()
    )
    | Write (cfd, resp) -> (
      send cfd (cstr resp) (array_size resp) 0;
      close cfd;
      proc_tasks server_fd d;
      ()
    )
  )
  | None -> (
    proc_tasks server_fd (Queue.of_list [Accept server_fd]) ;   
    ()
  )
;;

let init_server = fn port ->
  let server_addr = create_server_addr AF_INET INADDR_ANY port;
  let server_fd = socket AF_INET SOCK_STREAM 0;
  bind server_fd server_addr 16;
  listen server_fd 5;
  proc_tasks server_fd (Queue.of_list [Accept server_fd]);
  ()
;;

init_server 8000


