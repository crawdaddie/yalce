#! /usr/bin/env ylc --gui -i

open engine/bindings/Synth; 
open engine/bindings/Sched; 
open ../../gui/bindings/Gui;
import ../../lib/Math;

import examples/gl/Hyg41Dataset;

let arr = Hyg41Dataset.arr;


let VShader = extern fn String -> Ptr;
let FShader = extern fn String -> Ptr;
let TriangleData = extern fn Array of Double -> Ptr;
let MVPView = extern fn Double -> Double -> Double -> Double -> Double -> Double -> Ptr;
let Points = extern fn Array of Double -> Double -> Ptr;

let CamView = extern fn Ptr -> Ptr -> Ptr;
let Uniform3f = extern fn String -> Double -> Double -> Double -> Ptr;
let LagUniform = extern fn Ptr -> Double -> Ptr -> Ptr;
let set_uniform = extern fn Ptr -> Ptr -> ();

let uniformref_set = fn data: (Array of Double) obj: (Array of Ptr) ->
  set_uniform (obj[0]) (cstr data)
;;

let pos = [|[]|];

let w = create_decl_window (fn () ->
let vs = VShader `#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aColor;
uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
out vec3 vertexColor;
out vec3 worldPos;
void main() \{
  vec4 worldPosition = uModel * vec4(aPos, 1.0);
  worldPos = worldPosition.xyz;
  
  // Transform to view space to get distance from camera
  vec4 viewPosition = uView * worldPosition;
  
  gl_Position = uProjection * viewPosition;
  vertexColor = aColor;
}`;
  let fs = FShader `#version 330 core
in vec3 vertexColor;
in vec3 worldPos;
uniform vec3 uCameraPos;
uniform float uTime;
out vec4 FragColor;

void main() \{
    FragColor = vec4(vertexColor, 1.);
\}`;


  pos[0] := (Uniform3f "pos" 2. 3. 8.); 
  let lag = pos[0] |> LagUniform (cstr "uPosLag") 0.4;

  let target  = Uniform3f "target" 0. 0. 0.;

  let view = CamView lag target;
  # let view = CamView (pos[0]) target;
  # let origin = Points [|
  #   0., 0., 0., 1., 0., 0.,
  # |] 10.;

  let points = Points arr 2.;

);


let play_star_vis = fn t q ->
  let rout = fn pos ->
    uniformref_set [|Math.rand_double_range -1000. 1000., Math.rand_double_range -1000. 1000., Math.rand_double_range -1000. 1000.|] pos;
    yield 0.25 * q;
    yield rout pos
  ;;


  rout pos
    |> play_routine t schedule_event
;;

# defer_quant 1. play_star_vis

