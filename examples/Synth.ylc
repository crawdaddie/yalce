#! /Users/adam/projects/sound/yalce/build/lang
let read_buf = extern fn String -> Signal;

# oscillators
let bufplayer_node = extern fn Signal -> Signal -> Signal -> Signal -> Synth;
let sin_node = extern fn Signal -> Synth;
let sq_node = extern fn Signal -> Synth;
let white_noise_node = extern fn () -> Synth;
let brown_noise_node = extern fn () -> Synth;

let chirp_node = extern fn Double -> Double -> Double -> Signal -> Synth;

# filters
let biquad_lp_node = extern fn Signal -> Signal -> Signal -> Synth;
let biquad_bp_node = extern fn Signal -> Signal -> Signal -> Synth;
let biquad_hp_node = extern fn Signal -> Signal -> Signal -> Synth;
let comb_node = extern fn Double -> Double -> Double -> Signal -> Synth;
let lag_node = extern fn Double -> Signal -> Synth;
let tanh_node = extern fn Double -> Signal -> Synth;


let inlet = extern fn Double -> Signal;

let out_sig = extern fn Synth -> Signal;
let input_sig = extern fn Int -> Synth -> Signal;
let num_inputs = extern fn Synth -> Int;
let play_node = extern fn Synth -> Synth;
let play = extern fn Synth -> Synth;

let reset_chain = extern fn () -> ();
let end_chain = extern fn Synth -> Synth;

let set_input_scalar = extern fn Synth -> Int -> Double -> Synth;
let set_input_scalar_offset = extern fn Synth -> Int -> Int -> Double -> Synth;
let set_input_trig = extern fn Synth -> Int -> Synth;
let set_input_trig_offset = extern fn Synth -> Int -> Int -> Synth;

let mul_sig = extern fn Signal -> Signal -> Synth;

let get_frame_offset = extern fn () -> Int;
# let schedule_event = extern fn Ptr -> Ptr -> Double -> ();

let chain_wrap = fn def -> 
  reset_chain ();
  let x = def ();
  end_chain x
;;

type SynthInput = 
  | Scalar of Int
  | Trig of Int
  ;

let init_audio = extern fn () -> () in
  init_audio ()
