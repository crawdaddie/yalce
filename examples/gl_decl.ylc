#! /usr/bin/env ylc --gui -i
open gui/bindings/Gui;
import ../lib/Math;

# Component declarations
let VShader = extern fn String -> Ptr;
let FShader = extern fn String -> Ptr;
let TriangleData = extern fn Array of Double -> Ptr;
let MVPView = extern fn Double -> Double -> Double -> Double -> Double -> Double -> Ptr;
let Points = extern fn Array of Double -> Double -> Ptr;
let w = create_decl_window (fn () ->

  let v = MVPView
    2. 3. 8. # pos
    0. 0. 0. # target
  ;
#
#   let vs = VShader `#version 330 core
# layout (location = 0) in vec3 aPos;
# layout (location = 1) in vec3 aColor;
# uniform mat4 uModel;
# uniform mat4 uView;
# uniform mat4 uProjection;
# out vec3 vertexColor;
# void main()
# \{
#   vec4 viewProj = uProjection * uView * uModel * vec4(aPos, 1.0);
#   gl_Position = viewProj;
#   vertexColor = aColor;
#   gl_PointSize = 2.0; 
# \}`;

  let vs = VShader `#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aColor;
uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
out vec3 vertexColor;
out vec3 worldPos;
void main()
\{
  vec4 worldPosition = uModel * vec4(aPos, 1.0);
  worldPos = worldPosition.xyz;
  
  vec4 viewProj = uProjection * uView * worldPosition;
  gl_Position = viewProj;
  vertexColor = aColor;
  gl_PointSize = 3.0; 
\}`;

let fs = FShader `#version 330 core
in vec3 vertexColor;
in vec3 worldPos;
out vec4 FragColor;
void main()
\{
  // Circle rendering
  vec2 coord = gl_PointCoord - vec2(0.5);
  float dist = length(coord);
  
  if (dist > 0.5) \{
      discard;
  \}
  
  // Calculate distance from origin
  float distFromOrigin = length(worldPos);
  
  // Create brightness multiplier (closer = brighter)
  // Adjust the 2.0 to control falloff rate
  float brightness = 2.0 / (1.0 + distFromOrigin);
  
  // Apply brightness to color
  vec3 brightenedColor = vertexColor * brightness;
  
  float alpha = 1.0 - smoothstep(0.1, 0.5, dist);
  FragColor = vec4(brightenedColor, alpha);
}`;

  let origin = Points [|
    0.0, 0.0, 0., 1.0, 0., 0.,
  |] 8.;

  let points = Points (array_fill 5000 (fn i: (Int) -> 
    match (i % 6) with 
    | 0 -> Math.randn 0. 1.
    | 1 -> Math.randn 0. 1.
    | 2 -> Math.randn 0. 1.
    | 3 -> 0.
    | 4 -> 0.9
    | 5 -> Math.randn .5 .7
    | _ -> 0.

  )) 8.

)
