#! /usr/bin/env ylc --gui -i
open ../gui/bindings/Gui;
import ../lib/Math;

# Component declarations
let VShader = extern fn String -> Ptr;
let FShader = extern fn String -> Ptr;
let TriangleData = extern fn Array of Double -> Ptr;
let Points = extern fn Array of Double -> Double -> Ptr;
let Poly = extern fn Array of Double -> Ptr;
let LineStrip = extern fn Array of Double -> Double -> Ptr;
let Lines = extern fn Array of Double -> Double -> Ptr;
let Quad = extern fn Array of Double -> Ptr;

let w = create_decl_window (fn () ->
    # Shaders
    let vs = VShader `#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aColor;
out vec3 vertexColor;
void main() \{
    gl_Position = vec4(aPos, 1.0);
    vertexColor = aColor;
\}`;

    let fs = FShader `#version 330 core
in vec3 vertexColor;
out vec4 FragColor;
void main() \{
    FragColor = vec4(vertexColor, 1.0);
\}`;

    # Points - scatter plot style
    let points = Points [|
        -0.9,  0.8,  0.0,   1.0, 0.0, 0.0,   # red point
        -0.7,  0.6,  0.0,   1.0, 0.5, 0.0,   # orange point
        -0.5,  0.4,  0.0,   1.0, 1.0, 0.0,   # yellow point
        -0.3,  0.2,  0.0,   0.5, 1.0, 0.0,   # light green point
        -0.1,  0.0,  0.0,   0.0, 1.0, 0.0,   # green point
    |] 2.0;  # point size

    # Triangle
    let triangle = TriangleData [|
        0.2,  0.6,   0.0,   1.0, 0.0, 0.0,   # red
        0.0,  0.2,   0.0,   0.0, 1.0, 0.0,   # green  
        0.4,  0.2,   0.0,   0.0, 0.0, 1.0,   # blue
    |];

    # # Pentagon (using triangle fan)
    let pentagon = Poly [|
        # Center point
        0.7,   0.4,   0.0,   1.0, 1.0, 1.0,   # white center
        
        # Pentagon vertices (going around clockwise)
        0.7,   0.6,   0.0,   1.0, 0.0, 0.0,   # top
        0.85,  0.5,   0.0,   1.0, 0.5, 0.0,   # top-right
        0.8,   0.3,   0.0,   1.0, 1.0, 0.0,   # bottom-right
        0.6,   0.3,   0.0,   0.0, 1.0, 0.0,   # bottom-left
        0.55,  0.5,   0.0,   0.0, 0.0, 1.0,   # top-left
    |];
    #
    # Connected line (sine wave)
    let sine_wave = LineStrip [|
        -0.8, -0.2,  0.0,   0.0, 1.0, 1.0,   # cyan
        -0.6, -0.1,  0.0,   0.0, 1.0, 1.0,
        -0.4,  0.0,  0.0,   0.0, 1.0, 1.0,
        -0.2,  0.1,  0.0,   0.0, 1.0, 1.0,
        0.0,   0.0,  0.0,   0.0, 1.0, 1.0,
        0.2,  -0.1,  0.0,   0.0, 1.0, 1.0,
        0.4,   0.0,  0.0,   0.0, 1.0, 1.0,
        0.6,   0.1,  0.0,   0.0, 1.0, 1.0,
    |] 2.0;  # line width

    #
    # Individual lines (grid pattern)
    let grid_lines = Lines [|
        # Horizontal lines
        -0.9, -0.4,  0.0,   0.5, 0.5, 0.5,
        -0.1, -0.4,  0.0,   0.5, 0.5, 0.5,
        
        -0.9, -0.6,  0.0,   0.5, 0.5, 0.5,
        -0.1, -0.6,  0.0,   0.5, 0.5, 0.5,
        
        -0.9, -0.8,  0.0,   0.5, 0.5, 0.5,
        -0.1, -0.8,  0.0,   0.5, 0.5, 0.5,
        
        # Vertical lines
        -0.7, -0.4,  0.0,   0.5, 0.5, 0.5,
        -0.7, -0.8,  0.0,   0.5, 0.5, 0.5,
        
        -0.5, -0.4,  0.0,   0.5, 0.5, 0.5,
        -0.5, -0.8,  0.0,   0.5, 0.5, 0.5,
        
        -0.3, -0.4,  0.0,   0.5, 0.5, 0.5,
        -0.3, -0.8,  0.0,   0.5, 0.5, 0.5,
    |] 1.0;  # line width
    #
    # # Quad (rectangle using indexed triangles)
    let quad = Quad [|
        # 4 vertices of the quad (bottom-left, bottom-right, top-right, top-left)
        0.3, -0.4,  0.0,   1.0, 0.0, 1.0,   # magenta
        0.7, -0.4,  0.0,   1.0, 1.0, 0.0,   # yellow
        0.7, -0.7,  0.0,   0.0, 1.0, 1.0,   # cyan  
        0.3, -0.7,  0.0,   1.0, 0.5, 0.0,   # orange
    |]
)
