open ../engine/bindings/Synth;
open ../engine/bindings/Sched;
import ../lib/Math;


let snare_syn = (fn () -> 
  let trig = inlet 0. in
  sin_node 220. + sin_node 357.
    |> (*) (aslr_node 0. 1. 0.08 0.1 trig)
    |> (+) (white_noise_node ())
    |> tanh_node 5.
    |> (*) (aslr_node 0. 1. 0.05 0.1 trig)

  ;) |> play_tpl
;

let hh_syn = (fn () -> 
  let trig = inlet 0. in
  let env = perc_env_node (trig_range_node 0.2 2. trig) trig in
  env
    |> math_node (Math.unipolar_scale 100. 5000.)
    |> sin_node
    |> (+) (white_noise_node ())
    |> biquad_hp_node (trig_range_node 1000. 8000. trig) 4.
    |> comb_node 0.02 0.1 0.7
    |> (*) env

  ;) |> play_tpl
;

# #Env:
let kick_penv = 
[|
  0., 0., 2.4,
  1., 0.185902, -2.3,
  0.011111, 2.814099, 1.3,
  0.
|]
|> array_to_buf;


let kick_ampenv = 
[|
  0., 0., 2.4,
  1., 2.210165, -2.,
  1., 0.789836, 1.3,
  0.
|]
|> array_to_buf;




let kick_syn = (fn () -> 
  let trig = inlet 0.;


  let sig = (
    let ff = (buf_env_node 1. (buf_ref kick_penv) trig)
      |> math_node (Math.unipolar_scale 55. 200.)
    in
    (perc_env_node 0.2 trig)
    |> (*) (white_noise_node ())
    |> (+) (sin_node ff)
  );

  let full = (sig + (dyn_tanh_node (5 * buf_env_node 0.03 (buf_ref kick_ampenv) trig) sig));
  full + (
    full
    |> biquad_hp_node 100 1
    |> reverb_node 0.2 1. 0. 1.
  )
  |> (*) (buf_env_node 0.12 (buf_ref kick_ampenv) trig)

  ;)
  |> play_tpl
;

let kick = fn t: (Double) ->
  let fo = get_tl_tick () in
  set_input_trig_offset kick_syn 0 fo;
  t
;;
#
#
#
#
# let trig_snare = fn k ->
#   let fo = get_tl_tick () in
#   set_input_trig_offset k 0 fo
# ;;
#
let trig_hh = fn k ->
  let fo = get_tl_tick () in
  set_input_trig_offset k 0 fo
;;
#
#
#
#
let k_routine_other = fn s ->
  yield (kick (s * 1.5));
  yield (kick (s * 1.75));
  yield (kick (s * .75));
  yield (k_routine_other s)
;;
#
let sn = fn t: (Double) ->
  let fo = get_tl_tick () in
  set_input_trig_offset snare_syn 0 fo;
  t
;;

let sn_routine = fn s ->
  yield (s * 1.);
  yield (sn (s * 2.));
  yield (sn (s * 2.));
  yield (sn (s * 2.));
  yield (sn (s * 2.));
  yield (sn (s * 2.));
  yield (sn (s * 2.));
  yield (sn (s * 2.));
  yield (sn (s * 0.25));
  yield (sn (s * 0.5));
  yield (sn (s * 0.25));
  yield (sn_routine s)
;;
#
let hh_routine = fn scale ->
  trig_hh hh_syn;
  yield (scale * 0.25);
  yield (hh_routine scale)
;;
#
#
let q = 60./130. in
defer_quant q (fn t ->
  play_routine t schedule_event (hh_routine q);
  play_routine t schedule_event (sn_routine q); 
  play_routine t schedule_event (k_routine_other q kick)
  ;
);
#
# # let sn = sn_routine 0.5;
# #
# # defer_quant 2. (fn t ->
# # ;);
# #
#
