# HTTP Request parsing module
let HttpRequest = module
  
  let parse_request_line = fn line ->
    let parts = string_split line " ";
    match parts with
    | method::path::version::_ -> Some (method, path, version)
    | _ -> None
  ;;

  let parse_header = fn line ->
    match string_split line ": " with
    | key::value::_ -> Some (key, value)
    | _ -> None
  ;;

  let parse_headers = fn lines ->
    let rec loop = fn acc lines ->
      match lines with
      | [] -> acc
      | line::rest -> (
        match parse_header line with
        | Some (key, value) -> loop ((key, value)::acc) rest
        | None -> loop acc rest
      )
    in
    loop [] lines
  ;;

  let parse = fn request_str ->
    let lines = string_split request_str "\r\n";
    match lines with
    | request_line::header_lines -> (
      match parse_request_line request_line with
      | Some (method, path, version) -> 
        let headers = parse_headers header_lines;
        Some (method, path, version, headers)
      | None -> None
    )
    | _ -> None
  ;;
;;

# HTTP Response module
let HttpResponse = module
  
  let create = fn status_code status_text headers body ->
    let status_line = `HTTP/1.1 {status_code} {status_text}\r\n`;
    let header_lines = string_join (list_map (fn (k, v) -> `{k}: {v}\r\n`) headers) "";
    let content_length = `Content-Length: {array_size body}\r\n`;
    `{status_line}{content_length}{header_lines}\r\n{body}`
  ;;

  let ok = fn body ->
    create 200 "OK" [] body
  ;;

  let not_found = fn ->
    create 404 "Not Found" [] "404 - Not Found"
  ;;

  let internal_error = fn ->
    create 500 "Internal Server Error" [] "500 - Internal Server Error"
  ;;
;;

# Simple router module
let Router = module
  
  let routes = [
    ("GET", "/", fn _req -> HttpResponse.ok "Hello, World!");
    ("GET", "/health", fn _req -> HttpResponse.ok "OK");
    ("GET", "/time", fn _req -> 
      # You'd need to implement time functions
      HttpResponse.ok "Current time: 2025-06-30");
    ("POST", "/echo", fn req ->
      match req with
      | (method, path, version, headers) ->
        let body = `Method: {method}\nPath: {path}\nVersion: {version}`;
        HttpResponse.ok body
    );
  ];

  let find_route = fn method path ->
    let rec loop = fn routes ->
      match routes with
      | [] -> None
      | (route_method, route_path, handler)::rest -> (
        match (route_method == method && route_path == path) with
        | true -> Some handler
        | _ -> loop rest
      )
    in
    loop routes
  ;;

  let handle_request = fn req ->
    match req with
    | (method, path, version, headers) -> (
      match find_route method path with
      | Some handler -> handler req
      | None -> HttpResponse.not_found ()
    )
  ;;
;;
