#! env ylc
%include Synth
%include Fmt
%include Math

let schedule_event = extern fn Ptr -> Double -> Ptr -> ();

let amen_buf = read_buf "fat_amen_mono_48000.wav";

let tempo_adjust = 0.37;
let sample_rate_adjust = 0.9187;

# let play_amen = fn () -> 
#   bufplayer_node 
#     amen_buf
#     1.0
#     0.0
#     0.0
# ;;

# let wr = fn def -> 
#   reset_chain ();
#   let x = def ();
#   end_chain x
# ;;


let adjust = tempo_adjust * sample_rate_adjust / 0.8;

let a = bufplayer_node 
    amen_buf
    0.8
    0.0
    0.0;

a |> play_node;



let times = [|
  # 0.125,
  0.25,
  0.5,
  0.75,
|];

let sps = [|
  0.,
  0.25,
  0.5,
  0.75,
|];

let rates = [|
  0.8,
  0.8,
  0.8,
  0.8,
  0.4,
  -0.8,
  1.6,
|];

let choose = fn arr ->
  let idx = rand_int (array_size arr);
  array_at arr idx 
;;

choose sps; # pre-cache (Array of Double -> Double) version of choose
              # - not ideal but needed for now while we
              # don't have proper tree-based scope management :(

let stream_vals = fn (dur, phase, start_pos, rate): (Double * Double * Double * Double) ->
  
  let sp = phase * bipolar_scale 0.2 0.5 (cos (phase * 0.7));
  (0.04, phase, sp * 0.8 % 1.0, 0.8)
;;

let runner = fn
  args: (Ptr of (Double * Double * Double * Double))
  frame_offset: (Int)
  ->
  let (duration, phase, start_pos, rate) = *args;

  start_pos |> set_input_scalar_offset a 3 frame_offset;
  rate |> set_input_scalar_offset a 1 frame_offset;
  set_input_trig_offset 2 frame_offset a;


  stream_vals (duration, phase + duration, start_pos, rate)

  |> schedule_event runner duration
;;



schedule_event runner 0.0 (0.5 * tempo_adjust, 0., 0., 0.8);
