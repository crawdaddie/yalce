#! /Users/adam/projects/sound/yalce/build/lang
%include Fmt
%include Synth
%include Math

let schedule_event = extern fn Ptr -> Ptr -> Double -> ();

let sq_detune = fn () -> 
  let f = inlet 50. in
  let ff = inlet 500. in
  (sq_node f + sq_node (f * 1.01))
  |> biquad_hp_node ff 5.
;;

let wr = fn def -> 
  reset_chain ();
  let x = def ();
  end_chain x
;;

let x = sq_detune |> wr |> play;

let notes = [|
  110.0,
  123.47082531403103,
  130.8127826502993,
  146.8323839587038,
  164.81377845643496,
  174.61411571650194,
  195.99771799087463,
|];

let octaves = [|
  0.5,
  1.,
  2.,
  4.,
|];

let times = [|
  0.125,
  0.25,
  0.5,
  0.125,
|];


# let choose = fn arr ->
#   let idx = rand_int (array_size arr);
#   array_at arr idx 
# ;;

# choose notes; # pre-cache (Array of Double -> Double) version of choose
              # - not ideal but needed for now while we
              # don't have proper tree-based scope management :(

# let f = fn args frame_offset ->
#   let (duration, note, filter_freq) = deref args in
#   set_input_scalar x 0 (note * choose octaves);
#   set_input_scalar x 1 filter_freq;
#   schedule_event (f) (choose notes, (rand_double_range 100. 2000.)) duration;
#   ()
# ;;

# schedule_event (f) (1., 2.) 1.0;


let f = fn args frame_offset ->
  let (duration, note, filter_freq) = deref args;
  ()
;;

# f (1, 2, 3) 100;


