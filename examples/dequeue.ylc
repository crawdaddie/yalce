#! env ylc

%include Ref

let enqueue = fn (head, tail): ((List of l) * (List of l)) item: (l) ->
  let last = [item] in
  match head with
  | [] -> (last, last)
  | _ -> (
    let _ = list_concat tail last in
    (head, last)
  )
;;

let pop_left = fn (head, tail) ->
  match head with
  | [] -> ((head, tail), None)
  | x::rest -> ((rest, tail), Some x)  
;;

let queue_empty = fn (head, tail) ->
  match head with
  | [] -> true
  | _ -> false
;;

let new_queue = fn storage ->
  let head = storage in 
  let tail = storage in
  Ref (head, tail)
;;



