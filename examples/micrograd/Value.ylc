let string_add = extern fn String -> String -> String;

type Op =
  | Add
  | Sub
  | Mul
  | Div
  | Pow
  | Relu
  | Noop
  ;

type Value = (data: Double , children: (List of Value) , op: Op , grad: Double);

let list_rev = fn l: (List of Value) ->
  let rev = fn l res -> 
    match l with
    | [] -> res
    | x :: rest -> rev rest (x :: res) 
  ;;
  rev l []
;;

let list_map = fn f l: (List of Value) ->
  let aux = fn f l res -> 
    match l with
    | [] -> res
    | x :: rest -> aux f rest (f x :: res) 
  ;;
  aux f l []
;;

let Grad = module
  import ../Math;
  let vnew = fn d ->
    (Value d [] Noop 0.)
  ;;

  let add = fn a: (Value) b: (Value) ->
    Value ((+) (a.data) (b.data)) [a, b] Add 0.
  ;;

  let sub = fn a: (Value) b: (Value) ->
    Value ((a.data) - (b.data)) [a, b] Sub 0.
  ;;

  let mul = fn a: (Value) b: (Value) ->
    Value ((a.data) * (b.data)) [a, b] Mul 0.
  ;;

  let div = fn a: (Value) b: (Value) ->
    Value ((a.data) / (b.data)) [a, b] Div 0.
  ;;

  let pow = fn a: (Value) b: (Value) ->
    Value (Math.pow (a.data) (b.data)) [a, b] Pow 0.
  ;;

  let relu = fn a: (Value) ->
    let v = match (a.data) with
      | x if v < 0. -> 0.
      | x -> x
    in
    Value v [a] Relu 0.
  ;;

  let _backward = fn x: (Value) ->
    match x.op with
    | Add -> "Add"
    | Sub -> "Sub"
    | Mul -> "Mul"
    | Div -> "Div"
    | Pow -> "Pow"
    | Relu -> "Relu"
    | Noop -> ""
  ;;

  let backward = fn v: (Value) ->
    
    let (grad, children) = match (v.op, v.children) with
    | (Add, [a, b]) -> (1., [backward a, backward b])
    | (Sub, [a, b]) -> (1., [backward a, backward b])
    | (Mul, [a, b]) -> (1., [backward a, backward b])
    | (Div, [a, b]) -> (1., [backward a, backward b])
    | (Pow, [a, b]) -> (1., [backward a, backward b])
    | (Relu,[a]) -> (1., [backward a])
    | (Noop, []) -> (1., [])
    | _ -> (1., [])
    ;


    Value (v.data) children (v.op) grad
  ;;

  let val_to_str = fn a: (Value) ->
    let op_str = match a.op with
    | Add -> "Add"
    | Sub -> "Sub"
    | Mul -> "Mul"
    | Div -> "Div"
    | Pow -> "Pow"
    | Relu -> "Relu"
    | Noop -> ""
    ;

    let iter_children = fn children: (List of Value) str ->
      match children with
      | [] -> str
      | x::rest -> (
        let str_val = string_add str @@  val_to_str x;
        iter_children rest str_val
      )
    ;;
    match a.children with
    | [] -> `Value(data={a.data}, grad={a.grad} op={op_str}), `
    | _ -> (
      let children_str = iter_children (a.children) "";
      `Value(data={a.data}, grad={a.grad} op={op_str} children=[\n  {children_str}\n]), `
    )
  ;;

;
# Module of
#   Math: Module of
#     rand_int: (Int -> Int),
#     rand_double: (() -> Double),
#     rand_double_range: (Double -> Double -> Double),
#     amp_db: (Double -> Double),
#     db_amp: (Double -> Double),
#     sin: (Double -> Double),
#     cos: (Double -> Double),
#     bipolar_scale: (Double -> Double -> Double -> Double),
#     unipolar_scale: (Double -> Double -> Double -> Double),
#     double_array_init: (Int -> Double -> Ptr),
#     double_array: (Int -> Double -> Array of Double),
#     pow: (Double -> Double -> Double),
#   vnew: (`14	-> Value),
#   add: (...),
#   sub: (...),
#   mul: (...),
#   div: (...),
#   pow: (...),
#   relu: (...),
#   val_to_str: (Value -> Array of Char)

let a = Grad.add
  (Grad.vnew 1.)
  (Grad.pow (Grad.vnew 2.) (Grad.vnew 3.))
  ;

let z = Grad.backward a;
print (Grad.val_to_str z);
