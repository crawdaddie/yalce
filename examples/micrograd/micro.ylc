import ../../lib/Math;
let string_add = extern fn String -> String -> String;
type Op =
  | Add
  | Sub
  | Mul
  | Div
  | Pow
  | Relu
  | Noop
  ;

type Value = (data: Double, grad: Double, children: (Array of Value), op: Op);

let const = fn i ->
  Value i 0. [| |] Noop
;;

let mul = fn a: (Value) b: (Value) ->
  Value (a.data * b.data) 0. [| a, b |] Mul
;;

let pow = fn a: (Value) b: (Value) ->
  Value (Math.pow a.data b.data) 0. [| a, b |] Pow
;;

let div = fn a: (Value) b: (Value) ->
  Value (a.data / b.data) 0. [| a, pow b (const -1.) |] Mul
;;

let add = fn a: (Value) b: (Value) ->
  Value (a.data + b.data) 0. [| a, b |] Add
;;

let sub = fn a: (Value) b: (Value) ->
  let bb = mul b (const -1.); 
  Value (a.data + bb.data) 0. [| a, bb |] Add
  # Value (a.data - b.data) [| a, b|] Sub 0.
;;


let relu = fn a: (Value) ->
  let v = match (a.data) with
    | x if v < 0. -> 0.
    | x -> x
  in
  Value v 0. [| a |] Relu
;;

let (@) = array_at;
let to_str = fn a: (Value) ->
  let op_str = match a.op with
  | Add -> "Add"
  | Sub -> "Sub"
  | Mul -> "Mul"
  | Div -> "Div"
  | Pow -> "Pow"
  | Relu -> "Relu"
  | Noop -> "None"
  ;

  let iter_children = fn children: (Array of Value) str ->
    match (array_size children) with
    | 0 -> str
    | _ -> (
      let str_val = string_add str @@ to_str (children @ 0);
      iter_children (array_succ children) str_val
    )
  ;;

  match array_size a.children with
  | 0 -> `Value(data={a.data}, grad={a.grad} op={op_str}), `
  | _ -> (
    let children_str = iter_children (a.children) "";
    `Value(data={a.data}, grad={a.grad} op={op_str} children=[\n  {children_str}\n]), `
  )
;;

let set_grad = fn v: (Value) g: (Double) ->
  Value v.data g v.children v.op
;;

let backward = fn (data, children, op, grad): (Value) ->
  let bc = match op with
  | Add -> 
    (
      let l = children @ 0;
      let r = children @ 1;
      array_set 0 children (backward (set_grad l (l.grad + grad)));
      array_set 1 children (backward (set_grad r (r.grad + grad)));
      children
    )
  | Sub -> 
    (
      let l = children @ 0;
      let r = children @ 1;
      array_set 0 children (backward (set_grad l (l.grad - grad)) );
      array_set 1 children (backward (set_grad r (r.grad - grad)) );
      children
    )

  | Mul -> 
    (
      let l = children @ 0;
      let r = children @ 1;
      array_set 0 children (backward (set_grad l (l.grad + r.data * grad)));
      array_set 1 children (backward (set_grad r (r.grad + l.data * grad)));
      children
    )
  | Div ->
    (
      let l = children @ 0;
      let r = children @ 1;
      array_set 0 children (backward (set_grad l (l.grad + r.data / grad)));
      array_set 1 children (backward (set_grad r (r.grad + l.data / grad)));
      children
    )
  | Pow -> 
    (
      let l = children @ 0;
      let r = children @ 1;
      array_set 0 children (backward (set_grad l (l.grad + (r.data * (Math.pow l.data (r.data - 1))) * grad )));
      children
    )
  | Relu ->
    (
      let l = children @ 0;
      let new_grad_add = match data with
      | d if d > 0. -> grad
      | _ -> 0.
      ;
      array_set 0 children (backward (set_grad l (l.grad + new_grad_add)));
      children
    )
  | Noop -> children
  ;

  Value data bc op grad
;;



# let test = module
#   let test_linear = fn () ->
#     # a -> b -> c -> d
#     let a = const 2.0;
#     let b = mul a (const 3.0);
#     let c = add b (const 1.0);
#     let d = pow c (const 2.0);
#
#     let bd = backward @@ set_grad d 1.;
#
#     print @@ to_str bd;
#
#     let res = bd.data == 49. && bd.grad == 1.;
#
#     let l = bd.children @ 0;
#     let res2 = res && (l.data == 7. && l.grad == 14.);
#     res2
#   ;;
#   
# ;
#
#
#
