import ../../lib/Arrays;
import ../../lib/Math;
import ../../lib/Ref;


type Matrix = (
  rows: Int,
  cols: Int,
  data: Array of Double
);

let double_array_from_raw = extern fn Int -> Ptr -> Array of Double;
let _linalg_pool_init = extern fn Int -> ();
let _double_arr_alloc = extern fn Int -> Ptr;
let _linalg_pool_reset = extern fn () -> ();
let _ = _linalg_pool_init 10000000000;

let arr_alloc = fn size ->
  print `arr alloc {size}\n`;
  double_array_from_raw size (_double_arr_alloc size)
;;

let pool_reset = fn () ->
  _linalg_pool_reset ();
  ()
;;
let with_pool = fn epoch f ->
  pool_reset ();
  f epoch
;;


let matrix_zeroes = fn r c ->
  # let arr = arr_alloc (r * c);
  let arr = array_fill_const (r * c) 0.;
  Matrix r c arr
;;

let matrix_zeroes_tmp = fn r c ->
  let arr = arr_alloc (r * c);
  Matrix r c arr
;;



let print_matrix = fn m: (Matrix) ->
  print "[|\n";
  for i = 0 to m.rows in (
    print "  [|";
    for j = 0 to m.cols in (
      print `{m.data[(i * m.cols + j)]}, `
    );
    print "|],\n"
  );
  print "|]\n"
;;


let matrix_size = fn m: (Matrix) -> 
  m.rows * m.cols
;;

let matrix_row = fn m: (Matrix) i ->
  Matrix 1 m.cols (array_range (i * m.cols) m.cols m.data)
;;

let matrix_copy = fn m: (Matrix) ->
  let copy = matrix_zeroes_tmp m.rows m.cols; 
  for i = 0 to (array_size m.data) in (
    copy.data[i] := m.data[i]
  );
  copy
;;

let print_arr = fn arr: (Array of Double) -> 
  print "[| ";
  for i = 0 to (array_size arr) in (
    print `{arr[i]}, `
  );
  print "|]\n"
  
;;

let matrix_random = fn c r ->
  Matrix r c (array_fill (r * c) (fn i: (Int) -> Math.rand_double_range -1. 1.))
;;

let matrix_random_bias = fn size ->
  let arr = array_fill_const size 0.0;
  for i = 0 to size in (
    arr[i] := Math.rand_double_range -0.01 0.01
  );
  matrix_1d arr
;;

let matrix_1d = fn a: (Array of Double) ->
  Matrix 1 (array_size a) a
;;

let matrix_transpose = fn m: (Matrix) ->
  let t = matrix_zeroes_tmp m.cols m.rows ;
  for i = 0 to m.rows in (
    for j = 0 to m.cols in (
      let v = m.data[(i * m.cols + j)];
      t.data[j * t.cols + i] := v
    )
  );
  t
;;

let matrix_get = fn m: (Matrix) (i, j): (Int, Int) ->
  m.data[i * m.cols + j]
;;
let (@) = matrix_get;

let matrix_mul = fn b: (Matrix) a: (Matrix) ->
  
  let c = matrix_zeroes_tmp a.rows b.cols;
  # print `matrix mul out {c.rows} {c.cols}\n`;

  for i = 0 to a.rows in (
    for j = 0 to b.cols in (
      for k = 0 to b.rows in (
        let v = c @ (i, j);
        c.data[i * c.cols + j] := v + (a @ (i,k)) * b @ (k, j) 
        # a.data[i * a.cols + j] := v + (a @ (i,k)) * b @ (k, j) 
      )
    ) 
  ); 
  c
;;

let matrix_add = fn a: (Matrix) b: (Matrix) ->
  "element-wise matrix add - mutates b";
  for i = 0 to (matrix_size a) in (
    let av = a.data[i];
    let bv = b.data[i];
    b.data[i] := (av + bv)
  );
  b
;;




let matrix_sum_rows = fn m: (Matrix) ->
  let s = matrix_zeroes_tmp m.cols 1; 
  for c = 0 to m.cols - 1 in (
    let sum = [|0.0|];
    for r = 0 to m.rows - 1 in (
      sum[0] := sum[0] + m.data[r * m.cols + c]
    );

    s.data[c] := sum[0]
  );
  
  s
;;

let matrix_sub = fn a: (Matrix) b: (Matrix) ->
  let c = matrix_zeroes_tmp a.rows b.cols;
  for i = 0 to (array_size a.data) in (
    let av = a.data[i];
    let bv = b.data[i];
    c.data[i] := (av - bv)
  );
  c
;;

let matrix_copy_to = fn target: (Matrix) source: (Matrix) ->
  for i = 0 to (array_size source.data) in (
    target.data[i] := source.data[i]
  );
  target
;;


let matrix_scale = fn s: (Double) a: (Matrix) ->
  let c = matrix_zeroes_tmp a.rows a.cols;
  for i = 0 to (array_size a.data) in (
    let av = a.data[i];
    c.data[i] := av * s
  );
  c
  
;;

let matrix_mul_elwise = fn a: (Matrix) b: (Matrix) ->

  let c = matrix_zeroes_tmp a.rows a.cols;
  for i = 0 to (array_size a.data) in (
    let av = a.data[i];
    let bv = b.data[i];
    c.data[i] := av * bv
  );
  c
;;


