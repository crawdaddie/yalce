let open_file = extern fn String -> String -> Option of Ptr;
let fclose = extern fn Ptr -> ();
let read_bytes = extern fn Ptr -> String; let read_lines = extern fn Ptr -> (List of String, Int);
let char_to_int = extern fn Char -> Int;


let get_lines = fn () ->
  let (c, l) = match (open_file "examples/micrograd/names.txt" "rb") with
  | Some fd -> (
    let c, l = read_lines fd;
    fclose fd;
    (c, l)
  )
  | None -> ([], 0)
  ;
  (c, l)
;;

let lines, num = get_lines ();

let string_concat = extern fn Ptr -> Int -> String;
let start_char = '^';
let end_char = '$';

let bigrams = fn word: (String) ->
  let chars = `^{word}^`;
  let bg = array_fill_const ((array_size chars) - 1) ('\0', '\0');
  for i = 0 to (array_size chars - 1) in (
    let a, b = (chars[i], chars[i + 1]);
    # print `{i}: {a}:{b}\n`;
    bg[i] := (a, b)
  );
  bg
;;

open Matrix;


let char_to_int = extern fn Char -> Int;
let char_encode = fn ch ->
  match ch with
  | '^' -> 0 
  # | '$' -> 27
  | _ -> (char_to_int ch) - 97 + 1
;;

let bigram_freqs = Matrix 27 27 (array_fill_const (27 * 27) 0);
# initialize with 1 or higher to do model-smoothing
# without model-smoothing, the log probability of a bigram like j->q will be -inf because j-q has zero counts in this dataset
# bigram_freqs is a matrix where F[i][j] means char for i is followed by char for j F[i][j] times 
for word = iter lines in (
  for bgs = iter (bigrams word) in (
    let a, b = bgs;
    let i = char_encode a; 
    let j = char_encode b;
    let freq = bigram_freqs.data[i * 27 + j];
    bigram_freqs.data[i * 27 + j] := freq + 1
  )
);

let bigram_dists = Matrix 27 27 (array_fill_const (27 * 27) 1.);

# bigram_dist is a matrix where F[i][j] is the probability that char j follows char i 
for i = 0 to 27 in (
  let r = mrow bigram_freqs i in
  let s = Arrays.fold (fn s v -> s + v) 0 r.data in
  for j = 0 to 27 in (
    bigram_dists.data[i * 27 + j] := (r.data[j]) / (Double s)
  )
);


print "## markov matrix:\n";
mprint bigram_dists;

let multinomial = fn weights ->
  let __multinomial = fn rand sum weights: (Array of Double) ->
    let cum = sum + weights[0];
    match rand <= cum with
    | true -> array_size weights
    | _ -> __multinomial rand cum (array_succ weights)
  ;;
  let x = __multinomial (Math.rand_double ()) 0. weights;
  array_size weights - x
;;

let rev_list_to_arr = fn len: (Int) list: (List of Int) ->
  let arr = array_fill_const len '\0'; 
  let i = [| len - 1 |];
  for chidx = iter list in (
    arr[i[0]] := Char (97 + chidx - 1 );
    i[0] := i[0] - 1

  );
  arr
;;


print "## random weird names:\n";
for i = 0 to 50 in (
  let len = [|0|];
  let aux = fn len idx l -> 
    match idx with
    | 0 -> (len, l)
    | _ -> aux (len+1) (multinomial (mrow bigram_dists idx).data) (idx::l) 
  ;;
  let (len, word) = aux 0 (multinomial (mrow bigram_dists 0).data) [];

  let out = rev_list_to_arr len word;
  print `{out}\n`
);

let log = extern fn Double -> Double;
let log_sum = [|0.|];
let num_bigrams = [| 0 |];
for word = iter lines in (
  for bgs = iter (bigrams word) in (
    let a, b = bgs;
    let i = char_encode a;
    let j = char_encode b;
    let p = mget bigram_dists (i, j);
    # print `{a}:{b} - {p}  [logp {log p}]\n`;
    log_sum[0] := log_sum[0] + (log p);
    num_bigrams[0] := 1 + num_bigrams[0]
  ) 
);

print `## negative log-likelihood {-1 * log_sum[0]}\n`;
print `## average neg log-likelihood over {num_bigrams[0]} bigrams {-1 *log_sum[0] / num_bigrams[0]}\n`;
