let open_file = extern fn String -> String -> Option of Ptr;
let fclose = extern fn Ptr -> ();
let read_bytes = extern fn Ptr -> String;
let read_lines = extern fn Ptr -> (List of String, Int);
let char_to_int = extern fn Char -> Int;


let get_lines = fn () ->
  let (c, l) = match (open_file "examples/micrograd/names.txt" "rb") with
  | Some fd -> (
    let c, l = read_lines fd;
    fclose fd;
    (c, l)
  )
  | None -> ([], 0)
  ;
  (c, l)
;;

let find_min_max = fn l: (List of String) ->
  let minl = [| 200000 |];
  let maxl = [| 0 |];
  for el = iter l in (
    # if () then () else ();
    let len = array_size el;
    match len < minl[0] with 
    | true -> (
      minl[0] := len;
      ()
    )
    | _ -> ()
    ;

    match len > maxl[0] with 
    | true -> (
      maxl[0] := len;
      ()
    )
    | _ -> ()
  );
  (minl[0], maxl[0])
;;

let lines, num = get_lines ();
let min_len, max_len = find_min_max lines;
print `min {min_len} max {max_len}\n`;

let string_concat = extern fn Ptr -> Int -> String;
let start_char = '^';
let end_char = '$';

let bigrams = fn word: (String) ->
  let chars = `^{word}^`;
  let bg = array_fill_const ((array_size chars) - 1) ('\0', '\0');
  for i = 0 to (array_size chars - 1) in (
    let a, b = (chars[i], chars[i + 1]);
    # print `{i}: {a}:{b}\n`;
    bg[i] := (a, b)
  );
  bg
;;

open Matrix;


let char_to_int = extern fn Char -> Int;
let char_encode = fn ch ->
  match ch with
  | '^' -> 0 
  # | '$' -> 27
  | _ -> (char_to_int ch) - 97 + 1
;;

let bigram_freqs = Matrix 27 27 (array_fill_const (27 * 27) 0);
# bigram_freqs is a matrix where F[i][j] means char for i is followed by char for j F[i][j] times 
for word = iter lines in (
  for bgs = iter (bigrams word) in (
    let a, b = bgs;
    let i = char_encode a; 
    let j = char_encode b;
    let freq = bigram_freqs.data[i * 27 + j];
    bigram_freqs.data[i * 27 + j] := freq + 1
  )
);

mprint bigram_freqs



