let open_file = extern fn String -> String -> Option of Ptr;
let fclose = extern fn Ptr -> ();

let read_bytes = extern fn Ptr -> String;
let char_to_int = extern fn Char -> Int;


let get_text = fn () ->
  match (open_file "examples/micrograd/tiny_shakespeare.txt" "rb") with
  | Some fd -> (
    let c = read_bytes fd;
    fclose fd;
    c
  )
  | None -> ""
;;
let text = get_text ();

let freqs = array_fill_const 256 0;
let char_map = array_fill_const 256 0;

for i = 0 to array_size text in (
  let ch = char_to_int (text[i]);
  freqs[ch] := freqs[ch] + 1
);

let distinct_chars = [|0|];
for i = 0 to array_size freqs in (
  match freqs[i] > 0 with
  | true -> (
    char_map[i] := distinct_chars[0];
    distinct_chars[0] := distinct_chars[0] + 1;
    ()
  )
  | _ -> ()
);

#  Create reverse mapping from index (0-64) back to original ASCII code
let reverse_map = array_fill_const 65 0;
for i = 0 to array_size freqs in (
  match freqs[i] > 0 with
  | true -> (
    reverse_map[char_map[i]] := i;
    ()
  )
  | _ -> ()
);

let encode = fn ch ->
  char_map[char_to_int ch]
;;

let decode = fn i ->
  Char (reverse_map[i])
;;

print `distinct chars: {distinct_chars[0]}\n`;

let encoded_text = array_fill (array_size text) (fn i: (Int) -> encode (text[i])); 

let num_train_tokens = 9 * (array_size encoded_text) / 10;
let train_data = array_range 0 num_train_tokens encoded_text;
let val_data = array_range num_train_tokens ((array_size encoded_text) / 10) encoded_text;

import ../../lib/Math;
import ../../lib/Arrays;
open Matrix;


let block_size = 8;
let batch_size = 4;

let get_training_batch = fn () ->
  let b_arr = array_fill_const (batch_size * block_size) 0;
  let y_arr = array_fill_const (batch_size * block_size) 0;


  for i = 0 to batch_size in (
    let rand_idx = Math.rand_int ((array_size train_data) - block_size);
    let x = array_range rand_idx block_size train_data; 
    let y = array_range (rand_idx + 1) block_size train_data;
    for j = 0 to block_size in (
      b_arr[(i * block_size) + j] := x[j];
      y_arr[(i * block_size) + j] := y[j]
    )
  );

  (Matrix batch_size block_size b_arr, Matrix batch_size block_size y_arr) 

;;


let x, y = get_training_batch ();

Arrays.print_arr x.data;

mprint x;
mprint y





