import ../../lib/Math;
import ../../lib/Arrays;


type Matrix = (
  rows: Int,
  cols: Int,
  data: Array of T
);

let mfill_const = fn r c v ->
  let arr = array_fill_const (r * c) v;
  Matrix r c arr
;;

let mfill = fn r c f ->
  let arr = array_fill_const (r * c) (f 0 0);
  for i = 1 to (r * c) in (
    arr[i] := f (i / c) (i % c)
  );
  Matrix r c arr
;;

let mget = fn m: (Matrix of T) (i, j): (Int, Int) ->
  m.data[i * m.cols + j]
;;

let mset = fn m: (Matrix of T) (i, j): (Int, Int) v: (T) ->
  m.data[i * m.cols + j] := v
;;


let Storage = module
  let double_array_from_raw = extern fn Int -> Ptr -> Array of Double;
  let _linalg_pool_init = extern fn Int -> ();
  let _double_arr_alloc = extern fn Int -> Ptr;
  let _linalg_pool_reset = extern fn () -> ();
  let _ = _linalg_pool_init 10000000;
                             # 6159942

  let arr_alloc = fn size ->
    double_array_from_raw size (_double_arr_alloc size)
  ;;

  let reset = fn () ->
    _linalg_pool_reset ();
    ()
  ;;
;

let (@) = mget;

let mmul = fn a: (Matrix of T) b: (Matrix of T) ->
  
  let c = Matrix a.rows b.cols (array_fill_const (a.rows * b.cols) (a @ (0, 0)));
  let vs = [|0.|]; 

  for i = 0 to a.rows in (
    for j = 0 to b.cols in (
      vs[0] := 0.;
      for k = 0 to b.rows in (
        vs[0] := vs[0] + (a @ (i,k)) * (b @ (k, j))
      );
      c.data[i * c.cols + j] := vs[0]
    ) 
  ); 
  c
;;
let _transpose = extern fn Int -> Int -> Ptr of Double -> Array of Double; 

let mtrans_tmp = fn m: (Matrix of T) ->
  # let t = Matrix m.cols m.rows ( Storage.arr_alloc (m.cols * m.rows));
  # for i = 0 to m.rows in (
  #   for j = 0 to m.cols in (
  #     let v = m.data[(i * m.cols + j)];
  #     t.data[j * t.cols + i] := v
  #   )
  # );
  # t
  Matrix m.cols m.rows ( _transpose m.rows m.cols (cstr m.data) )
;;


let _mmul_tmp = extern fn Int -> Int -> Ptr of Double -> Int -> Int -> Ptr of Double -> Array of Double;
let _mmul_blas = extern fn Int -> Int -> Ptr of Double -> Int -> Int -> Ptr of Double -> Ptr of Double -> Array of Double;

let mmul_tmp = fn a: (Matrix of T) b: (Matrix of T) ->
  let out_data = Storage.arr_alloc (a.rows * b.cols);
  let res_arr = _mmul_blas a.rows a.cols (cstr a.data) b.rows b.cols (cstr b.data) (cstr out_data); 
  Matrix a.rows b.cols res_arr
;;


let msize = fn m: (Matrix of T) -> 
  m.rows * m.cols
;;

let mprint = fn m: (Matrix of T) ->
  print "[|\n";
  for i = 0 to m.rows in (
    print "  [|";
    for j = 0 to m.cols in (
      print `{m.data[(i * m.cols + j)]}, `
    );
    print "|],\n"
  );
  print "|]\n"
;;

let mrow = fn m: (Matrix of T) i ->
  Matrix 1 m.cols (array_range (i * m.cols) m.cols m.data)
;;

let melwise_map_ip = fn f m: (Matrix of T) ->
  for i = 0 to (msize m) in (
    m.data[i] := f (m.data[i])
  );
  m
;;

let mexp = fn m: (Matrix of Double) ->
  melwise_map_ip (fn v -> Math.exp v) m
;;

let msum_rows = fn m: (Matrix of T) ->
  let arr = array_fill_const m.rows (m @ (0,0));
  for i = 0 to m.rows in (
    let row = mrow m i;
    arr[i] := (Arrays.fold (fn s v -> s + v) 0. (row.data))
  );
  Matrix m.rows 1 arr
;;

let msum_rows_tmp = fn m: (Matrix of T) ->
  let arr = Storage.arr_alloc m.rows;
  for i = 0 to m.rows in (
    let row = mrow m i;
    arr[i] := (Arrays.fold (fn s v -> s + v) 0. (row.data))
  );
  Matrix m.rows 1 arr
;;

let mrow_l2_norm = fn m: (Matrix of T) ->

  let row_norms = msum_rows_tmp m;
  # TODO: cb to mfill is a closure - not working quite
  # mfill m.rows m.cols (fn i j -> (m @ (i, j)) / (row_norms @ (i, 0)) )
  for i = 0 to m.rows in (
    for j = 0 to m.cols in (
      let v = m.data[i * m.cols + j] / (row_norms @ (i, 0));
      m.data[i * m.cols + j] := v
    )
  );
  m
;;



