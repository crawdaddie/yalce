open micro;


type Activation =
  | Relu
  | Linear
  ;

type TNeuron = (
  weights: Array of Value,
  bias: Value,
  act_type: Activation
);

let relu = fn weights bias ->
  TNeuron weights bias Relu
;;

let lin = fn weights bias ->
  TNeuron weights bias Linear
;;

# let call = fn n: (TNeuron) x: (Array of Value) -> 
#   let sums = fn res: (Value) weights: (Array of Value) ins: (Array of Value) -> 
#     match (array_size weights) with
#     | 0 -> add res n.bias
#     | _ -> (
#       let wi = weights @ 0;
#       let xi = ins @ 0;
#       sums (add res (mul wi xi)) (array_succ weights) (array_succ ins)
#     )
#   ;;
#
#   let act = sums (const 0.) n.weights x in 
#   match n.act_type with
#   | Relu -> relu act
#   | Linear -> act
# ;;

# let to_str = fn n: (TNeuron) ->
#   match n.act_type with
#   | Relu -> `ReLU TNeuron ({array_size n.weights})`
#   | Linear -> `Linear TNeuron ({array_size n.weights})`
# ;;
let (@) = array_at;
let zero_grads = fn ws: (Array of Value) ->
  # Arrays.foldi (fn i: (Int) res: (Array of Value) v: (Value) -> 
  #   let zeroed = set_grad v 0.;
  #   array_set i res zeroed;
  #   res
  # ) ws ws
  match (array_size ws) with
  | 0 -> ()
  | _ -> (
    let zeroed = set_grad (ws @ 0) 0.;
    array_set 0 ws zeroed;
    zero_grads (array_succ ws);
    ()
  )
;;

let zero_grad = fn n: (TNeuron) ->
  zero_grads n.weights;
  TNeuron n.weights (set_grad n.bias 0.) n.act_type
;;


