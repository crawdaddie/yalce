# let chain_wrap = fn def: (() -> Synth) -> 
#   reset_chain ();
#   let x = def () in
#   end_chain x
# ;;

type SynthInput = 
  | Scalar of Int
  | Trig of Int
  ;

let instantiate_template = extern fn List of (Int, Double) -> Ptr -> Synth;

let array_to_buf = extern fn Array of Double -> Synth;

# let play_node = extern fn Synth -> Synth;
# let play_node_offset = extern fn Int -> Synth -> Synth;
let play_node_offset_w_kill = extern fn Uint64 -> Double -> Int -> Synth -> Synth;

let init_audio = extern fn Ptr of Int -> () in
  init_audio ()
;

let play_tpl = fn f ->
  f |> compile_blob_template |> instantiate_template [] |> play_node;;


let sin = sin_node;


let get_sq_table = extern fn () -> Ptr of Double;
let get_sq_tabsize = extern fn () -> Int;
let get_sin_table = extern fn () -> Ptr of Double;
let get_sin_tabsize = extern fn () -> Int;
let get_saw_table = extern fn () -> Ptr of Double;
let get_saw_tabsize = extern fn () -> Int;

let Constructor : Synth = module
  let of_int = fn a: (Int) ->
    const_sig a
  ;;

  let of_num = fn a: (Double) ->
    const_sig a
  ;;
;
let compile_blob_template = fn sdef ->
  start_blob ();
  sdef ();
  end_blob ()
;;



