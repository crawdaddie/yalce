# osc.h
let maketable_sin = extern fn () -> ();
let maketable_sq = extern fn () -> ();
let maketable_saw = extern fn () -> ();
let sin_node = extern fn Synth -> Synth;
let sq_node = extern fn Synth -> Synth;
let sq_pwm_node = extern fn Synth -> Synth -> Synth;
let phasor_node = extern fn Synth -> Synth;
let raw_osc_node = extern fn Synth -> Synth -> Synth;
let osc_bank_node = extern fn Synth -> Synth -> Synth;
let bufplayer_node = extern fn Synth -> Synth -> Synth;
let bufplayer_trig_node = extern fn Synth -> Synth -> Synth -> Synth -> Synth;
let white_noise_node = extern fn () -> Synth;
let brown_noise_node = extern fn () -> Synth;
let chirp_node = extern fn Double -> Double -> Synth -> Synth -> Synth;
let impulse_node = extern fn Synth -> Synth;
let ramp_node = extern fn Synth -> Synth;
let trig_rand_node = extern fn Synth -> Synth;
let trig_sel_node = extern fn Synth -> Synth -> Synth;
let granulator_node = extern fn Int -> Synth -> Synth -> Synth -> Synth -> Synth;
let pm_node = extern fn Synth -> Synth -> Synth -> Synth;
let lfnoise_node = extern fn Synth -> Synth -> Synth -> Synth;
let saw_node = extern fn Synth -> Synth;
let rand_trig_node = extern fn Synth -> Synth -> Synth -> Synth;
let grain_osc_node = extern fn Int -> Synth -> Synth -> Synth -> Synth -> Synth -> Synth;
let maketable_grain_window = extern fn () -> ();
let array_choose_trig_node = extern fn Int -> Ptr -> Synth -> Synth;

# ext_lib.h
let start_blob = extern fn () -> ();
let end_blob = extern fn () -> Ptr;
let inlet = extern fn Double -> Synth;
let buf_ref = extern fn Synth -> Synth;
let play_node = extern fn Synth -> Synth;
let set_input_scalar_offset = extern fn Synth -> Int -> Int -> Double -> Synth;
let set_input_scalar = extern fn Synth -> Int -> Double -> Synth;
let set_input_trig_offset = extern fn Synth -> Int -> Int -> Synth;
let set_input_buf = extern fn Int -> Synth -> Synth -> Synth;
let play_node_offset = extern fn Int -> Synth -> Synth;
let set_input_buf_immediate = extern fn Int -> Synth -> Synth -> Synth;
let load_soundfile = extern fn Ptr -> Synth;
let trigger_gate = extern fn Int -> Double -> Int -> Synth -> Synth;
let midi_to_freq = extern fn Int -> Double;
let ctx_main_out = extern fn () -> Ptr;
let node_out = extern fn Synth -> Ptr;
let sig_raw = extern fn Ptr -> Ptr;
let sig_size = extern fn Ptr -> Int;
let sig_layout = extern fn Ptr -> Int;
let render_to_buf = extern fn Int -> Synth -> Synth;
let node_replace = extern fn Synth -> Synth -> ();

# envelope.h
let asr_kill_node = extern fn Double -> Double -> Double -> Synth -> Synth;
let asr_node = extern fn Double -> Double -> Double -> Synth -> Synth;

# filter.h
let tanh_node = extern fn Double -> Synth -> Synth;
let lag_node = extern fn Double -> Synth -> Synth;
let comb_node = extern fn Double -> Double -> Double -> Synth -> Synth;
let dyn_comb_node = extern fn Synth -> Double -> Double -> Synth -> Synth;
let butterworth_hp_node = extern fn Synth -> Synth -> Synth;
let biquad_hp_node = extern fn Synth -> Synth -> Synth -> Synth;
let biquad_bp_node = extern fn Synth -> Synth -> Synth -> Synth;
let biquad_lp_node = extern fn Synth -> Synth -> Synth -> Synth;
let gverb_node = extern fn Synth -> Synth;

# node_util.h
let sum2_node = extern fn Synth -> Synth -> Synth;
let mul2_node = extern fn Synth -> Synth -> Synth;
let sub2_node = extern fn Synth -> Synth -> Synth;
let mod2_node = extern fn Synth -> Synth -> Synth;
let div2_node = extern fn Synth -> Synth -> Synth;
let const_sig = extern fn Double -> Synth;
let const_buf = extern fn Double -> Int -> Int -> Synth;

# let chain_wrap = fn def: (() -> Synth) -> 
#   reset_chain ();
#   let x = def () in
#   end_chain x
# ;;

type SynthInput = 
  | Scalar of Int
  | Trig of Int
  ;

let instantiate_template = extern fn List of (Int, Double) -> Ptr -> Synth;


# let play_node = extern fn Synth -> Synth;
# let play_node_offset = extern fn Int -> Synth -> Synth;
let play_node_offset_w_kill = extern fn Int -> Double -> Int -> Synth -> Synth;

let init_audio = extern fn () -> () in
  init_audio ()

