# Auto-generated by engine/Makefile on 2025-06-13 15:44:29
# Regenerate with: make -C engine ylc_bindings

type Synth = Ptr of Char;

type SynthInput = 
  | Scalar of Int
  | Trig of Int
  ;
# osc.h
let maketable_sin = extern fn () -> ();
let maketable_sq = extern fn () -> ();
let maketable_saw = extern fn () -> ();
let sin_node = extern fn Synth -> Synth;
let sq_node = extern fn Synth -> Synth;
let sq_pwm_node = extern fn Synth -> Synth -> Synth;
let phasor_node = extern fn Synth -> Synth;
let raw_osc_node = extern fn Synth -> Synth -> Synth;
let unison_osc_node = extern fn Int -> Synth -> Synth -> Synth -> Synth -> Synth;
let osc_bank_node = extern fn Synth -> Synth -> Synth;
let bufplayer_node = extern fn Synth -> Synth -> Synth;
let bufplayer_trig_node = extern fn Synth -> Synth -> Synth -> Synth -> Synth;
let white_noise_node = extern fn () -> Synth;
let brown_noise_node = extern fn () -> Synth;
let static_chirp_node = extern fn Double -> Double -> Synth -> Synth -> Synth;
let chirp_node = extern fn Synth -> Synth -> Synth -> Synth -> Synth;
let impulse_node = extern fn Synth -> Synth;
let ramp_node = extern fn Synth -> Synth;
let trig_rand_node = extern fn Synth -> Synth;
let trig_range_node = extern fn Synth -> Synth -> Synth -> Synth;
let trig_sel_node = extern fn Synth -> Synth -> Synth;
let granulator_node = extern fn Int -> Synth -> Synth -> Synth -> Synth -> Synth;
let pm_node = extern fn Synth -> Synth -> Synth -> Synth;
let lfnoise_node = extern fn Synth -> Synth -> Synth -> Synth;
let saw_node = extern fn Synth -> Synth;
let rand_trig_node = extern fn Synth -> Synth -> Synth -> Synth;
let grain_osc_node = extern fn Int -> Synth -> Synth -> Synth -> Synth -> Synth -> Synth;
let maketable_grain_window = extern fn () -> ();
let array_choose_trig_node = extern fn Int -> Ptr -> Synth -> Synth;
let pow2table_read = extern fn Double -> Int -> Ptr -> Double;

# ext_lib.h
let start_blob = extern fn () -> ();
let end_blob = extern fn () -> Ptr;
let inlet = extern fn Double -> Synth;
let hw_inlet = extern fn Int -> Synth;
let multi_chan_inlet = extern fn Int -> Double -> Synth;
let buf_ref = extern fn Synth -> Synth;
let play_node = extern fn Synth -> Synth;
let play_node_dur = extern fn Uint64 -> Double -> Int -> Synth -> Synth;
let set_input_scalar_offset = extern fn Synth -> Int -> Uint64 -> Double -> Synth;
let set_input_scalar = extern fn Synth -> Int -> Double -> Synth;
let set_input_trig_offset = extern fn Synth -> Int -> Uint64 -> Synth;
let set_input_buf = extern fn Int -> Synth -> Synth -> Synth;
let play_node_offset = extern fn Uint64 -> Synth -> Synth;
let set_input_buf_immediate = extern fn Int -> Synth -> Synth -> Synth;
let load_soundfile = extern fn Ptr -> Synth;
let trigger_gate = extern fn Uint64 -> Double -> Int -> Synth -> Synth;
let midi_to_freq = extern fn Int -> Double;
let ctx_main_out = extern fn () -> Ptr;
let node_out = extern fn Synth -> Ptr;
let sig_raw = extern fn Ptr -> Ptr;
let sig_size = extern fn Ptr -> Int;
let sig_layout = extern fn Ptr -> Int;
let render_to_buf = extern fn Int -> Synth -> Synth;
let node_replace = extern fn Synth -> Synth -> ();
let null_synth_node = extern fn () -> Synth;
let node_add = extern fn Uint64 -> Synth -> Synth -> Synth;
let node_add_dur = extern fn Uint64 -> Double -> Int -> Synth -> Synth -> Synth;
let group_node = extern fn () -> Synth;
let group_add = extern fn Synth -> Synth -> Synth;

# envelope.h
let asr_kill_node = extern fn Double -> Double -> Double -> Synth -> Synth;
let asr_node = extern fn Double -> Double -> Double -> Synth -> Synth;
let aslr_node = extern fn Double -> Double -> Double -> Double -> Synth -> Synth;

# filter.h
let tanh_node = extern fn Double -> Synth -> Synth;
let lag_node = extern fn Synth -> Synth -> Synth;
let comb_node = extern fn Double -> Double -> Double -> Synth -> Synth;
let dyn_comb_node = extern fn Synth -> Double -> Double -> Synth -> Synth;
let butterworth_hp_node = extern fn Synth -> Synth -> Synth;
let biquad_hp_node = extern fn Synth -> Synth -> Synth -> Synth;
let biquad_bp_node = extern fn Synth -> Synth -> Synth -> Synth;
let biquad_lp_node = extern fn Synth -> Synth -> Synth -> Synth;
let gverb_node = extern fn Synth -> Synth;
let allpass_node = extern fn Double -> Double -> Synth -> Synth;
let reverb_node = extern fn Double -> Double -> Double -> Double -> Synth -> Synth;
let grain_pitchshift_node = extern fn Double -> Double -> Synth -> Synth;
let dyn_tanh_node = extern fn Synth -> Synth -> Synth;
type MathNodeFn = Double -> Double;
let math_node = extern fn MathNodeFn -> Synth -> Synth;
let stutter_node = extern fn Double -> Synth -> Synth -> Synth -> Synth;

# node_util.h
let sum2_node = extern fn Synth -> Synth -> Synth;
let mul2_node = extern fn Synth -> Synth -> Synth;
let sub2_node = extern fn Synth -> Synth -> Synth;
let mod2_node = extern fn Synth -> Synth -> Synth;
let div2_node = extern fn Synth -> Synth -> Synth;
let const_sig = extern fn Double -> Synth;
let const_buf = extern fn Double -> Int -> Int -> Synth;
let stereo_node = extern fn Synth -> Synth;
let pan_node = extern fn Synth -> Synth -> Synth;
let empty_synth = extern fn () -> Synth;
let sah_node = extern fn Synth -> Synth -> Synth;

# lfo.h
let lfo_node = extern fn Synth -> Synth -> Synth;
let buf_env_node = extern fn Synth -> Synth -> Synth -> Synth;
let lfpulse_node = extern fn Synth -> Synth -> Synth -> Synth;
let perc_env_node = extern fn Synth -> Synth -> Synth;
let gated_buf_env_node = extern fn Synth -> Synth -> Synth;

# bus.h
let pipe_into = extern fn Synth -> Int -> Synth -> Synth;

# glue.h
let glue_node = extern fn Double -> Double -> Double -> Double -> Double -> Double -> Synth -> Synth;

# faust/faust.h
let temper_node = extern fn Double -> Double -> Double -> Double -> Double -> Double -> Double -> Synth -> Synth;
let dyn_temper_node = extern fn Double -> Double -> Double -> Double -> Double -> Double -> Synth -> Synth -> Synth;
let vital_rev_node = extern fn Double -> Double -> Double -> Double -> Double -> Double -> Double -> Double -> Double -> Double -> Double -> Double -> Synth -> Synth;
let zita_rev_node = extern fn Double -> Double -> Double -> Double -> Double -> Double -> Double -> Double -> Double -> Double -> Double -> Synth -> Synth;
let zita_rev_preset = extern fn Synth -> Synth;
let zita_rev_plate = extern fn Synth -> Synth;
let zita_rev_hall = extern fn Synth -> Synth;
let imp_train_node = extern fn Synth -> Synth;

# let chain_wrap = fn def: (() -> Synth) -> 
#   reset_chain ();
#   let x = def () in
#   end_chain x
# ;;
 
# TODO: add impls for Ord and Eq??
let Arithmetic : Synth = module 
  let rank = 5.; # rank must be a literal
  let add = fn a: (Synth) b: (Synth) -> sum2_node a b;;
  let sub = fn a: (Synth) b: (Synth) -> sub2_node a b;;
  let mul = fn a: (Synth) b: (Synth) -> mul2_node a b;;
  let div = fn a: (Synth) b: (Synth) -> div2_node a b;;
  let mod = fn a: (Synth) b: (Synth) -> mod2_node a b;;
;

let Constructor : Synth = module
  let of_int = fn a: (Int) ->
    const_sig a
  ;;

  let of_num = fn a: (Double) ->
    const_sig a
  ;;
;


let instantiate_template = extern fn List of (Int, Double) -> Ptr -> Synth;

let array_to_buf = extern fn Array of Double -> Synth;

# let play_node = extern fn Synth -> Synth;
# let play_node_offset = extern fn Int -> Synth -> Synth;
let play_node_offset_w_kill = extern fn Uint64 -> Double -> Int -> Synth -> Synth;

let init_audio = extern fn Ptr of Int -> () in
  init_audio ()
;
let compile_blob_template = extern fn (() -> Synth) -> Ptr;

let play_tpl = fn f ->
  f |> compile_blob_template |> instantiate_template [] |> play_node;;


let sin = sin_node;


let get_sq_table = extern fn () -> Ptr of Double;
let get_sq_tabsize = extern fn () -> Int;
let get_sin_table = extern fn () -> Ptr of Double;
let get_sin_tabsize = extern fn () -> Int;
let get_saw_table = extern fn () -> Ptr of Double;
let get_saw_tabsize = extern fn () -> Int;





