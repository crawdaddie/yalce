include ../.env
# engine/Makefile

BUILD_DIR := ./build

# Detect operating system
UNAME_S := $(shell uname -s)

# Base source files (excluding MIDI implementation)
SRCS := $(filter-out midi_linux.c midi_darwin.c, $(wildcard *.c))
SRCS += faust/temper.c
SRCS += faust/vital_rev.c
SRCS += faust/zita_rev.c
SRCS += faust/imp_train.c

# Add platform-specific MIDI implementation
ifeq ($(UNAME_S),Linux)
    SRCS += midi_linux.c
    LDFLAGS := -lsoundio -lm -lsndfile -lfftw3 -ldl -lxml2 -lstdc++ -lasound
    FRAMEWORKS :=
else ifeq ($(UNAME_S),Darwin)
    SRCS += midi_darwin.c
    LDFLAGS := -lsoundio -lm -lsndfile -lfftw3 -ldl -lxml2 -lstdc++
    FRAMEWORKS = -framework opengl \
                 -framework CoreMIDI \
                 -framework cocoa \
                 -framework CoreAudio \
                 -framework AudioToolbox \
                 -framework CoreFoundation
else
    $(error Unsupported operating system: $(UNAME_S))
endif

OBJS := $(SRCS:%.c=$(BUILD_DIR)/%.o)
COMPILER_OPTIONS := -g

# VST Library path
# VST_LIB_PATH := ${VST_LIB_PATH}
# VST_BUILD_PATH := $(VST_LIB_PATH)/build
# SRCS += vst/vst_node.c

# LDFLAGS += -L$(VST_BUILD_PATH) -lylcvst 

COMPILER_OPTIONS += -I$(VST_LIB_PATH)/src -I../lang/

CC = clang

SHARED_LIB_TARGET := $(BUILD_DIR)/libyalce_synth.so

.PHONY: all clean ylc_bindings vst_lib

all: $(SHARED_LIB_TARGET)

$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)
	mkdir -p $(BUILD_DIR)/faust

# Build the VST library
vst_lib:
	@echo "Building VST library..."
	$(MAKE) -C $(VST_LIB_PATH)

# Build engine object files
$(BUILD_DIR)/%.o: %.c | $(BUILD_DIR)
	$(CC) $(COMPILER_OPTIONS) -fPIC -c -o $@ $<

ylc_bindings:
	$(MAKE) -C ../tools
	@echo "# Auto-generated by engine/Makefile on $$(date '+%Y-%m-%d %H:%M:%S')" > bindings/Synth.ylc
	@echo "# Regenerate with: make -C engine ylc_bindings" >> bindings/Synth.ylc
	@echo "let _ = dlopen \"../build/libyalce_synth.so\";" >> bindings/Synth.ylc
	cat bindings/_engine_synth_header.ylc >> bindings/Synth.ylc
	../build/tools/ffi_gen osc.h \
		ext_lib.h \
		envelope.h \
		filter.h \
		node_util.h \
		lfo.h \
		bus.h \
		glue.h \
		faust/faust.h \
		>> bindings/Synth.ylc
	cat bindings/_engine_synth_extra.ylc >> bindings/Synth.ylc
	../build/tools/ffi_gen scheduling.h > bindings/Sched.ylc
	../build/tools/ffi_gen midi.h > bindings/MIDI.ylc
	cat bindings/_engine_midi_extra.ylc >> bindings/MIDI.ylc

# Build the shared library
$(SHARED_LIB_TARGET): $(filter-out $(BUILD_DIR)/main.o, $(OBJS))
	$(CC) -shared -fPIC -o $@ $^ $(LDFLAGS) $(FRAMEWORKS)
ifeq ($(UNAME_S),Darwin)
	install_name_tool -id @rpath/libyalce_synth.so $@
endif
	$(MAKE) -C ../tools;
	$(MAKE) -C . ylc_bindings

audio_test: $(OBJS)
	$(CC) $(LDFLAGS) $(FRAMEWORKS) $(OBJS) -o $(BUILD_DIR)/engine_test
	$(BUILD_DIR)/engine_test

clean:
	rm -rf $(BUILD_DIR)
	# @echo "Cleaning VST library..."
	# $(MAKE) -C $(VST_LIB_PATH) clean
