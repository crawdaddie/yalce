#! env ylc
%include examples/Gui
%include engine/bindings/Synth
%include examples/String
%include engine/bindings/MIDI
%include examples/Math
%include examples/Array
%include engine/bindings/Sched


let sq_detune = fn () -> 
  let f = inlet 50. |> lag_node 0.01;
  let trig = inlet 0.0; 
  let chirp_decay = inlet 0.3;
  let ff = chirp_node 3000. 200. chirp_decay trig; 
  let res = inlet 1.;

  (sq_node f + sq_node (f * 1.01)
  + sq_node (f * 2.)
  ) * 0.4
  |> biquad_lp_node ff res 
  # |> biquad_lp_node ff res 
  |> comb_node 0.75 0.75 0.2
;;

let notes = [|
  110.0,
  123.47082531403103,
  130.8127826502993,
  146.8323839587038,
  164.81377845643496,
  174.61411571650194,
  195.99771799087463, |];

let octaves = [|
  0.5,
  1.,
  2.,
  4.,
  8.,
|];

let times = [|
  0.125,
  0.125,
  0.125,
  0.125,
  0.25,
  0.5,
  0.125,
|];


let x = sq_detune |> chain_wrap |> play;

let kick_buf = read_buf (cstr "kick.wav");
let snare_buf = read_buf (cstr "snare.wav");
let hh_buf = read_buf (cstr "hh.wav");
let drum_machine = fn () ->
  let kt = inlet 0.0;
  let st = inlet 0.0;
  let ht = inlet 0.0;
  let k = bufplayer_1shot_node kick_buf 1. 0.0 kt;
  let s = bufplayer_1shot_node snare_buf 1. 0.0 st;
  let h = bufplayer_1shot_node hh_buf 1. 0.0 ht;
  k + s + h
;;

let drums = drum_machine |> chain_wrap |> play;


let freq_seq = fn ph: (Double) ->
  match (ph % 4.) with
    # | ph if ph > 6.5 -> notes @ 4
    # | ph if ph > 4.5 -> choose notes
    | ph if ph > 2.  -> choose [| notes @ 5, notes @ 4 |]
    | ph if ph > 2.  -> notes @ 4
    | ph if ph > 1.5 -> notes @ 2 
    | ph if ph > 0.  -> notes @ 0 
;;


let set_synth_param = fn syn p offset v ->
  match p with
  | Scalar i -> set_input_scalar_offset syn i offset v
  | Trig i -> set_input_trig_offset syn i offset
;;

let stream_vals = fn (dur, phase, note, _ff): (Double * Double * Double * Double) ->
  let ff = phase |> cos |> bipolar_scale 100. 2000.;
  let n = 0.5 * (freq_seq (phase * 0.8 )) * choose octaves;
  (choose times, phase, n, ff)
;;

let runner = fn
  args: (Ptr of (Double * Double * Double * Double))
  frame_offset: (Int)
  ->
  let (duration, phase, note, filter_freq) = *args;

  note |> set_synth_param x (Scalar 0) frame_offset;
  set_input_trig_offset x 1 frame_offset;
  # trig_kick phase frame_offset;


  # filter_freq |> set_synth_param x (Scalar 1) frame_offset;

  stream_vals (duration, phase + duration, note, filter_freq)
  |> schedule_event runner duration
;;

let filter_decay_setter = fn val: (Int) ->
  let v = unipolar_scale 0.01 0.8 (val * REC_127);
  set_input_scalar x 2 v
;;

let filter_res_setter = fn val: (Int) ->
  let v = unipolar_scale 1. 20. (val * REC_127);
  set_input_scalar x 3 v
;;


#   |   |   |   |   |   |   |   #
let pattern = ```
x-----x---x-----x---------x--x--
----x-------x-------x---xx--x-xx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
```
|> transpose_string 3 32 32 3
;



let trig_func = fn line: (String) idx: (Int) offset: (Int) ->
  let k = array_at line idx in 
  match k with
  | 'x' -> (
    set_input_trig_offset drums idx offset;
    ()
  )
  | '-' -> ()
;; 


let drum_runner = fn
  args: (Ptr of (Double * Double * Int))
  frame_offset: (Int)
  ->
  let (duration, phase, tick) = *args;

  # slice as if pattern has 4 columns because it does (newlines are included)
  let line = array_slice (tick * 4) ((tick * 4) + 3) pattern;

  trig_func line 0 frame_offset;
  trig_func line 1 frame_offset;
  trig_func line 2 frame_offset;

  (duration, phase + duration, (tick + 1) % 32)
  |> schedule_event drum_runner duration
;;

schedule_event_quant drum_runner 1.0 (0.125, 0., 0);
schedule_event_quant runner 1.0 (0.125, 0., choose notes, 200.);

# create_scope ()
let mut_array = [|1.,2.,3.,4.|];
let labels = [|
  "filter freq",
  "res",
  "something",
  "something2"
|];

create_slider_window (array_size mut_array) (array_data_ptr mut_array) (array_data_ptr labels) ()


