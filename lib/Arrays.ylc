let (@) = array_at;

# let array_choose = fn arr ->
#   let idx = rand_int (array_size arr);
#   arr @ idx 
# ;;

type Tensor = (data: Array of t, rank: Array of Int, Array of Int);

type StridedArray = (size: Int, stride: Int, data: Ptr of t);

let tensor_ndims = fn (_, sizes, _): (Tensor) ->
  array_size sizes
;;

let fold = fn f: (U -> T -> U) res: (U) a: (Array of T) ->
  let len = array_size a in
  match len with
  | 0 -> res
  | _ -> fold f (f res (a @ 0)) (array_succ a) 
;;

# let foldi = fn f: (Int -> U -> T -> U) res: (U) a: (Array of T) ->
#   fold (fn (i, res) v -> ((i + 1), f i res v)) (0, res) a
# ;;

# let (@) = array_at;
# let iter = fn f a ->
#   fold (fn i v -> 
#     f v;
#     i + 1
#   ) 0 a
# ;;

# let map = fn f res a ->


  
