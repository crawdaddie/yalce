# let array_choose = fn arr ->
#   let idx = rand_int (array_size arr); arr @ idx 
# ;;

let print_arr = fn a: (Array of T) ->
  print "[|"; 
  for i = 0 to array_size a in (
    print `{a[i]}, `
  );
  print "|]\n" 
;;

let fold = fn f: (R -> T -> R) res: (R) a: (Array of T) ->
  match array_size a with
  | 0 -> res
  | _ -> (
    fold f (f res (a[0])) (array_succ a)
  )
;;

let __foldi = fn f: (Int -> R -> T -> R) idx: (Int) res: (R) a: (Array of T) ->
  match array_size a with
  | 0 -> res
  | _ -> (
    __foldi f (idx + 1) (f idx res (a[0])) (array_succ a)
  )
  ;;

let foldi = fn f: (Int -> R -> T -> R) res: (R) a: (Array of T) ->
  __foldi f 0 res a
;;


let map = fn f: (T -> R) a: (Array of T) ->
  let res = array_fill_const (array_size a) (f (a[0]));
  for i = 1 to (array_size a) in (
    let v = f (a [i]);
    res[i] :=  v
  );
  res
;;



let last = fn x: (Array of T) ->
  let len = array_size x in
  x [len - 1]
;;
  

let test = module
  let test_sum_doubles = fn () ->
    let sum = fold (+) 0. [|1., 2., 3.|];
    sum == 6.
  ;;

  let test_sum_ints = fn () ->
    let sum = fold (+) 0 [|1, 2, 3|];
    sum == 6
  ;;

  let test_map = fn () ->
    let s = map ((+) 3) [|1,2,3|];
    s[0] == 4 && s[1] == 5 && s[2] == 6
  ;;
  let test_last = last [|1, 2, 3 |] == 3

;
