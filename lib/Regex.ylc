type Regex = (re_magic: Int, re_nsub: Uint64, re_endp: Ptr, re_g: Ptr);
type RegexMatch = (rm_so: Uint64, rm_eo: Uint64);

# let regcomp = extern fn (Ptr : NoCapture) -> (Ptr : NoCapture : ReadOnly) -> Int -> (Int : NoFree : WillReturn : NoUnwind);  
# let regexec = extern fn (Ptr : NoCapture : ReadOnly) -> (Ptr : NoCapture : ReadOnly )-> Uint64 -> (Ptr : NoCapture ) -> Int -> (Int : NoFree : WillReturn : NoUnwind);

let regcomp = extern fn Ptr -> Ptr -> Int -> Int;  
let regexec = extern fn Ptr -> Ptr -> Uint64 -> Ptr -> Int -> Int;

let find_one = fn str reg ->
  let r = [| Regex (0, 0, cstr "", cstr "") |];
  let comp = regcomp (cstr r) (cstr reg) 0;
  let rmr = [| RegexMatch (0, 0) |];
  let ex = regexec (cstr r) (cstr str) 1 (cstr rmr) 0;
  let rm = rmr[0];

  match ex with
  | 0 -> Some (rm.rm_so, rm.rm_eo)
  | _ -> None
;;

let escape_test = fn str reg ->
  let r = [| Regex (0, 0, cstr "", cstr "") |];
  # let comp = regcomp (cstr r) (cstr reg) 0;
  # let rmr = [| RegexMatch (0, 0) |];
  # let ex = regexec (cstr r) (cstr str) 1 (cstr rmr) 0;
  # let rm = rmr[0];
  #
  # match ex with
  # | 0 -> Some (rm.rm_so, rm.rm_eo)
  # | _ -> None
  r

;;
