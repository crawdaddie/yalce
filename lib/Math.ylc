# uniformly distributed integer between 0 and range-1

let PI = 3.14159265358979323846264338327950288;
let rand_int = extern fn Int -> Int ;

# uniformly distributed double between 0 and 1.0
let rand_double = extern fn () -> Double ;

# uniformly distributed double between min and max
let rand_double_range = extern fn Double -> Double -> Double ;

let amp_db = extern fn Double -> Double;
let db_amp = extern fn Double -> Double;
# let rec = extern fn Double -> Double;
let sin = extern fn Double -> Double;
let cos = extern fn Double -> Double;

let bipolar_scale = extern fn Double -> Double -> Double -> Double;
let unipolar_scale = extern fn Double -> Double -> Double -> Double;

let double_array_init = extern fn Int -> Double -> Ptr;
let double_array = extern fn Int -> Double -> Array of Double;
let pow = extern fn Double -> Double -> Double;
let tanh = extern fn Double -> Double;

let max_int = fn a: (Int) b: (Int) ->
  match a with 
  | a if a > b -> a 
  | _ -> b
;;

let min_int = fn a: (Int) b: (Int) ->
  match a with 
  | a if a < b -> a 
  | _ -> b
;;

let max = fn a b ->
  match a > b with 
  | true -> a 
  | _ -> b
;;

let min = fn a b ->
  match a < b with 
  | true -> a 
  | _ -> b
;;
let abs = fn a ->
  match a > 0 with
  | true -> a
  | _ -> a * -1
;;

let chance = fn thresh f -> 
  let x = rand_double () in
  match (x <= thresh) with
  | true -> (f (); ())
  | _ -> ()
;;

let chance2 = fn thresh f g -> 
  let x = rand_double () in
  match (x <= thresh) with
  | true -> (f (); ())
  | _ -> (g (); ())
;;


let shuffle = fn n -> 
  `
  Fisher-Yates shuffle
  return an array of numbers 0 to n-1 shuffled in random order
  https://dl.acm.org/doi/pdf/10.1145/364520.364540#.pdf
  `;
  let arr = array_fill n (fn i: (Int) -> i);

  for _i = 0 to n in (
    let i = n - 1 - _i; # reverse
    let j = rand_int (i + 1);
    let iv = arr[i];
    arr[i] := arr[j];
    arr[j] := iv
  );
  arr
;;

let nonzero_randu_double = extern fn () -> Double;
let log = extern fn Double -> Double;
let exp = extern fn Double -> Double;


let _randn_pair = extern fn Double -> Double -> (Double, Double);

let randn = fn mu: (Double) sig: (Double) ->
  let u1, _ = _randn_pair mu sig;
  u1
;;

