open engine/bindings/Synth;
open engine/bindings/Sched; 
import lib/Math;
set_main_vol 0.0625;
let S = module
  let blob = (fn () -> 
    let freq = inlet 55. in
    let gate = inlet 1. in

    let pm_amt = (chirp_node 1. 0.001 0.5 gate) * lfnoise_node 1. 1. 10. in
    (pm_node freq pm_amt 2.)
    |> (+) (pm_node freq pm_amt 2.01)
    |> (*) (asr_kill_node 0.001 1. 0.7 gate)


  ) |> compile_blob_template;

  let play_dur = fn freq dur ->
    let fo = get_tl_tick ();
    blob |> instantiate_template [(0, freq)] |> play_node_dur fo dur 1
    ;
    dur
  ;;
;

let vals = (
  dur:  iter [|0.25, 0.5, 0.25, 0.5, 0.125, 0.125,|] ,
  note: iter [|39,    32, 41,   42,  35,    37,   41, 42, |] |> cor_loop,
);

let array_choose = fn arr: (Array of Double) ->
  let idx = Math.rand_int (array_size arr) in
  arr[idx] 
;;

# let seq = fn (durs, notes) ->
let seq = fn (durs, notes) : (dur: Coroutine of Double, note: Coroutine of Int) ->

  let d = use_or_finish @@ durs ();
  let n = use_or_finish @@ notes ();
  
  S.play_dur ((midi_to_freq n) * (array_choose [| 1., 2. |] )) 0.01;
  yield d;
  yield (seq (durs, notes))
;;

defer_quant 1. (fn t ->
  seq vals |> cor_loop |> cor_map (fn d -> d * 0.8) |> play_routine t schedule_event
)
#
#
#
#
#
#
