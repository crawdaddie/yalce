open engine/bindings/Synth;
open engine/bindings/Sched; 
set_main_vol 0.0625;
let S = module
  let blob = (fn () -> 
    let freq = inlet 55. in
    let gate = inlet 1. in

    let pm_amt = 3. * (chirp_node 1. 0.001 0.5 gate) + lfnoise_node 0.2 0. 2. in
    (pm_node freq pm_amt 2.)
    |> (+) (pm_node freq pm_amt 2.01)
    |> (*) (asr_kill_node 0.001 1. 1. gate)


  ) |> compile_blob_template;

  let play_dur = fn freq dur ->
    let fo = get_tl_tick ();
    blob |> instantiate_template [(0, freq)] |> play_node_dur fo dur 1
    ;
    dur
  ;;
;

let vals = (
  dur:  [|0.25, 0.5, 0.25, 0.5, 0.125, 0.125, 0.25, 0.125, 0.125, 0.125, 0.125, 1., 0.125, 0.125, 0.125, 0.125|],
  note: [|39,    51, 58,   59,  54,    37,    51,   58,    56,    58,    54,    53, 27|],
);

let seq = fn scale: (Double) idx (durs, notes): (Array of Double, Array of Int) -> 
  let d = durs  [idx % array_size durs];
  let n = notes [idx % array_size notes];
  
  S.play_dur ( scale * midi_to_freq n) 0.01;
  yield d;
  yield (seq scale (idx + 1) (durs, notes))
;;

defer_quant 1. (fn t ->
  seq 1. 0 vals |> play_routine t schedule_event;
  seq 1.5 3 vals |> play_routine t schedule_event
)






