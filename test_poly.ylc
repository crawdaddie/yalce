open engine/bindings/Synth;
open engine/bindings/Sched; 
let S = module
  let blob = (fn () -> 
    let freq = inlet 55. in
    let gate = inlet 1. in

    # let pm_amt = 3. * (chirp_node 1. 0.001 0.1 gate) in
    #
    # pm_node freq pm_amt 1.5
    # |> (+) (pm_node freq pm_amt (1.5 + 0.5 * sin_node 0.05))
    sin_node freq
    |> (*) (asr_kill_node 0.001 1. 1. gate)

  ) |> compile_blob_template;

  let play_dur = fn freq dur ->
    let fo = get_tl_tick ();
    blob |> instantiate_template [(0, freq)] |> play_node_dur fo dur 1
  ;;
;

let vals = (
  dur:  [|0.25, 0.5, 0.25, 0.5, 0.125, 0.125, 0.25, 0.125, 0.125, 0.125, 0.125, 2.|],
  note: [|39, 51, 58, 59, 54, 37, 51, 58, 56|],
);

let seq = fn idx (durs, notes): (Array of Double, Array of Int) -> 
  let d = durs  [idx % array_size durs];
  let n = notes [idx % array_size notes];
  
  S.play_dur (2. * midi_to_freq n) 0.01;
  yield d;
  yield seq (idx + 1) (durs, notes)
;;

seq 0 vals |> play_routine 0 schedule_event



