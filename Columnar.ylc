let (@) = array_at;
open engine/bindings/Synth;
open engine/bindings/Sched;
import engine/bindings/MIDI;
import lib/Math;
open lib/Ref;


let filtenv = [|
  0.000000, 0.000000, 2.400000,
  1., 0.185902, -2.300000,
  0.011111, 2.814099, 1.300000,
  0.000000
|]
|> array_to_buf;

let ampenv =
[|
  0.000000, 0.000000, 2.400000,
  1.000000, 0.2, -2.300000,
  0.971429, 0.1, -1.200000,
  0.000000
|]
|> array_to_buf;

let synth = (fn () -> 
  let gate = inlet 0.; # 0
  let chirp_decay = inlet 2.; # 1

  let ff = buf_env_node chirp_decay (buf_ref filtenv) gate 
    |> math_node (Math.unipolar_scale 200. 3000.);

  let res = inlet 8.; # 2 

  let f = inlet 50. |> lag_node (inlet 0.0); # 4 3

  (sq_node f + (sq_node @@ f * 1.01) + (sq_node @@ f * 2.))
  |> (*) 0.2
  |> biquad_lp_node ff res 
  |> (*) (gated_buf_env_node (buf_ref ampenv) gate)
  |> reverb_node 0.8 0.8 0.8 1.
)
|> play_tpl
;

let dur_macro = Math.unipolar_scale 0.01 1.;
let slide_macro = Math.unipolar_scale 0.01 0.2;
let res_macro = Math.unipolar_scale 2. 10.;
let chirp_macro = Math.unipolar_scale 0.1 2.;
type SeqType = (note: Array of Int, dur: Array of Double, res: Array of Double, slide: Array of Double, chirp: Array of Double);  
let cols_to_row = fn idx cols: (SeqType) ->
  (
    cols.note @ idx, 
    cols.dur @ idx, 
    cols.res @ idx, 
    cols.slide @ idx, 
    cols.chirp @ idx, 
  )
;;




let trig = fn dur (note, dur_scale, res, slide, chirp) ->
  let fo = get_tl_tick () in (
    trigger_gate fo (dur * (dur_macro dur_scale)) 0 synth;
    set_input_scalar_offset synth 4 fo (midi_to_freq (32 + note));
    set_input_scalar_offset synth 3 fo (slide_macro slide);
    set_input_scalar_offset synth 2 fo (res_macro res);
    set_input_scalar_offset synth 1 fo (chirp_macro chirp)
  );

  ()
;; 

let trig_from_seq = fn d i seq: (SeqType) ->
  match (array_at seq.note i) with
  | -1 -> ()
  | n -> (
    trig d (cols_to_row i seq);
    ()
  )
;;

