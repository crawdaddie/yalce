import Tempo;
Tempo.set 148.;

open engine/bindings/Synth;
set_main_vol 0.0625;

open engine/bindings/Sched; 
import WeirdSynths;

import lib/Math;

let iter_choose = fn v -> 
  yield Math.array_choose v;
  yield iter_choose v
;;

let Kick = module
  let buf = load_soundfile "/Users/adam/Desktop/Year 2058 Drums/Kicks/Kick2058-01-F#.wav";
  let synth = (fn () ->
    let trig = inlet 0.; # 0
    bufplayer_trig_node (buf_ref buf) (44100./ 48000.) (inlet 0.) trig # 3 
    |> (*) (aslr_node 0.0 4. 0.05 0.1 trig)
    |> tanh_node 1.2
  )
  |> play_tpl
  ;

  let trig = fn () -> 
    let fo = get_tl_tick ();
    set_input_trig_offset synth 0 fo
  ;;

  let pattern_ref = [|empty_coroutine ()|] ;
  let set_pattern = fn t cor ->
    cor_stop ( pattern_ref[0]);
    cor
    |> play_routine t schedule_event
    |> array_set pattern_ref 0
  ;;
;

let Constructor : Kick = module
  let of_coroutines_ts = fn (a, t): (Coroutine of Double, Uint64) ->
    a |> cor_map (fn d -> Kick.trig (); d * (Tempo.q ())) |> Kick.set_pattern t 
  ;;
;


let Amen = module 

  let amen_buf = load_soundfile "fat_amen_mono_48000.wav";
  let synth = (fn () ->
    let trig = inlet 0.; # 0 trig
    let gate = inlet 0.;
    let st = inlet 0.;
    bufplayer_trig_node (buf_ref amen_buf) (148. / 170.) st trig
    |> (*) (5. * (gate))
  )
  |> play_tpl
  ;

  let trig = fn st -> 
    let fo = get_tl_tick ();
    # trigger_gate fo d 1 synth; 
    set_input_scalar_offset synth 2 fo st; 
    set_input_scalar_offset synth 1 fo 1.; 
    set_input_trig_offset synth 0 fo
    # set_input_scalar_offset synth 1 fo (Math.rand_double_range 0. 20.)
  ;;


  let pattern_ref = [|empty_coroutine ()|] ;
  let set_pattern = fn t cor ->
    cor_stop (pattern_ref[0]);
    cor
    |> play_routine t schedule_event
    |> array_set pattern_ref 0;
    ()

  ;;
;

let Constructor : Amen = module
  let of_coroutines_amen = fn (a, t): ((Coroutine of (Double, Double)), Uint64) ->
    a |> cor_map (fn (d, st) -> Amen.trig st; d * (Tempo.q ())) |> Amen.set_pattern t;
    ()
  ;;
;

let vals = (
  dur: iter [|
    # 1.5, 0.5, 0.25, 0.25, 1.5, 1.5, 1.5, 0.5, 0.5
    1.5, 0.5, 0.25, 0.25, 1.5, 1.5, 1.5, 0.5, 0.5,
    1.5, 0.5, 0.25, 0.25, 1.5, 1.5, 1.25, 0.25, 0.75, 0.25,
  |]
  |> cor_loop,
  note: iter [|
  # 30, 66, 30, 30, 30, 69, 68, 30, 30, 38, 37, 30, 30, 50, 49 
    30,   30,   30,   30, 30, 42, 30, 30, 26, 
    26,   26,   26,   38, 26, 69, 68, 32, 25, 25 
  |] |> cor_loop,
);

defer_quant (Tempo.q ()) (fn t -> 
  (vals, t) |> WeirdSynths.Pm;
  (iter [| 
    (1.,    0.0    ),
    (0.5,   0.125  ),
    (0.5,   0.25   ),
    (0.25,  0.25   ),
    (0.25,  0.25   ),
    (1.5,   0.25   ),
    (1.5,   0.375  ),
    (1.5,   0.5    ),
    (0.5,   0.625  ),
    (0.5,   0.75   ),
 |] |> cor_loop, t) |> Amen

  # (iter [|
  #   1.5,
  #   1.5,
  #   1.5,
  #   1.5,
  #   0.75,
  #   0.25,
  #   0.25,
  #   0.25,
  #   0.5,
  # |] |> cor_loop, t) |> Kick;  
)
#
#

# vals |> WeirdSynths.Pm
