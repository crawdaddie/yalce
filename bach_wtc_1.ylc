open engine/bindings/Synth;
open engine/bindings/Sched; 
import lib/Math;

let Acid = module

  let synth = (fn () -> 
    let freq = inlet 55. in
    let trig = inlet 0. in

    let pm_amt = sin_node (0.0625 / 0.3)
      |> (*) (chirp_node 1. 0.001 0.1 trig)
      |> (*) 1.5
    in

    pm_node freq pm_amt 1.5
    |> (+) (pm_node freq pm_amt (1.5 + 0.5 * sin_node 0.05))
    |> (*) (aslr_node 0.001 1. 0.01 0.1 trig)
    |> vital_rev_node
        0.5
        0.5
        0.5
        0.62184876
        0.0
        0.5
        0.8333333
        0.6
        0.789916
        0.0
        0.0
        0.8

  ) |> play_tpl;


  let trign = fn n -> 
    let fo = get_tl_tick ();
    set_input_trig_offset synth 1 fo;
    set_input_scalar_offset synth 0 fo (midi_to_freq n)
  ;;

  let pattern_ref = [| cstr "" |] ;

  let set_pattern = fn t cor ->
    cor_stop ( pattern_ref[0] );
    cor
    |> play_routine t schedule_event
    |> array_set pattern_ref 0
  ;;
;

let q = 60. / 100.;

import BachWTC;

defer_quant q (fn t -> 
  BachWTC.notes ()
  |> cor_loop
  |> cor_map (fn n ->
    Acid.trign n;
    q / 4. 
  )
  |> Acid.set_pattern t
);

