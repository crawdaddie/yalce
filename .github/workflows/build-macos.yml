name: Build macOS Packages

on:
  push:
    branches: [ main, build-macos ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-macos:
    name: Build macOS Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            arch: "x86_64"
            label: "Intel"
          - os: macos-14
            arch: "arm64"
            label: "Apple Silicon"
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up environment
        run: |
          brew update
          # Install main dependencies
          brew install sdl2 sdl2_ttf sdl2_gfx readline llvm@16 libsoundio libsndfile fftw
          # Install dependencies of libsndfile
          brew install libogg libvorbis flac opus mpg123 lame
          echo "LLVM_DIR=$(brew --prefix llvm@16)" >> $GITHUB_ENV
      
      - name: Build for ${{ matrix.label }}
        run: |
          # Run your normal build process
          make
      
      - name: Create distribution directory
        run: |
          # Create directories with explicit permissions
          mkdir -p dist/bin
          mkdir -p dist/lib/engine
          mkdir -p dist/lib/gui
          
          # Ensure the directories are writable
          chmod -R 755 dist
          
          # Copy executable
          cp build/ylc dist/bin/
          
          # Copy custom libraries
          cp build/engine/libyalce_synth.so dist/lib/engine/
          cp build/gui/libgui.so dist/lib/gui/
          
          # Copy primary Homebrew libraries with sudo if needed
          sudo cp $(brew --prefix readline)/lib/libreadline.*.dylib dist/lib/
          sudo cp $(brew --prefix sdl2)/lib/libSDL2*.dylib dist/lib/
          sudo cp $(brew --prefix sdl2_ttf)/lib/libSDL2_ttf*.dylib dist/lib/
          sudo cp $(brew --prefix sdl2_gfx)/lib/libSDL2_gfx*.dylib dist/lib/
          sudo cp $(brew --prefix llvm@16)/lib/libLLVM.dylib dist/lib/
          sudo cp $(brew --prefix libsoundio)/lib/libsoundio*.dylib dist/lib/
          sudo cp $(brew --prefix libsndfile)/lib/libsndfile*.dylib dist/lib/
          
          # Copy secondary dependencies for libsndfile with sudo
          sudo cp $(brew --prefix libogg)/lib/libogg*.dylib dist/lib/
          sudo cp $(brew --prefix libvorbis)/lib/libvorbis*.dylib dist/lib/
          sudo cp $(brew --prefix libvorbis)/lib/libvorbisenc*.dylib dist/lib/
          sudo cp $(brew --prefix flac)/lib/libFLAC*.dylib dist/lib/
          sudo cp $(brew --prefix opus)/lib/libopus*.dylib dist/lib/
          sudo cp $(brew --prefix mpg123)/lib/libmpg123*.dylib dist/lib/
          sudo cp $(brew --prefix lame)/lib/libmp3lame*.dylib dist/lib/
          sudo cp $(brew --prefix fftw)/lib/libfftw3*.dylib dist/lib/
          
          # Fix ownership of files
          sudo chown -R $(whoami) dist/
          
          # List all copied libraries for debugging
          echo "Libraries in dist/lib:"
          ls -la dist/lib/
      
      - name: Update library paths
        run: |
          # Helper function to update a library path
          update_lib_path() {
            local binary=$1
            local lib_pattern=$2
            local path_prefix=$3
            
            local lib_path=$(otool -L "$binary" | grep "$lib_pattern" | awk '{print $1}')
            if [ -n "$lib_path" ]; then
              install_name_tool -change "$lib_path" "$path_prefix/$(basename "$lib_path")" "$binary"
              echo "Updated $lib_pattern in $binary"
            fi
          }
          
          # Update primary dependencies in executable
          update_lib_path "dist/bin/ylc" "@rpath/libyalce_synth.so" "@executable_path/../lib/engine"
          update_lib_path "dist/bin/ylc" "@rpath/libgui.so" "@executable_path/../lib/gui"
          update_lib_path "dist/bin/ylc" "libreadline" "@executable_path/../lib"
          update_lib_path "dist/bin/ylc" "libSDL2-2" "@executable_path/../lib"
          update_lib_path "dist/bin/ylc" "libSDL2_ttf" "@executable_path/../lib"
          update_lib_path "dist/bin/ylc" "libSDL2_gfx" "@executable_path/../lib"
          update_lib_path "dist/bin/ylc" "libLLVM" "@executable_path/../lib"
          update_lib_path "dist/bin/ylc" "libsoundio" "@executable_path/../lib"
          update_lib_path "dist/bin/ylc" "libsndfile" "@executable_path/../lib"
          
          # Update dependencies in libgui.so
          update_lib_path "dist/lib/gui/libgui.so" "libSDL2-2" "@loader_path/.."
          update_lib_path "dist/lib/gui/libgui.so" "libSDL2_ttf" "@loader_path/.."
          update_lib_path "dist/lib/gui/libgui.so" "libSDL2_gfx" "@loader_path/.."
          
          # Update dependencies in libyalce_synth.so
          DEPS=$(otool -L dist/lib/engine/libyalce_synth.so | grep "/opt/homebrew" | awk '{print $1}')
          for DEP in $DEPS; do
            install_name_tool -change "$DEP" "@loader_path/../$(basename "$DEP")" dist/lib/engine/libyalce_synth.so
            echo "Updated $(basename "$DEP") in libyalce_synth.so"
          done
          
          # Fix all secondary dependencies in all libraries
          for LIB in dist/lib/*.dylib; do
            if [ -f "$LIB" ]; then
              SEC_DEPS=$(otool -L "$LIB" | grep "/opt/homebrew" | awk '{print $1}')
              for SEC_DEP in $SEC_DEPS; do
                install_name_tool -change "$SEC_DEP" "@loader_path/$(basename "$SEC_DEP")" "$LIB"
                echo "Updated $(basename "$SEC_DEP") in $(basename "$LIB")"
              done
            fi
          done
          
          # Verify all libraries have proper paths
          echo "Verifying executable dependencies..."
          otool -L dist/bin/ylc
          
          echo "Verifying libgui.so dependencies..."
          otool -L dist/lib/gui/libgui.so
          
          echo "Verifying libyalce_synth.so dependencies..."
          otool -L dist/lib/engine/libyalce_synth.so
      
      - name: Create wrapper script
        run: |
          cat > dist/ylc << 'EOF'
          #!/bin/bash
          DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
          "$DIR/bin/ylc" "$@"
          EOF
          chmod +x dist/ylc
          
          # Create README
          cat > dist/README.md << EOF
          # YLC CLI Tool (${{ matrix.label }} version)
          
          ## Installation
          1. Extract this archive to a location of your choice
          2. Run the \`ylc\` script in the root directory
          
          ## Requirements
          - macOS 11.0 or later on ${{ matrix.label }}
          EOF
      
      - name: Create archive
        run: |
          cd dist
          tar -czf ../ylc-${{ matrix.arch }}.tar.gz .
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ylc-${{ matrix.arch }}
          path: ylc-${{ matrix.arch }}.tar.gz
  
  create-release:
    name: Create GitHub Release
    needs: build-macos
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Download Intel build
        uses: actions/download-artifact@v3
        with:
          name: ylc-x86_64
          path: .
      
      - name: Download Apple Silicon build
        uses: actions/download-artifact@v3
        with:
          name: ylc-arm64
          path: .
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ylc-x86_64.tar.gz
            ylc-arm64.tar.gz
