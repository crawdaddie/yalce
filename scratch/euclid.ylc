let (@) = array_at;
let max = fn a b ->
  match b - a with
  | x if x > 0 -> b
  | _ -> a
;;

let euclid_arr = fn steps pulses ->

  let pattern = array_fill_const steps 0;

  let quot = steps / pulses;
  let rem = steps % pulses;
  let pos = [| 0 |];

  for _ = 0 to (pulses - 1) in (
    let p = pos @ 0;
    array_set p pattern 1; 
    array_set 0 pos ((p + quot) % steps)
  );

  array_set 0 pos 0;

  for _ = 0 to (max (rem - 1) 0) in (
    let p = pos @ 0;
    array_set p pattern 1;
    array_set 0 pos ((p + quot + 1) % steps)
  );
  pattern
;;

let rot_arr = fn rot: (Int) arr: (Array of Int) ->
  let arr_len = array_size arr;
  let temp = array_fill_const arr_len 0;
  for i = 0 to (arr_len) in (
    array_set i temp (arr @ ((i + rot) % arr_len))
  );
  temp
;;


let euclid = fn rot steps pulses ->
  let p = euclid_arr steps pulses |> rot_arr rot;
  let aux = fn i: (Int) res: (List of Int) arr: (Array of Int) ->
    match i with
    | 0 -> (
      let x = (arr @ 0) in
      x :: res
    )
    | _ -> (
      let x = (arr @ i) in
      aux (i - 1) (x :: res) arr
    )
  ;;
  let len = (array_size p) - 1 in
  aux (len - 1) [p @ len] arr  
;;

euclid 0 16 5


#
# let list_map = fn f l ->
#   let aux = fn f l res -> 
#     match l with
#     | [] -> res
#     | x :: rest -> aux f rest (f x :: res) 
#   ;;
#   aux f l []
# ;;
#
# list_map ((+) 1) [0,1,2,3]
