let (@) = array_at;

import ../lib/Math;
import ../lib/Arrays;

let (@) = array_at;

type Matrix = (
  rows: Int,
  cols: Int,
  data: Array of Double
);

type Layer = (
  weights: Matrix,
  biases: Array of Double,
  activation: ((Array of Double) -> (Array of Double))
);


let relu = fn x: (Array of Double) -> 
  let max = (array_size x) - 1 in
  for i = 0 to max in (
    let v = x @ i;
    let relu_v = match v with
      | v if v > 0. -> v
      | _ -> 0.
    ;
    array_set i x relu_v
  );
  x
;;

let identity = fn x: (Array of Double) -> x;;

let mse_loss = fn predictions: (Array of Double) targets: (Array of Double) ->
  let sum = [| 0. |];
  let max = (array_size predictions) - 1;

  for i = 0 to max in (
    let pv = predictions @ i;
    let tv = targets @ i;
    let loss = Math.pow (pv - tv) 2.;
    let s = sum @ 0;
    array_set 0 sum (s + loss)
  );

  (sum @ 0) / (max + 1.)
;;


let matrix_random = fn c r ->
  Matrix r c (array_fill (r * c) (fn i: (Int) -> Math.rand_double_range -1. 1.))
;;



let max_in = array_fill_const 16 0.; # allocate an input array which is as large as the maximum layer width
type Network = (
  layers: Array of Layer,
  loss: ((Array of Double) -> (Array of Double) -> Double)
);
let MLP = Network [|
  Layer (matrix_random 2 16) (array_fill_const 16 0.01) relu,
  Layer (matrix_random 16 16) (array_fill_const 16 0.01) relu,
  Layer (matrix_random 16 1) (array_fill_const 1 1.01) identity,
  |] mse_loss
;

let print_arr = fn arr: (Array of Double) ->
  match (array_size arr) with
  | 0 -> ()
  | _ -> (print `arr: {arr @ 0}\n`; print_arr (array_succ arr); ())
;;

let LayerCache = module

  type LCache = (
    pre_activations: (Array of Array of Double),
    activations: (Array of Array of Double)
  );

  let from_network = fn network: (Network) ->
    let num_layers = array_size network.layers;
    let pre_act_sizes = array_fill_const num_layers 0;
    let act_sizes = array_fill_const (num_layers + 1) 0;

    let layer = network.layers @ 0;
    let weights = layer.weights;
    let cols = weights.cols;
    array_set 0 act_sizes cols;
    let first_act_size = cols;


    let pre_acts = array_fill_const num_layers [| 0. |];
    let acts = array_fill_const (num_layers + 1) [| 0. |];

    array_set 0 acts (array_fill_const cols 0.);

    let ir = [| 0 |];
    for layer = iter network.layers in (
      let i = ir @ 0;
      let pre_size = array_size (layer.biases);
      let act_size = array_size (layer.biases);
      array_set (i + 1) acts (array_fill_const act_size 0.); 
      array_set i pre_acts (array_fill_const pre_size 0.); 

      array_set 0 ir (i + 1)
    );
    LCache pre_acts acts
  ;;
;

let lc = LayerCache.from_network MLP;

print_arr (lc.pre_activations @ 0);
print_arr (lc.pre_activations @ 1);
print_arr (lc.pre_activations @ 2);

print_arr (lc.activations @ 0);
print_arr (lc.activations @ 1);
print_arr (lc.activations @ 2);
print_arr (lc.activations @ 3);

