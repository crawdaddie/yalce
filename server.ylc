#! env ylc

let AF_INET = 2;
let SOCK_STREAM = 1;
let INADDR_ANY = 0; 

# type SockAddr = Char * Char * Int ???; 

	# __uint8_t       sa_len;         /* total length */
	# sa_family_t     sa_family;      /* [XSI] address family */
	# char            sa_data[14];    /* [XSI] addr value */

let socket = extern fn Int -> Int -> Int -> Int;
let create_server_addr = extern fn Int -> Int -> Int -> Ptr; 
let bind = extern fn Int -> Ptr -> Int -> Int;
let listen = extern fn Int -> Int -> Int;
let accept = extern fn Int -> Ptr -> Ptr -> Int;
let recv = extern fn Int -> Ptr -> Int -> Int -> Int;  # recv(fd, buffer, size, flags)
let send = extern fn Int -> Ptr -> Int -> Int -> Int;  # send(fd, buffer, size, flags) 
let close = extern fn Int -> Int;                      # close(fd)



let Queue = module
  let of_list = fn l ->
    let t = l in 
    let h = t in
    (h, t)
  ;;

  let append = fn n (h, t) ->
    let nt = [n] in
    let tt = list_concat t nt in
    (h, tt)
  ;;

  let prepend = fn n (h, t) ->
    (n::h, t)
  ;;

  let print_deq = fn (h, t) ->
    print_list h
  ;;

  let pop_left = fn (h, t) ->
    match h with
    | x::rest -> Some (x, (rest, t))  
    | [] -> None
  ;;
;

let accept_cb = fn server_fd ->
  print "before create server addr\n";
  let client_addr = create_server_addr 0 0 0;
  print "before accept\n";
  let client_sock = accept server_fd client_addr (cstr [|1|]);

  print "after accept\n";

  # close client_sock;
  yield 1;
  yield 2

  # if client_sock >= 0 then (
  #   # Immediately read and respond to client
  #   let buffer = array_fill_const 1024 (Char 0);
  #   let bytes_read = recv client_sock (cstr buffer) 1024 0;
  #
  #   if bytes_read > 0 then (
  #     print `received request:\n--------------------\n{buffer}\n----------------------\n`;
  #     let response = "HTTP/1.1 200 OK\r\nContent-Length: 13\r\n\r\nHello, World!";
  #     send client_sock (cstr response) (array_size response) 0
  #   );
  #   close client_sock
  # )
;;

let proc_tasks = fn server_fd: (Int) tq: (List of (() -> Int), List of (() -> Int)) ->
  match Queue.pop_left tq with
  | Some (cb, remaining_tasks) -> (
    print "before call cor\n";
    cb ();
    proc_tasks server_fd remaining_tasks
  )
  | None -> (proc_tasks server_fd (Queue.of_list [accept_cb server_fd]); ())
;;
#
let init_server = fn port ->
  let server_addr = create_server_addr AF_INET INADDR_ANY port;
  let server_fd = socket AF_INET SOCK_STREAM 0;
  bind server_fd server_addr 16;
  listen server_fd 5;
  let req = accept_cb server_fd;
  proc_tasks server_fd (Queue.of_list [req]);
  ()
;;
#
init_server 8000
#
#

# let server_addr = create_server_addr AF_INET INADDR_ANY 8000;
# let server_fd = socket AF_INET SOCK_STREAM 0;
# bind server_fd server_addr 16;
# listen server_fd 5;
# let x = accept_cb server_fd;
# x ()
# proc_tasks server_fd (Queue.of_list [accept_cb server_fd]);
