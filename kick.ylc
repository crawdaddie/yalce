%include examples/Math
%include examples/Array
%include engine/bindings/Synth
%include engine/bindings/Sched

let st = (fn () -> 
  let trig = inlet 0.0;
  let chirp_decay = inlet 0.05;
  let ff = chirp_node 1000. 55. chirp_decay trig; 

  let dt = 0.0301 + (0.1 * sin_node 0.5);


  
  let x = sin_node ff
    |> tanh_node 4.;

  (dyn_comb_node dt 0.5 0.999 x)
  ;)
  |> compile_blob_template;

let setter = fn (dur, synth) frame_offset -> 
  set_input_trig_offset synth 0 frame_offset;
  set_input_scalar_offset synth 1 frame_offset (rand_double_range 0.05 0.2);
  # set_input_scalar_offset synth 2 frame_offset (rand_double_range 0.05 0.1);
  # trigger_gate frame_offset 0.23 0 synth;
  ()
;;


let durs = fn () -> 
  let choices = [|
      [|0.5|],
      [|0.75, 0.75, 0.75, 0.5, 0.75, 0.5|],
      [|0.25, 0.25|],
      [|0.125, 0.125, 0.125, 0.125|],
      [|0.0625, 0.0625, 0.0625, 0.0625|]
      |];
  yield iter_of_array (array_choose choices);
  yield durs ()
  ;;

let syn = fn offset ->
  st
  |> instantiate_template [(0, 0.)]
  |> play_node_offset offset
;;


(
  durs (),
  syn @@ get_frame_offset (),
) |> run_in_scheduler schedule_event setter
  

