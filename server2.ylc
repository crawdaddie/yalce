#! env ylc

let AF_INET = 2;
let SOCK_STREAM = 1;
let INADDR_ANY = 0; 

# type SockAddr = Char * Char * Int ???; 

	# __uint8_t       sa_len;         /* total length */
	# sa_family_t     sa_family;      /* [XSI] address family */
	# char            sa_data[14];    /* [XSI] addr value */

let socket = extern fn Int -> Int -> Int -> Int;
let create_server_addr = extern fn Int -> Int -> Int -> Ptr; 
let bind = extern fn Int -> Ptr -> Int -> Int;
let listen = extern fn Int -> Int -> Int;
let accept = extern fn Int -> Ptr -> Ptr -> Int;
let recv = extern fn Int -> Ptr -> Int -> Int -> Int;  # recv(fd, buffer, size, flags)
let send = extern fn Int -> Ptr -> Int -> Int -> Int;  # send(fd, buffer, size, flags) 
let close = extern fn Int -> Int;                      # close(fd)

let Queue = module

  let of_list = fn l ->
    let t = l in 
    let h = t in
    (h, t)
  ;;

  let append = fn n (h, t) ->
    let nt = [n] in
    let tt = list_concat t nt in
    (h, tt)
  ;;

  let prepend = fn n (h, t) ->
    (n::h, t)
  ;;

  let pop_left = fn (h, t) ->
    match h with
    | x::rest -> Some (x, (rest, t))  
    | [] -> None
  ;;
;


let accept_reqs = fn server_fd ->
  let client_addr = create_server_addr 0 0 0;
  let client_sock = accept server_fd client_addr [1];
  yield 1
;;
# let Server = module
#
#   let server_addr = create_server_addr AF_INET INADDR_ANY 8000;
#
#   let create_socket = fn () -> 
#     let sock = socket AF_INET SOCK_STREAM 0;
#     bind sock server_addr 16;
#     listen sock 10;
#     sock
#   ;;
#
#   let create_server = fn sock ->
#     print `create server {sock}\n`;
#     sock
#   ;;
#
#   let accept_connection = fn sock: (Int) ->
#     let client_addr = create_server_addr 0 0 0;
#     let client_sock = accept sock client_addr [1];
#     (client_sock, client_addr)
#   ;;
#
#   let accept_reqs = fn server_fd ->
#     let client_sock, _addr = accept_connection server_fd;
#     yield 1
#   ;;
#
#   let proc_tasks = fn server_fd: (Int) tq: (List of Coroutine of Int, List of Coroutine of Int) ->
#     match Queue.pop_left tq with
#     | Some (req_cor, rest) -> (
#       let _ = req_cor ();
#       proc_tasks server_fd rest
#     )
#     | None -> (proc_tasks server_fd (Queue.of_list [ accept_reqs server_fd ]); ())
#   ;;  
# ;



let proc_tasks = fn server_fd: (Int) tq: (List of (Coroutine of Int), List of (Coroutine of Int)) ->
  match Queue.pop_left tq with
  | Some (cb, d) -> (
    let _ = cb ();
    proc_tasks server_fd d
  )
  | None -> (proc_tasks server_fd (Queue.of_list [accept_reqs server_fd]); ())
;;

let init_server = fn port ->
  let server_addr = create_server_addr AF_INET INADDR_ANY port;
  let server_fd = socket AF_INET SOCK_STREAM 0;
  bind server_fd server_addr 16;
  listen server_fd 5;
  proc_tasks server_fd (Queue.of_list [accept_reqs server_fd]);
  ()
;;

init_server 8000

