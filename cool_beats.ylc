#! ylc -i
# (
# import engine/bindings/Config;
# Config.set_input_conf [1,0]
# );

open engine/bindings/Synth; 
open engine/bindings/Sched; 
open engine/bindings/VST; 
import engine/bindings/MIDI;
open lib/Ref;
import lib/Math;


let q = 60. / 130.;
let Kick = module
  let buf = load_soundfile "./engine/assets/kick.wav";
  let synth = (fn () ->
    let trig = inlet 0.; # 0
    bufplayer_trig_node (buf_ref buf) ( 44100. / 48000. ) (inlet 0.) trig # 3 
    |> (*) (aslr_node 0. 1. 0.2 0.1 trig)
    |> math_node (fn x -> 0.5 * (x + Math.sin (10. * x)))
  )
  |> play_tpl
  ;

  let trig = fn () -> 
    let fo = get_tl_tick ();
    set_input_trig_offset synth 0 fo
  ;;

  let pattern_ref = [| empty_coroutine () |] ;
  let set_pattern = fn t cor ->
    cor_stop (pattern_ref[0]);
    cor
    |> play_routine t schedule_event
    |> array_set pattern_ref 0
  ;;
;

let Snare = module

  let buf = load_soundfile  "./engine/assets/snare.wav";
  let synth = (fn () ->
    let trig = inlet 0.; # 0
    bufplayer_trig_node (buf_ref buf) (44100. / 48000.) 0. trig # 3 
    |> (*) (aslr_node 0. 4. 0.2 0.1 trig)
  )
  |> play_tpl
  ;

  # let synth = (fn () ->
  #   let trig = inlet 0.;
  #   sin_node (inlet 800.) 
  #   |> (*) (aslr_node 0.01 1. 0.1 0.01 trig)
  # ) |> play_tpl
  # ;


  let trig = fn () -> 
    let fo = get_tl_tick ();
    set_input_trig_offset synth 0 fo
  ;;


  let pattern_ref = [|empty_coroutine ()|] ;
  let set_pattern = fn t cor ->
    let pref =pattern_ref;
    cor_stop (pref[0]);
    cor
    |> play_routine t schedule_event
    |> array_set pref 0
  ;;

  let _ = MIDI.register_cc_handler 2 1 (fn val ->
    set_input_scalar_offset synth 1 (get_current_sample ()) (Math.unipolar_scale 0. (8. / q) val)  
  );
;

let Hihat = module

  let closed_hh_buf = load_soundfile "./engine/assets/hihat_closed.wav";
  let closed_hh = (fn () ->
    let trig = inlet 0.; # 0
    let imp = lfpulse_node 0. (inlet 0.) trig; # 1
    bufplayer_trig_node (buf_ref closed_hh_buf) ((44100. / 48000.) * (inlet 1.)) (inlet 0.) imp # 3 
    |> (*) (aslr_node 0. 3. 0.2 0.1 trig)
  )
  |> play_tpl
  ;

  let _ = MIDI.register_cc_handler 2 0 (fn val ->
    set_input_scalar_offset closed_hh 1 (get_current_sample ()) (Math.unipolar_scale 0. (8. / q) val)  
  );

  let open_hh_buf = load_soundfile  "./engine/assets/hihat_open.wav";
  let open_hh = (fn () ->
    let trig = inlet 0.; # 0
    let imp = lfpulse_node 0. (inlet 0.) trig; # 1
    bufplayer_trig_node (buf_ref open_hh_buf) (44100. * 1.1 / 48000.) (inlet 0.) imp # 3 
    |> (*) (aslr_node 0. 3. 0.2 0.1 trig)
  )
  |> play_tpl
  ;

  let trig = fn () -> 
    let fo = get_tl_tick ();
    set_input_trig_offset closed_hh 0 fo;
    set_input_scalar_offset closed_hh 3 fo 1.  
  ;;


  let trig_rev = fn () -> 
    let fo = get_tl_tick ();
    set_input_scalar_offset closed_hh 3 fo -1.  
  ;;

  let trig_open = fn () -> 
    let fo = get_tl_tick ();
    set_input_trig_offset open_hh 0 fo
  ;;

  let pattern_ref = [|empty_coroutine ()|] ;
  let set_pattern = fn t cor ->
    let pref = pattern_ref;
    cor_stop (pref[0]);
    cor
    |> play_routine t schedule_event
    |> array_set pref 0
  ;;

  let tts_pat = fn () ->
    trig ();
    yield 0.25;
    trig ();
    yield 0.25;
    trig_open ();
    yield 0.25;
    Math.chance 0.125 (trig);
    yield 0.25;
    yield tts_pat ()
  ;;
;


let snrout = fn () ->
  yield 3.;
  Snare.trig ();
  yield 1.;
  yield 3.;
  Snare.trig ();
  yield 0.75;
  Snare.trig ();
  yield 0.25;
  yield snrout ()
;;

# let bin_pat = fn q: (Double) f d ->
#   match d with
#   | 1 -> f () 
#   | 0 -> ()
#   ;
#   q
# ;;


defer_quant (q * 1) (fn t ->
  Hihat.tts_pat ()
  |> cor_map ((*) q)
  |> Hihat.set_pattern t
  ;

  iter [|3., 3., 3., 4., 3.|]  
  |> cor_loop
  |> cor_map ((*) (q * 0.25))
  |> cor_map (fn d -> Kick.trig (); d)
  |> Kick.set_pattern t
  ;
  # iter (euclid 64 10)
  # |> cor_loop
  # |> cor_map (bin_pat (q * 0.25) (Kick.trig))
  # |> Kick.set_pattern t
  # ;
  #
  snrout ()
  |> cor_map ((*) q)
  |> Snare.set_pattern t
);

let fx_chain = (fn () ->
  let input = multi_chan_inlet 2 0.;
  input |> vital_rev_node
    0.8
    1.
    0.5
    0.62184876
    0.0
    0.5
    0.8333333
    0.6
    0.789916
    0.0
    0.0
    1.
) |> play_tpl;

Snare.synth |> pipe_into fx_chain 0;

