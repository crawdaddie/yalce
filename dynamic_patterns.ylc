open engine/bindings/Synth;
open engine/bindings/Sched;
open engine/bindings/MIDI;
import lib/Math;

toggle_midi_debug ();

let q = 60./130.;

let empty_coroutine = extern fn () -> Ptr; 

let Snare = module
  let synth = (fn () -> 
    let trig = inlet 0. in
             sin_node 220.
      |> (+) (sin_node 357.)
      |> (*) (aslr_node 0. 1. 0.05 0.1 trig)
      |> (+) (white_noise_node ())
      |> tanh_node 5. 
      |> (*) (aslr_node 0. 1. 0.01 0.2 trig)

    ;) |> play_tpl
  ;

  let trig = fn () ->
    let fo = get_tl_tick () in
    set_input_trig_offset synth 0 fo
  ;;

  let snare_pattern_ref = [|empty_coroutine ()|] ;
  let set_pattern = fn t cor ->
    let pref = snare_pattern_ref;
    cor_stop (array_at pref 0);
    cor
    |> cor_map (fn (p, d): (Int, Double) ->
      match p with 
      | 0 -> ()
      | 1 -> (trig (); ())
      ;
      d
    ;)
    |> play_routine t schedule_event
    |> array_set 0 pref 
  ;;
;

let Hihat = module
  let synth = (fn () -> 
    let trig = inlet 0. in
    let env = perc_env_node (trig_range_node 0.2 2. trig) trig in
    env
      |> math_node (Math.unipolar_scale 100. 5000.)
      |> sin_node
      |> (+) (white_noise_node ())
      |> biquad_hp_node (trig_range_node 1000. 8000. trig) 4.
      |> comb_node 0.02 0.1 0.7
      |> (*) env

    ;) |> play_tpl
  ;

  let trig = fn () ->
    let fo = get_tl_tick () in
    set_input_trig_offset synth 0 fo
  ;;


  let hh_pattern_ref = [|empty_coroutine ()|] ;
  let set_pattern = fn t cor ->
    let pref = hh_pattern_ref;
    cor_stop (array_at pref 0);
    cor
    |> cor_map (fn d ->
      trig ();
      d
    ;)
    |> play_routine t schedule_event
    |> array_set 0 pref 
  ;;
;

let Kick = module
  #Envs:
  let penv = [|
    0.000000, 0.000000, 2.400000,
    1., 0.185902, -2.300000,
    0.011111, 2.814099, 1.300000,
    0.000000
  |]
  |> array_to_buf;


  let ampenv = [|
    0.000000, 0.000000, 2.400000,
    1.000000, 2.210165, -2.000000,
    1.000000, 0.789836, 1.300000,
    0.000000
  |]
  |> array_to_buf;

  let synth = (fn () -> 
    let trig = inlet 0.;
    let noise = (perc_env_node 0.2 trig) * (white_noise_node ()) ;

    let sig = buf_env_node 1. (buf_ref penv) trig
    |> math_node (Math.unipolar_scale 55. 200.)
    |> sin_node 
    |> (+) noise
    ;

    let sig = (sig + (dyn_tanh_node (5 * buf_env_node 0.03 (buf_ref ampenv) trig) sig));

    sig + (
      sig
      |> biquad_hp_node 100 1
      |> reverb_node 0.2 1. 0. 1.
    )
    |> (*) (buf_env_node 0.12 (buf_ref ampenv) trig)

    ;)
    |> play_tpl
  ;

  let trig = fn () -> 
    let fo = get_tl_tick () in
    set_input_trig_offset synth 0 fo
  ;;

  let kick_pattern_ref = [|empty_coroutine ()|];
  let set_pattern = fn t cor ->
    let pref = kick_pattern_ref;
    cor_stop (array_at pref 0);
    cor
    |> cor_map (fn d -> trig (); d;)
    |> play_routine t schedule_event
    |> array_set 0 pref
  ;;
;



defer_quant (q * 1.) (fn t ->
  iter_of_list [
    1.5,
    1.75,
    1.25,
    0.25,
    1.75,
    1.5
  ]
  |> cor_loop
  |> cor_map ((*) q)
  |> (Kick.set_pattern) t;

  iter_of_list [
  (0, 1.), (1, 1.), (0, 1.), (1, 0.75), (1, 0.25),
  (0, 1.), (1, 1.), (0, 1.), (1, 0.75), (1, 0.25),
  (0, 1.), (1, 1.), (0, 1.), (1, 0.75), (1, 0.25),
  (0, 1.), (1, 1.), (0, 1.), (1, 0.25), (1, 0.5), (1, 0.25)
  ]
  |> cor_loop
  |> cor_map (fn (p, d) -> (p, d * q);)
  |> (Snare.set_pattern) t;

  iter_of_list [0.25]
  |> cor_loop
  |> cor_map (fn d -> d * q;)
  |> (Hihat.set_pattern) t
 
;)
;


#
# defer_quant (q * 2.) (fn t ->
#   iter_of_list [
#     1.5,
#     1.75,
#     1.25,
#     0.25,
#     1.75,
#     1.5
#   ]
#   |> cor_loop
#   |> cor_map ((*) q)
#   |> (Kick.set_pattern) t;
#   )
