Useless nonterminals

   application


Terminals which are not used

   AND
   ASYNC
   IMPLEMENTS
   AMPERSAND
   UMINUS


Useless rules

  153 application: IDENTIFIER expr
  154            | application expr


Rules never reduced

   69 custom_binop: IDENTIFIER

   82 let_binding: LET '(' IDENTIFIER ')' '=' lambda_expr

   99 lambda_args: lambda_arg
  101            | lambda_args lambda_arg

  112 list_match_expr: IDENTIFIER DOUBLE_COLON IDENTIFIER

  135 type_args: IDENTIFIER


State 31 conflicts: 1 shift/reduce
State 39 conflicts: 30 shift/reduce
State 40 conflicts: 30 shift/reduce
State 41 conflicts: 3 shift/reduce, 1 reduce/reduce
State 42 conflicts: 1 shift/reduce
State 54 conflicts: 3 reduce/reduce
State 55 conflicts: 1 shift/reduce, 4 reduce/reduce
State 60 conflicts: 30 shift/reduce
State 65 conflicts: 1 shift/reduce, 2 reduce/reduce
State 68 conflicts: 30 shift/reduce
State 73 conflicts: 1 reduce/reduce
State 91 conflicts: 1 shift/reduce, 1 reduce/reduce
State 128 conflicts: 1 shift/reduce, 1 reduce/reduce
State 136 conflicts: 3 reduce/reduce
State 139 conflicts: 13 shift/reduce
State 179 conflicts: 14 shift/reduce
State 180 conflicts: 30 shift/reduce
State 181 conflicts: 14 shift/reduce
State 182 conflicts: 14 shift/reduce
State 183 conflicts: 14 shift/reduce
State 184 conflicts: 14 shift/reduce
State 185 conflicts: 14 shift/reduce
State 186 conflicts: 14 shift/reduce
State 187 conflicts: 14 shift/reduce
State 188 conflicts: 14 shift/reduce
State 189 conflicts: 14 shift/reduce
State 190 conflicts: 14 shift/reduce
State 191 conflicts: 14 shift/reduce
State 192 conflicts: 14 shift/reduce
State 193 conflicts: 14 shift/reduce
State 194 conflicts: 14 shift/reduce
State 196 conflicts: 14 shift/reduce
State 197 conflicts: 30 shift/reduce
State 198 conflicts: 1 shift/reduce
State 202 conflicts: 30 shift/reduce
State 203 conflicts: 5 reduce/reduce
State 204 conflicts: 3 shift/reduce
State 207 conflicts: 30 shift/reduce
State 208 conflicts: 30 shift/reduce
State 209 conflicts: 30 shift/reduce
State 213 conflicts: 4 reduce/reduce
State 214 conflicts: 30 shift/reduce
State 215 conflicts: 30 shift/reduce
State 223 conflicts: 2 shift/reduce
State 226 conflicts: 1 shift/reduce
State 227 conflicts: 2 shift/reduce
State 231 conflicts: 1 shift/reduce
State 232 conflicts: 1 shift/reduce
State 233 conflicts: 2 shift/reduce
State 234 conflicts: 1 shift/reduce
State 235 conflicts: 2 shift/reduce
State 245 conflicts: 31 shift/reduce
State 246 conflicts: 30 shift/reduce
State 252 conflicts: 30 shift/reduce
State 253 conflicts: 30 shift/reduce
State 255 conflicts: 13 shift/reduce
State 256 conflicts: 13 shift/reduce
State 258 conflicts: 2 shift/reduce
State 260 conflicts: 13 shift/reduce
State 286 conflicts: 1 shift/reduce, 2 reduce/reduce
State 288 conflicts: 30 shift/reduce
State 289 conflicts: 44 reduce/reduce
State 301 conflicts: 2 shift/reduce
State 303 conflicts: 2 shift/reduce
State 306 conflicts: 30 shift/reduce
State 308 conflicts: 44 reduce/reduce
State 309 conflicts: 44 reduce/reduce
State 310 conflicts: 30 shift/reduce
State 316 conflicts: 30 shift/reduce
State 323 conflicts: 30 shift/reduce
State 324 conflicts: 30 shift/reduce


Grammar

    0 $accept: program $end

    1 program: expr_sequence ';'
    2        | expr_sequence
    3        | /* empty */

    4 expr: simple_expr
    5     | 'yield' expr
    6     | expr DOUBLE_AT expr
    7     | expr simple_expr
    8     | expr '+' expr
    9     | expr '-' expr
   10     | expr '*' expr
   11     | expr '/' expr
   12     | expr MODULO expr
   13     | expr '<' expr
   14     | expr '>' expr
   15     | expr DOUBLE_AMP expr
   16     | expr DOUBLE_PIPE expr
   17     | expr GE expr
   18     | expr LE expr
   19     | expr NE expr
   20     | expr EQ expr
   21     | expr PIPE expr
   22     | expr ':' expr
   23     | expr 'to' expr
   24     | expr DOUBLE_COLON expr
   25     | let_binding
   26     | match_expr
   27     | type_decl
   28     | THUNK expr
   29     | TRIPLE_DOT expr
   30     | IDENTIFIER_LIST
   31     | MACRO_IDENTIFIER expr
   32     | 'for' IDENTIFIER '=' expr IN expr
   33     | expr '[' expr ']'
   34     | expr ':' '=' expr

   35 simple_expr: INTEGER
   36            | DOUBLE
   37            | FLOAT
   38            | TOK_STRING
   39            | TRUE
   40            | FALSE
   41            | IDENTIFIER
   42            | TOK_VOID
   43            | list
   44            | array
   45            | tuple
   46            | fstring
   47            | TOK_CHAR
   48            | '(' expr_sequence ')'
   49            | '(' FN lambda_args ARROW expr_sequence ')'
   50            | '(' FN TOK_VOID ARROW expr_sequence ')'
   51            | '(' '+' ')'
   52            | '(' '-' ')'
   53            | '(' '*' ')'
   54            | '(' '/' ')'
   55            | '(' MODULO ')'
   56            | '(' '<' ')'
   57            | '(' '>' ')'
   58            | '(' DOUBLE_AMP ')'
   59            | '(' DOUBLE_PIPE ')'
   60            | '(' GE ')'
   61            | '(' LE ')'
   62            | '(' NE ')'
   63            | '(' EQ ')'
   64            | '(' PIPE ')'
   65            | '(' ':' ')'
   66            | '(' DOUBLE_COLON ')'
   67            | '(' custom_binop ')'
   68            | simple_expr '.' IDENTIFIER

   69 custom_binop: IDENTIFIER

   70 expr_sequence: expr
   71              | expr_sequence ';' expr

   72 let_binding: LET TEST_ID '=' expr
   73            | LET IDENTIFIER '=' expr
   74            | LET IDENTIFIER '=' EXTERN FN fn_signature
   75            | LET lambda_arg '=' expr
   76            | LET MUT lambda_arg '=' expr
   77            | LET expr_list '=' expr
   78            | LET MUT expr_list '=' expr
   79            | LET TOK_VOID '=' expr
   80            | let_binding IN expr
   81            | lambda_expr
   82            | LET '(' IDENTIFIER ')' '=' lambda_expr
   83            | LET '(' IDENTIFIER ')' '=' expr
   84            | IMPORT PATH_IDENTIFIER
   85            | OPEN PATH_IDENTIFIER
   86            | IMPORT IDENTIFIER
   87            | OPEN IDENTIFIER
   88            | LET IDENTIFIER ':' IDENTIFIER '=' lambda_expr

   89 lambda_expr: FN lambda_args ARROW expr_sequence ';'
   90            | FN TOK_VOID ARROW expr_sequence ';'
   91            | '(' FN lambda_args ARROW expr_sequence ')'
   92            | '(' FN TOK_VOID ARROW expr_sequence ')'
   93            | MODULE lambda_args ARROW expr_sequence ';'
   94            | MODULE expr_sequence ';'

   95 lambda_args: lambda_arg
   96            | lambda_arg '=' expr
   97            | lambda_args lambda_arg
   98            | lambda_args lambda_arg '=' expr
   99            | lambda_arg
  100            | lambda_arg ':' '(' type_expr ')'
  101            | lambda_args lambda_arg
  102            | lambda_args lambda_arg ':' '(' type_expr ')'

  103 lambda_arg: IDENTIFIER
  104           | '(' expr_list ')'
  105           | list_match_expr

  106 list: '[' ']'
  107     | '[' expr_list ']'
  108     | '[' expr_list ',' ']'

  109 array: '[' '|' '|' ']'
  110      | '[' '|' expr_list '|' ']'
  111      | '[' '|' expr_list ',' '|' ']'

  112 list_match_expr: IDENTIFIER DOUBLE_COLON IDENTIFIER
  113                | IDENTIFIER DOUBLE_COLON expr

  114 tuple: '(' expr ')'
  115      | '(' expr_list ')'
  116      | '(' expr_list ',' ')'

  117 expr_list: expr
  118          | expr_list ',' expr

  119 match_expr: MATCH expr WITH match_branches
  120           | 'if' expr THEN expr ELSE expr
  121           | 'if' expr THEN expr

  122 match_test_clause: expr
  123                  | expr 'if' expr

  124 match_branches: '|' match_test_clause ARROW expr
  125               | match_branches '|' match_test_clause ARROW expr
  126               | match_branches '|' '_' ARROW expr

  127 fstring: FSTRING_START fstring_parts FSTRING_END

  128 fstring_parts: /* empty */
  129              | fstring_parts fstring_part

  130 fstring_part: FSTRING_TEXT
  131             | FSTRING_INTERP_START expr FSTRING_INTERP_END

  132 type_decl: TYPE IDENTIFIER '=' type_expr
  133          | TYPE IDENTIFIER
  134          | TYPE type_args '=' type_expr

  135 type_args: IDENTIFIER
  136          | type_args IDENTIFIER

  137 fn_signature: type_expr ARROW type_expr
  138             | fn_signature ARROW type_expr

  139 tuple_type: type_atom ',' type_atom
  140           | tuple_type ',' type_atom

  141 type_expr: type_atom
  142          | '|' type_atom
  143          | type_expr '|' type_atom
  144          | fn_signature
  145          | tuple_type

  146 type_atom: IDENTIFIER
  147          | IDENTIFIER '=' INTEGER
  148          | IDENTIFIER 'of' type_atom
  149          | IDENTIFIER ':' type_atom
  150          | '(' type_expr ')'
  151          | TOK_VOID
  152          | IDENTIFIER '.' IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
'(' (40) 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67
    82 83 91 92 100 102 104 114 115 116 150
')' (41) 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67
    82 83 91 92 100 102 104 114 115 116 150
'*' (42) 10 53
'+' (43) 8 51
',' (44) 108 111 116 118 139 140
'-' (45) 9 52
'.' (46) 68 152
'/' (47) 11 54
':' (58) 22 34 65 88 100 102 149
';' (59) 1 71 89 90 93 94
'<' (60) 13 56
'=' (61) 32 34 72 73 74 75 76 77 78 79 82 83 88 96 98 132 134 147
'>' (62) 14 57
'[' (91) 33 106 107 108 109 110 111
']' (93) 33 106 107 108 109 110 111
'_' (95) 126
'for' (102) 32
'if' (105) 120 121 123
'of' (111) 148
'to' (116) 23
'yield' (121) 5
'|' (124) 109 110 111 124 125 126 142 143
error (256)
INTEGER (258) 35 147
DOUBLE (259) 36
FLOAT (260) 37
IDENTIFIER (261) 32 41 68 69 73 74 82 83 86 87 88 103 112 113 132 133
    135 136 146 147 148 149 152
MACRO_IDENTIFIER (262) 31
PATH_IDENTIFIER (263) 84 85
IDENTIFIER_LIST (264) 30
TOK_STRING (265) 38
TOK_CHAR (266) 47
TRUE (267) 39
FALSE (268) 40
PIPE (269) 21 64
EXTERN (270) 74
TRIPLE_DOT (271) 29
LET (272) 72 73 74 75 76 77 78 79 82 83 88
FN (273) 49 50 74 89 90 91 92
MODULE (274) 93 94
MATCH (275) 119
WITH (276) 119
ARROW (277) 49 50 89 90 91 92 93 124 125 126 137 138
DOUBLE_COLON (278) 24 66 112 113
TOK_VOID (279) 42 50 79 90 92 151
IN (280) 32 80
AND (281)
ASYNC (282)
DOUBLE_AT (283) 6
THUNK (284) 28
IMPORT (285) 84 86
OPEN (286) 85 87
IMPLEMENTS (287)
AMPERSAND (288)
TYPE (289) 132 133 134
TEST_ID (290) 72
MUT (291) 76 78
THEN (292) 120 121
ELSE (293) 120
FSTRING_START (294) 127
FSTRING_END (295) 127
FSTRING_INTERP_START (296) 131
FSTRING_INTERP_END (297) 131
FSTRING_TEXT (298) 130
APPLICATION (299)
DOUBLE_PIPE (300) 16 59
DOUBLE_AMP (301) 15 58
NE (302) 19 62
EQ (303) 20 63
LE (304) 18 61
GE (305) 17 60
MODULO (306) 12 55
UMINUS (307)


Nonterminals, with rules where they appear

$accept (75)
    on left: 0
program (76)
    on left: 1 2 3, on right: 0
expr (77)
    on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
    24 25 26 27 28 29 30 31 32 33 34, on right: 5 6 7 8 9 10 11 12
    13 14 15 16 17 18 19 20 21 22 23 24 28 29 31 32 33 34 70 71 72
    73 75 76 77 78 79 80 83 96 98 113 114 117 118 119 120 121 122 123
    124 125 126 131
simple_expr (78)
    on left: 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52
    53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68,
    on right: 4 7 68
custom_binop (79)
    on left: 69, on right: 67
expr_sequence (80)
    on left: 70 71, on right: 1 2 48 49 50 71 89 90 91 92 93 94
let_binding (81)
    on left: 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88,
    on right: 25 80
lambda_expr (82)
    on left: 89 90 91 92 93 94, on right: 81 82 88
lambda_args (83)
    on left: 95 96 97 98 99 100 101 102, on right: 49 89 91 93 97 98
    101 102
lambda_arg (84)
    on left: 103 104 105, on right: 75 76 95 96 97 98 99 100 101 102
list (85)
    on left: 106 107 108, on right: 43
array (86)
    on left: 109 110 111, on right: 44
list_match_expr (87)
    on left: 112 113, on right: 105
tuple (88)
    on left: 114 115 116, on right: 45
expr_list (89)
    on left: 117 118, on right: 77 78 104 107 108 110 111 115 116 118
match_expr (90)
    on left: 119 120 121, on right: 26
match_test_clause (91)
    on left: 122 123, on right: 124 125
match_branches (92)
    on left: 124 125 126, on right: 119 125 126
fstring (93)
    on left: 127, on right: 46
fstring_parts (94)
    on left: 128 129, on right: 127 129
fstring_part (95)
    on left: 130 131, on right: 129
type_decl (96)
    on left: 132 133 134, on right: 27
type_args (97)
    on left: 135 136, on right: 134 136
fn_signature (98)
    on left: 137 138, on right: 74 138 144
tuple_type (99)
    on left: 139 140, on right: 140 145
type_expr (100)
    on left: 141 142 143 144 145, on right: 100 102 132 134 137 138
    143 150
type_atom (101)
    on left: 146 147 148 149 150 151 152, on right: 139 140 141 142
    143 148 149


state 0

    0 $accept: . program $end

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    $default  reduce using rule 3 (program)

    program        go to state 27
    expr           go to state 28
    simple_expr    go to state 29
    expr_sequence  go to state 30
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 1

   35 simple_expr: INTEGER .

    $default  reduce using rule 35 (simple_expr)


state 2

   36 simple_expr: DOUBLE .

    $default  reduce using rule 36 (simple_expr)


state 3

   37 simple_expr: FLOAT .

    $default  reduce using rule 37 (simple_expr)


state 4

   41 simple_expr: IDENTIFIER .

    $default  reduce using rule 41 (simple_expr)


state 5

   31 expr: MACRO_IDENTIFIER . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 39
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 6

   30 expr: IDENTIFIER_LIST .

    $default  reduce using rule 30 (expr)


state 7

   38 simple_expr: TOK_STRING .

    $default  reduce using rule 38 (simple_expr)


state 8

   47 simple_expr: TOK_CHAR .

    $default  reduce using rule 47 (simple_expr)


state 9

   39 simple_expr: TRUE .

    $default  reduce using rule 39 (simple_expr)


state 10

   40 simple_expr: FALSE .

    $default  reduce using rule 40 (simple_expr)


state 11

   29 expr: TRIPLE_DOT . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 40
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 12

   72 let_binding: LET . TEST_ID '=' expr
   73            | LET . IDENTIFIER '=' expr
   74            | LET . IDENTIFIER '=' EXTERN FN fn_signature
   75            | LET . lambda_arg '=' expr
   76            | LET . MUT lambda_arg '=' expr
   77            | LET . expr_list '=' expr
   78            | LET . MUT expr_list '=' expr
   79            | LET . TOK_VOID '=' expr
   82            | LET . '(' IDENTIFIER ')' '=' lambda_expr
   83            | LET . '(' IDENTIFIER ')' '=' expr
   88            | LET . IDENTIFIER ':' IDENTIFIER '=' lambda_expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 41
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 42
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    TEST_ID           shift, and go to state 43
    MUT               shift, and go to state 44
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 45
    'if'              shift, and go to state 26

    expr             go to state 46
    simple_expr      go to state 29
    let_binding      go to state 31
    lambda_expr      go to state 32
    lambda_arg       go to state 47
    list             go to state 33
    array            go to state 34
    list_match_expr  go to state 48
    tuple            go to state 35
    expr_list        go to state 49
    match_expr       go to state 36
    fstring          go to state 37
    type_decl        go to state 38


state 13

   89 lambda_expr: FN . lambda_args ARROW expr_sequence ';'
   90            | FN . TOK_VOID ARROW expr_sequence ';'

    IDENTIFIER  shift, and go to state 50
    TOK_VOID    shift, and go to state 51
    '('         shift, and go to state 52

    lambda_args      go to state 53
    lambda_arg       go to state 54
    list_match_expr  go to state 48


state 14

   93 lambda_expr: MODULE . lambda_args ARROW expr_sequence ';'
   94            | MODULE . expr_sequence ';'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 55
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 56
    'if'              shift, and go to state 26

    expr             go to state 28
    simple_expr      go to state 29
    expr_sequence    go to state 57
    let_binding      go to state 31
    lambda_expr      go to state 32
    lambda_args      go to state 58
    lambda_arg       go to state 54
    list             go to state 33
    array            go to state 34
    list_match_expr  go to state 48
    tuple            go to state 35
    match_expr       go to state 36
    fstring          go to state 37
    type_decl        go to state 38


state 15

  119 match_expr: MATCH . expr WITH match_branches

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 59
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 16

   42 simple_expr: TOK_VOID .

    $default  reduce using rule 42 (simple_expr)


state 17

   28 expr: THUNK . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 60
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 18

   84 let_binding: IMPORT . PATH_IDENTIFIER
   86            | IMPORT . IDENTIFIER

    IDENTIFIER       shift, and go to state 61
    PATH_IDENTIFIER  shift, and go to state 62


state 19

   85 let_binding: OPEN . PATH_IDENTIFIER
   87            | OPEN . IDENTIFIER

    IDENTIFIER       shift, and go to state 63
    PATH_IDENTIFIER  shift, and go to state 64


state 20

  132 type_decl: TYPE . IDENTIFIER '=' type_expr
  133          | TYPE . IDENTIFIER
  134          | TYPE . type_args '=' type_expr

    IDENTIFIER  shift, and go to state 65

    type_args  go to state 66


state 21

  127 fstring: FSTRING_START . fstring_parts FSTRING_END

    $default  reduce using rule 128 (fstring_parts)

    fstring_parts  go to state 67


state 22

    5 expr: 'yield' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 68
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 23

   32 expr: 'for' . IDENTIFIER '=' expr IN expr

    IDENTIFIER  shift, and go to state 69


state 24

  106 list: '[' . ']'
  107     | '[' . expr_list ']'
  108     | '[' . expr_list ',' ']'
  109 array: '[' . '|' '|' ']'
  110      | '[' . '|' expr_list '|' ']'
  111      | '[' . '|' expr_list ',' '|' ']'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    '|'               shift, and go to state 70
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    ']'               shift, and go to state 71
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 46
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    expr_list    go to state 72
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 25

   48 simple_expr: '(' . expr_sequence ')'
   49            | '(' . FN lambda_args ARROW expr_sequence ')'
   50            | '(' . FN TOK_VOID ARROW expr_sequence ')'
   51            | '(' . '+' ')'
   52            | '(' . '-' ')'
   53            | '(' . '*' ')'
   54            | '(' . '/' ')'
   55            | '(' . MODULO ')'
   56            | '(' . '<' ')'
   57            | '(' . '>' ')'
   58            | '(' . DOUBLE_AMP ')'
   59            | '(' . DOUBLE_PIPE ')'
   60            | '(' . GE ')'
   61            | '(' . LE ')'
   62            | '(' . NE ')'
   63            | '(' . EQ ')'
   64            | '(' . PIPE ')'
   65            | '(' . ':' ')'
   66            | '(' . DOUBLE_COLON ')'
   67            | '(' . custom_binop ')'
   91 lambda_expr: '(' . FN lambda_args ARROW expr_sequence ')'
   92            | '(' . FN TOK_VOID ARROW expr_sequence ')'
  114 tuple: '(' . expr ')'
  115      | '(' . expr_list ')'
  116      | '(' . expr_list ',' ')'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 73
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    PIPE              shift, and go to state 74
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 75
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    DOUBLE_COLON      shift, and go to state 76
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    DOUBLE_PIPE       shift, and go to state 77
    DOUBLE_AMP        shift, and go to state 78
    '>'               shift, and go to state 79
    '<'               shift, and go to state 80
    NE                shift, and go to state 81
    EQ                shift, and go to state 82
    LE                shift, and go to state 83
    GE                shift, and go to state 84
    '+'               shift, and go to state 85
    '-'               shift, and go to state 86
    '*'               shift, and go to state 87
    '/'               shift, and go to state 88
    MODULO            shift, and go to state 89
    ':'               shift, and go to state 90
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr           go to state 91
    simple_expr    go to state 29
    custom_binop   go to state 92
    expr_sequence  go to state 93
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    expr_list      go to state 94
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 26

  120 match_expr: 'if' . expr THEN expr ELSE expr
  121           | 'if' . expr THEN expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 95
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 27

    0 $accept: program . $end

    $end  shift, and go to state 96


state 28

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   70 expr_sequence: expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    $default  reduce using rule 70 (expr_sequence)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 29

    4 expr: simple_expr .
   68 simple_expr: simple_expr . '.' IDENTIFIER

    '.'  shift, and go to state 118

    $default  reduce using rule 4 (expr)


state 30

    1 program: expr_sequence . ';'
    2        | expr_sequence .
   71 expr_sequence: expr_sequence . ';' expr

    ';'  shift, and go to state 119

    $default  reduce using rule 2 (program)


state 31

   25 expr: let_binding .
   80 let_binding: let_binding . IN expr

    IN  shift, and go to state 120

    IN        [reduce using rule 25 (expr)]
    $default  reduce using rule 25 (expr)


state 32

   81 let_binding: lambda_expr .

    $default  reduce using rule 81 (let_binding)


state 33

   43 simple_expr: list .

    $default  reduce using rule 43 (simple_expr)


state 34

   44 simple_expr: array .

    $default  reduce using rule 44 (simple_expr)


state 35

   45 simple_expr: tuple .

    $default  reduce using rule 45 (simple_expr)


state 36

   26 expr: match_expr .

    $default  reduce using rule 26 (expr)


state 37

   46 simple_expr: fstring .

    $default  reduce using rule 46 (simple_expr)


state 38

   27 expr: type_decl .

    $default  reduce using rule 27 (expr)


state 39

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   31     | MACRO_IDENTIFIER expr .
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 31 (expr)]
    DOUBLE         [reduce using rule 31 (expr)]
    FLOAT          [reduce using rule 31 (expr)]
    IDENTIFIER     [reduce using rule 31 (expr)]
    TOK_STRING     [reduce using rule 31 (expr)]
    TOK_CHAR       [reduce using rule 31 (expr)]
    TRUE           [reduce using rule 31 (expr)]
    FALSE          [reduce using rule 31 (expr)]
    PIPE           [reduce using rule 31 (expr)]
    DOUBLE_COLON   [reduce using rule 31 (expr)]
    TOK_VOID       [reduce using rule 31 (expr)]
    DOUBLE_AT      [reduce using rule 31 (expr)]
    FSTRING_START  [reduce using rule 31 (expr)]
    DOUBLE_PIPE    [reduce using rule 31 (expr)]
    DOUBLE_AMP     [reduce using rule 31 (expr)]
    '>'            [reduce using rule 31 (expr)]
    '<'            [reduce using rule 31 (expr)]
    NE             [reduce using rule 31 (expr)]
    EQ             [reduce using rule 31 (expr)]
    LE             [reduce using rule 31 (expr)]
    GE             [reduce using rule 31 (expr)]
    '+'            [reduce using rule 31 (expr)]
    '-'            [reduce using rule 31 (expr)]
    '*'            [reduce using rule 31 (expr)]
    '/'            [reduce using rule 31 (expr)]
    MODULO         [reduce using rule 31 (expr)]
    ':'            [reduce using rule 31 (expr)]
    'to'           [reduce using rule 31 (expr)]
    '['            [reduce using rule 31 (expr)]
    '('            [reduce using rule 31 (expr)]
    $default       reduce using rule 31 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 40

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   29     | TRIPLE_DOT expr .
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 29 (expr)]
    DOUBLE         [reduce using rule 29 (expr)]
    FLOAT          [reduce using rule 29 (expr)]
    IDENTIFIER     [reduce using rule 29 (expr)]
    TOK_STRING     [reduce using rule 29 (expr)]
    TOK_CHAR       [reduce using rule 29 (expr)]
    TRUE           [reduce using rule 29 (expr)]
    FALSE          [reduce using rule 29 (expr)]
    PIPE           [reduce using rule 29 (expr)]
    DOUBLE_COLON   [reduce using rule 29 (expr)]
    TOK_VOID       [reduce using rule 29 (expr)]
    DOUBLE_AT      [reduce using rule 29 (expr)]
    FSTRING_START  [reduce using rule 29 (expr)]
    DOUBLE_PIPE    [reduce using rule 29 (expr)]
    DOUBLE_AMP     [reduce using rule 29 (expr)]
    '>'            [reduce using rule 29 (expr)]
    '<'            [reduce using rule 29 (expr)]
    NE             [reduce using rule 29 (expr)]
    EQ             [reduce using rule 29 (expr)]
    LE             [reduce using rule 29 (expr)]
    GE             [reduce using rule 29 (expr)]
    '+'            [reduce using rule 29 (expr)]
    '-'            [reduce using rule 29 (expr)]
    '*'            [reduce using rule 29 (expr)]
    '/'            [reduce using rule 29 (expr)]
    MODULO         [reduce using rule 29 (expr)]
    ':'            [reduce using rule 29 (expr)]
    'to'           [reduce using rule 29 (expr)]
    '['            [reduce using rule 29 (expr)]
    '('            [reduce using rule 29 (expr)]
    $default       reduce using rule 29 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 41

   41 simple_expr: IDENTIFIER .
   73 let_binding: LET IDENTIFIER . '=' expr
   74            | LET IDENTIFIER . '=' EXTERN FN fn_signature
   88            | LET IDENTIFIER . ':' IDENTIFIER '=' lambda_expr
  103 lambda_arg: IDENTIFIER .
  112 list_match_expr: IDENTIFIER . DOUBLE_COLON IDENTIFIER
  113                | IDENTIFIER . DOUBLE_COLON expr

    DOUBLE_COLON  shift, and go to state 121
    ':'           shift, and go to state 122
    '='           shift, and go to state 123

    DOUBLE_COLON  [reduce using rule 41 (simple_expr)]
    ':'           [reduce using rule 41 (simple_expr)]
    '='           [reduce using rule 41 (simple_expr)]
    '='           [reduce using rule 103 (lambda_arg)]
    $default      reduce using rule 41 (simple_expr)


state 42

   42 simple_expr: TOK_VOID .
   79 let_binding: LET TOK_VOID . '=' expr

    '='  shift, and go to state 124

    '='       [reduce using rule 42 (simple_expr)]
    $default  reduce using rule 42 (simple_expr)


state 43

   72 let_binding: LET TEST_ID . '=' expr

    '='  shift, and go to state 125


state 44

   76 let_binding: LET MUT . lambda_arg '=' expr
   78            | LET MUT . expr_list '=' expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 55
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 56
    'if'              shift, and go to state 26

    expr             go to state 46
    simple_expr      go to state 29
    let_binding      go to state 31
    lambda_expr      go to state 32
    lambda_arg       go to state 126
    list             go to state 33
    array            go to state 34
    list_match_expr  go to state 48
    tuple            go to state 35
    expr_list        go to state 127
    match_expr       go to state 36
    fstring          go to state 37
    type_decl        go to state 38


state 45

   48 simple_expr: '(' . expr_sequence ')'
   49            | '(' . FN lambda_args ARROW expr_sequence ')'
   50            | '(' . FN TOK_VOID ARROW expr_sequence ')'
   51            | '(' . '+' ')'
   52            | '(' . '-' ')'
   53            | '(' . '*' ')'
   54            | '(' . '/' ')'
   55            | '(' . MODULO ')'
   56            | '(' . '<' ')'
   57            | '(' . '>' ')'
   58            | '(' . DOUBLE_AMP ')'
   59            | '(' . DOUBLE_PIPE ')'
   60            | '(' . GE ')'
   61            | '(' . LE ')'
   62            | '(' . NE ')'
   63            | '(' . EQ ')'
   64            | '(' . PIPE ')'
   65            | '(' . ':' ')'
   66            | '(' . DOUBLE_COLON ')'
   67            | '(' . custom_binop ')'
   82 let_binding: LET '(' . IDENTIFIER ')' '=' lambda_expr
   83            | LET '(' . IDENTIFIER ')' '=' expr
   91 lambda_expr: '(' . FN lambda_args ARROW expr_sequence ')'
   92            | '(' . FN TOK_VOID ARROW expr_sequence ')'
  104 lambda_arg: '(' . expr_list ')'
  114 tuple: '(' . expr ')'
  115      | '(' . expr_list ')'
  116      | '(' . expr_list ',' ')'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 128
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    PIPE              shift, and go to state 74
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 75
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    DOUBLE_COLON      shift, and go to state 76
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    DOUBLE_PIPE       shift, and go to state 77
    DOUBLE_AMP        shift, and go to state 78
    '>'               shift, and go to state 79
    '<'               shift, and go to state 80
    NE                shift, and go to state 81
    EQ                shift, and go to state 82
    LE                shift, and go to state 83
    GE                shift, and go to state 84
    '+'               shift, and go to state 85
    '-'               shift, and go to state 86
    '*'               shift, and go to state 87
    '/'               shift, and go to state 88
    MODULO            shift, and go to state 89
    ':'               shift, and go to state 90
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr           go to state 91
    simple_expr    go to state 29
    custom_binop   go to state 92
    expr_sequence  go to state 93
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    expr_list      go to state 129
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 46

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
  117 expr_list: expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    $default  reduce using rule 117 (expr_list)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 47

   75 let_binding: LET lambda_arg . '=' expr

    '='  shift, and go to state 130


state 48

  105 lambda_arg: list_match_expr .

    $default  reduce using rule 105 (lambda_arg)


state 49

   77 let_binding: LET expr_list . '=' expr
  118 expr_list: expr_list . ',' expr

    '='  shift, and go to state 131
    ','  shift, and go to state 132


state 50

  103 lambda_arg: IDENTIFIER .
  112 list_match_expr: IDENTIFIER . DOUBLE_COLON IDENTIFIER
  113                | IDENTIFIER . DOUBLE_COLON expr

    DOUBLE_COLON  shift, and go to state 121

    $default  reduce using rule 103 (lambda_arg)


state 51

   90 lambda_expr: FN TOK_VOID . ARROW expr_sequence ';'

    ARROW  shift, and go to state 133


state 52

  104 lambda_arg: '(' . expr_list ')'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 46
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    expr_list    go to state 134
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 53

   89 lambda_expr: FN lambda_args . ARROW expr_sequence ';'
   97 lambda_args: lambda_args . lambda_arg
   98            | lambda_args . lambda_arg '=' expr
  101            | lambda_args . lambda_arg
  102            | lambda_args . lambda_arg ':' '(' type_expr ')'

    IDENTIFIER  shift, and go to state 50
    ARROW       shift, and go to state 135
    '('         shift, and go to state 52

    lambda_arg       go to state 136
    list_match_expr  go to state 48


state 54

   95 lambda_args: lambda_arg .
   96            | lambda_arg . '=' expr
   99            | lambda_arg .
  100            | lambda_arg . ':' '(' type_expr ')'

    ':'  shift, and go to state 137
    '='  shift, and go to state 138

    IDENTIFIER  reduce using rule 95 (lambda_args)
    IDENTIFIER  [reduce using rule 99 (lambda_args)]
    ARROW       reduce using rule 95 (lambda_args)
    ARROW       [reduce using rule 99 (lambda_args)]
    '('         reduce using rule 95 (lambda_args)
    '('         [reduce using rule 99 (lambda_args)]
    $default    reduce using rule 95 (lambda_args)


state 55

   41 simple_expr: IDENTIFIER .
  103 lambda_arg: IDENTIFIER .
  112 list_match_expr: IDENTIFIER . DOUBLE_COLON IDENTIFIER
  113                | IDENTIFIER . DOUBLE_COLON expr

    DOUBLE_COLON  shift, and go to state 121

    IDENTIFIER    reduce using rule 41 (simple_expr)
    IDENTIFIER    [reduce using rule 103 (lambda_arg)]
    ARROW         reduce using rule 103 (lambda_arg)
    DOUBLE_COLON  [reduce using rule 41 (simple_expr)]
    ':'           reduce using rule 41 (simple_expr)
    ':'           [reduce using rule 103 (lambda_arg)]
    '='           reduce using rule 41 (simple_expr)
    '='           [reduce using rule 103 (lambda_arg)]
    '('           reduce using rule 41 (simple_expr)
    '('           [reduce using rule 103 (lambda_arg)]
    $default      reduce using rule 41 (simple_expr)


state 56

   48 simple_expr: '(' . expr_sequence ')'
   49            | '(' . FN lambda_args ARROW expr_sequence ')'
   50            | '(' . FN TOK_VOID ARROW expr_sequence ')'
   51            | '(' . '+' ')'
   52            | '(' . '-' ')'
   53            | '(' . '*' ')'
   54            | '(' . '/' ')'
   55            | '(' . MODULO ')'
   56            | '(' . '<' ')'
   57            | '(' . '>' ')'
   58            | '(' . DOUBLE_AMP ')'
   59            | '(' . DOUBLE_PIPE ')'
   60            | '(' . GE ')'
   61            | '(' . LE ')'
   62            | '(' . NE ')'
   63            | '(' . EQ ')'
   64            | '(' . PIPE ')'
   65            | '(' . ':' ')'
   66            | '(' . DOUBLE_COLON ')'
   67            | '(' . custom_binop ')'
   91 lambda_expr: '(' . FN lambda_args ARROW expr_sequence ')'
   92            | '(' . FN TOK_VOID ARROW expr_sequence ')'
  104 lambda_arg: '(' . expr_list ')'
  114 tuple: '(' . expr ')'
  115      | '(' . expr_list ')'
  116      | '(' . expr_list ',' ')'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 73
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    PIPE              shift, and go to state 74
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 75
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    DOUBLE_COLON      shift, and go to state 76
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    DOUBLE_PIPE       shift, and go to state 77
    DOUBLE_AMP        shift, and go to state 78
    '>'               shift, and go to state 79
    '<'               shift, and go to state 80
    NE                shift, and go to state 81
    EQ                shift, and go to state 82
    LE                shift, and go to state 83
    GE                shift, and go to state 84
    '+'               shift, and go to state 85
    '-'               shift, and go to state 86
    '*'               shift, and go to state 87
    '/'               shift, and go to state 88
    MODULO            shift, and go to state 89
    ':'               shift, and go to state 90
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr           go to state 91
    simple_expr    go to state 29
    custom_binop   go to state 92
    expr_sequence  go to state 93
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    expr_list      go to state 129
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 57

   71 expr_sequence: expr_sequence . ';' expr
   94 lambda_expr: MODULE expr_sequence . ';'

    ';'  shift, and go to state 139


state 58

   93 lambda_expr: MODULE lambda_args . ARROW expr_sequence ';'
   97 lambda_args: lambda_args . lambda_arg
   98            | lambda_args . lambda_arg '=' expr
  101            | lambda_args . lambda_arg
  102            | lambda_args . lambda_arg ':' '(' type_expr ')'

    IDENTIFIER  shift, and go to state 50
    ARROW       shift, and go to state 140
    '('         shift, and go to state 52

    lambda_arg       go to state 136
    list_match_expr  go to state 48


state 59

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
  119 match_expr: MATCH expr . WITH match_branches

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    WITH           shift, and go to state 141
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 60

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   28     | THUNK expr .
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 28 (expr)]
    DOUBLE         [reduce using rule 28 (expr)]
    FLOAT          [reduce using rule 28 (expr)]
    IDENTIFIER     [reduce using rule 28 (expr)]
    TOK_STRING     [reduce using rule 28 (expr)]
    TOK_CHAR       [reduce using rule 28 (expr)]
    TRUE           [reduce using rule 28 (expr)]
    FALSE          [reduce using rule 28 (expr)]
    PIPE           [reduce using rule 28 (expr)]
    DOUBLE_COLON   [reduce using rule 28 (expr)]
    TOK_VOID       [reduce using rule 28 (expr)]
    DOUBLE_AT      [reduce using rule 28 (expr)]
    FSTRING_START  [reduce using rule 28 (expr)]
    DOUBLE_PIPE    [reduce using rule 28 (expr)]
    DOUBLE_AMP     [reduce using rule 28 (expr)]
    '>'            [reduce using rule 28 (expr)]
    '<'            [reduce using rule 28 (expr)]
    NE             [reduce using rule 28 (expr)]
    EQ             [reduce using rule 28 (expr)]
    LE             [reduce using rule 28 (expr)]
    GE             [reduce using rule 28 (expr)]
    '+'            [reduce using rule 28 (expr)]
    '-'            [reduce using rule 28 (expr)]
    '*'            [reduce using rule 28 (expr)]
    '/'            [reduce using rule 28 (expr)]
    MODULO         [reduce using rule 28 (expr)]
    ':'            [reduce using rule 28 (expr)]
    'to'           [reduce using rule 28 (expr)]
    '['            [reduce using rule 28 (expr)]
    '('            [reduce using rule 28 (expr)]
    $default       reduce using rule 28 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 61

   86 let_binding: IMPORT IDENTIFIER .

    $default  reduce using rule 86 (let_binding)


state 62

   84 let_binding: IMPORT PATH_IDENTIFIER .

    $default  reduce using rule 84 (let_binding)


state 63

   87 let_binding: OPEN IDENTIFIER .

    $default  reduce using rule 87 (let_binding)


state 64

   85 let_binding: OPEN PATH_IDENTIFIER .

    $default  reduce using rule 85 (let_binding)


state 65

  132 type_decl: TYPE IDENTIFIER . '=' type_expr
  133          | TYPE IDENTIFIER .
  135 type_args: IDENTIFIER .

    '='  shift, and go to state 142

    IDENTIFIER  reduce using rule 133 (type_decl)
    IDENTIFIER  [reduce using rule 135 (type_args)]
    '='         [reduce using rule 133 (type_decl)]
    '='         [reduce using rule 135 (type_args)]
    $default    reduce using rule 133 (type_decl)


state 66

  134 type_decl: TYPE type_args . '=' type_expr
  136 type_args: type_args . IDENTIFIER

    IDENTIFIER  shift, and go to state 143
    '='         shift, and go to state 144


state 67

  127 fstring: FSTRING_START fstring_parts . FSTRING_END
  129 fstring_parts: fstring_parts . fstring_part

    FSTRING_END           shift, and go to state 145
    FSTRING_INTERP_START  shift, and go to state 146
    FSTRING_TEXT          shift, and go to state 147

    fstring_part  go to state 148


state 68

    5 expr: 'yield' expr .
    6     | expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 5 (expr)]
    DOUBLE         [reduce using rule 5 (expr)]
    FLOAT          [reduce using rule 5 (expr)]
    IDENTIFIER     [reduce using rule 5 (expr)]
    TOK_STRING     [reduce using rule 5 (expr)]
    TOK_CHAR       [reduce using rule 5 (expr)]
    TRUE           [reduce using rule 5 (expr)]
    FALSE          [reduce using rule 5 (expr)]
    PIPE           [reduce using rule 5 (expr)]
    DOUBLE_COLON   [reduce using rule 5 (expr)]
    TOK_VOID       [reduce using rule 5 (expr)]
    DOUBLE_AT      [reduce using rule 5 (expr)]
    FSTRING_START  [reduce using rule 5 (expr)]
    DOUBLE_PIPE    [reduce using rule 5 (expr)]
    DOUBLE_AMP     [reduce using rule 5 (expr)]
    '>'            [reduce using rule 5 (expr)]
    '<'            [reduce using rule 5 (expr)]
    NE             [reduce using rule 5 (expr)]
    EQ             [reduce using rule 5 (expr)]
    LE             [reduce using rule 5 (expr)]
    GE             [reduce using rule 5 (expr)]
    '+'            [reduce using rule 5 (expr)]
    '-'            [reduce using rule 5 (expr)]
    '*'            [reduce using rule 5 (expr)]
    '/'            [reduce using rule 5 (expr)]
    MODULO         [reduce using rule 5 (expr)]
    ':'            [reduce using rule 5 (expr)]
    'to'           [reduce using rule 5 (expr)]
    '['            [reduce using rule 5 (expr)]
    '('            [reduce using rule 5 (expr)]
    $default       reduce using rule 5 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 69

   32 expr: 'for' IDENTIFIER . '=' expr IN expr

    '='  shift, and go to state 149


state 70

  109 array: '[' '|' . '|' ']'
  110      | '[' '|' . expr_list '|' ']'
  111      | '[' '|' . expr_list ',' '|' ']'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    '|'               shift, and go to state 150
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 46
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    expr_list    go to state 151
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 71

  106 list: '[' ']' .

    $default  reduce using rule 106 (list)


state 72

  107 list: '[' expr_list . ']'
  108     | '[' expr_list . ',' ']'
  118 expr_list: expr_list . ',' expr

    ']'  shift, and go to state 152
    ','  shift, and go to state 153


state 73

   41 simple_expr: IDENTIFIER .
   69 custom_binop: IDENTIFIER .

    ')'       reduce using rule 41 (simple_expr)
    ')'       [reduce using rule 69 (custom_binop)]
    $default  reduce using rule 41 (simple_expr)


state 74

   64 simple_expr: '(' PIPE . ')'

    ')'  shift, and go to state 154


state 75

   49 simple_expr: '(' FN . lambda_args ARROW expr_sequence ')'
   50            | '(' FN . TOK_VOID ARROW expr_sequence ')'
   89 lambda_expr: FN . lambda_args ARROW expr_sequence ';'
   90            | FN . TOK_VOID ARROW expr_sequence ';'
   91            | '(' FN . lambda_args ARROW expr_sequence ')'
   92            | '(' FN . TOK_VOID ARROW expr_sequence ')'

    IDENTIFIER  shift, and go to state 50
    TOK_VOID    shift, and go to state 155
    '('         shift, and go to state 52

    lambda_args      go to state 156
    lambda_arg       go to state 54
    list_match_expr  go to state 48


state 76

   66 simple_expr: '(' DOUBLE_COLON . ')'

    ')'  shift, and go to state 157


state 77

   59 simple_expr: '(' DOUBLE_PIPE . ')'

    ')'  shift, and go to state 158


state 78

   58 simple_expr: '(' DOUBLE_AMP . ')'

    ')'  shift, and go to state 159


state 79

   57 simple_expr: '(' '>' . ')'

    ')'  shift, and go to state 160


state 80

   56 simple_expr: '(' '<' . ')'

    ')'  shift, and go to state 161


state 81

   62 simple_expr: '(' NE . ')'

    ')'  shift, and go to state 162


state 82

   63 simple_expr: '(' EQ . ')'

    ')'  shift, and go to state 163


state 83

   61 simple_expr: '(' LE . ')'

    ')'  shift, and go to state 164


state 84

   60 simple_expr: '(' GE . ')'

    ')'  shift, and go to state 165


state 85

   51 simple_expr: '(' '+' . ')'

    ')'  shift, and go to state 166


state 86

   52 simple_expr: '(' '-' . ')'

    ')'  shift, and go to state 167


state 87

   53 simple_expr: '(' '*' . ')'

    ')'  shift, and go to state 168


state 88

   54 simple_expr: '(' '/' . ')'

    ')'  shift, and go to state 169


state 89

   55 simple_expr: '(' MODULO . ')'

    ')'  shift, and go to state 170


state 90

   65 simple_expr: '(' ':' . ')'

    ')'  shift, and go to state 171


state 91

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   70 expr_sequence: expr .
  114 tuple: '(' expr . ')'
  117 expr_list: expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116
    ')'            shift, and go to state 172

    ')'       [reduce using rule 70 (expr_sequence)]
    ')'       [reduce using rule 117 (expr_list)]
    ','       reduce using rule 117 (expr_list)
    $default  reduce using rule 70 (expr_sequence)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 92

   67 simple_expr: '(' custom_binop . ')'

    ')'  shift, and go to state 173


state 93

   48 simple_expr: '(' expr_sequence . ')'
   71 expr_sequence: expr_sequence . ';' expr

    ';'  shift, and go to state 174
    ')'  shift, and go to state 175


state 94

  115 tuple: '(' expr_list . ')'
  116      | '(' expr_list . ',' ')'
  118 expr_list: expr_list . ',' expr

    ')'  shift, and go to state 176
    ','  shift, and go to state 177


state 95

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
  120 match_expr: 'if' expr . THEN expr ELSE expr
  121           | 'if' expr . THEN expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    THEN           shift, and go to state 178
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 96

    0 $accept: program $end .

    $default  accept


state 97

   21 expr: expr PIPE . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 179
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 98

   24 expr: expr DOUBLE_COLON . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 180
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 99

    6 expr: expr DOUBLE_AT . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 181
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 100

   16 expr: expr DOUBLE_PIPE . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 182
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 101

   15 expr: expr DOUBLE_AMP . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 183
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 102

   14 expr: expr '>' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 184
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 103

   13 expr: expr '<' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 185
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 104

   19 expr: expr NE . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 186
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 105

   20 expr: expr EQ . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 187
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 106

   18 expr: expr LE . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 188
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 107

   17 expr: expr GE . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 189
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 108

    8 expr: expr '+' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 190
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 109

    9 expr: expr '-' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 191
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 110

   10 expr: expr '*' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 192
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 111

   11 expr: expr '/' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 193
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 112

   12 expr: expr MODULO . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 194
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 113

   22 expr: expr ':' . expr
   34     | expr ':' . '=' expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '='               shift, and go to state 195
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 196
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 114

   23 expr: expr 'to' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 197
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 115

   33 expr: expr '[' . expr ']'
  106 list: '[' . ']'
  107     | '[' . expr_list ']'
  108     | '[' . expr_list ',' ']'
  109 array: '[' . '|' '|' ']'
  110      | '[' . '|' expr_list '|' ']'
  111      | '[' . '|' expr_list ',' '|' ']'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    '|'               shift, and go to state 70
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    ']'               shift, and go to state 71
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 198
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    expr_list    go to state 72
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 116

   48 simple_expr: '(' . expr_sequence ')'
   49            | '(' . FN lambda_args ARROW expr_sequence ')'
   50            | '(' . FN TOK_VOID ARROW expr_sequence ')'
   51            | '(' . '+' ')'
   52            | '(' . '-' ')'
   53            | '(' . '*' ')'
   54            | '(' . '/' ')'
   55            | '(' . MODULO ')'
   56            | '(' . '<' ')'
   57            | '(' . '>' ')'
   58            | '(' . DOUBLE_AMP ')'
   59            | '(' . DOUBLE_PIPE ')'
   60            | '(' . GE ')'
   61            | '(' . LE ')'
   62            | '(' . NE ')'
   63            | '(' . EQ ')'
   64            | '(' . PIPE ')'
   65            | '(' . ':' ')'
   66            | '(' . DOUBLE_COLON ')'
   67            | '(' . custom_binop ')'
  114 tuple: '(' . expr ')'
  115      | '(' . expr_list ')'
  116      | '(' . expr_list ',' ')'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 73
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    PIPE              shift, and go to state 74
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 199
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    DOUBLE_COLON      shift, and go to state 76
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    DOUBLE_PIPE       shift, and go to state 77
    DOUBLE_AMP        shift, and go to state 78
    '>'               shift, and go to state 79
    '<'               shift, and go to state 80
    NE                shift, and go to state 81
    EQ                shift, and go to state 82
    LE                shift, and go to state 83
    GE                shift, and go to state 84
    '+'               shift, and go to state 85
    '-'               shift, and go to state 86
    '*'               shift, and go to state 87
    '/'               shift, and go to state 88
    MODULO            shift, and go to state 89
    ':'               shift, and go to state 90
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr           go to state 91
    simple_expr    go to state 29
    custom_binop   go to state 92
    expr_sequence  go to state 93
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    expr_list      go to state 94
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 117

    7 expr: expr simple_expr .
   68 simple_expr: simple_expr . '.' IDENTIFIER

    '.'  shift, and go to state 118

    $default  reduce using rule 7 (expr)


state 118

   68 simple_expr: simple_expr '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 200


state 119

    1 program: expr_sequence ';' .
   71 expr_sequence: expr_sequence ';' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    $default  reduce using rule 1 (program)

    expr         go to state 201
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 120

   80 let_binding: let_binding IN . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 202
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 121

  112 list_match_expr: IDENTIFIER DOUBLE_COLON . IDENTIFIER
  113                | IDENTIFIER DOUBLE_COLON . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 203
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 204
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 122

   88 let_binding: LET IDENTIFIER ':' . IDENTIFIER '=' lambda_expr

    IDENTIFIER  shift, and go to state 205


state 123

   73 let_binding: LET IDENTIFIER '=' . expr
   74            | LET IDENTIFIER '=' . EXTERN FN fn_signature

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    EXTERN            shift, and go to state 206
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 207
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 124

   79 let_binding: LET TOK_VOID '=' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 208
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 125

   72 let_binding: LET TEST_ID '=' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 209
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 126

   76 let_binding: LET MUT lambda_arg . '=' expr

    '='  shift, and go to state 210


state 127

   78 let_binding: LET MUT expr_list . '=' expr
  118 expr_list: expr_list . ',' expr

    '='  shift, and go to state 211
    ','  shift, and go to state 132


state 128

   41 simple_expr: IDENTIFIER .
   69 custom_binop: IDENTIFIER .
   82 let_binding: LET '(' IDENTIFIER . ')' '=' lambda_expr
   83            | LET '(' IDENTIFIER . ')' '=' expr

    ')'  shift, and go to state 212

    ')'       [reduce using rule 41 (simple_expr)]
    ')'       [reduce using rule 69 (custom_binop)]
    $default  reduce using rule 41 (simple_expr)


state 129

  104 lambda_arg: '(' expr_list . ')'
  115 tuple: '(' expr_list . ')'
  116      | '(' expr_list . ',' ')'
  118 expr_list: expr_list . ',' expr

    ')'  shift, and go to state 213
    ','  shift, and go to state 177


state 130

   75 let_binding: LET lambda_arg '=' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 214
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 131

   77 let_binding: LET expr_list '=' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 215
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 132

  118 expr_list: expr_list ',' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 216
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 133

   90 lambda_expr: FN TOK_VOID ARROW . expr_sequence ';'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr           go to state 28
    simple_expr    go to state 29
    expr_sequence  go to state 217
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 134

  104 lambda_arg: '(' expr_list . ')'
  118 expr_list: expr_list . ',' expr

    ')'  shift, and go to state 218
    ','  shift, and go to state 132


state 135

   89 lambda_expr: FN lambda_args ARROW . expr_sequence ';'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr           go to state 28
    simple_expr    go to state 29
    expr_sequence  go to state 219
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 136

   97 lambda_args: lambda_args lambda_arg .
   98            | lambda_args lambda_arg . '=' expr
  101            | lambda_args lambda_arg .
  102            | lambda_args lambda_arg . ':' '(' type_expr ')'

    ':'  shift, and go to state 220
    '='  shift, and go to state 221

    IDENTIFIER  reduce using rule 97 (lambda_args)
    IDENTIFIER  [reduce using rule 101 (lambda_args)]
    ARROW       reduce using rule 97 (lambda_args)
    ARROW       [reduce using rule 101 (lambda_args)]
    '('         reduce using rule 97 (lambda_args)
    '('         [reduce using rule 101 (lambda_args)]
    $default    reduce using rule 97 (lambda_args)


state 137

  100 lambda_args: lambda_arg ':' . '(' type_expr ')'

    '('  shift, and go to state 222


state 138

   96 lambda_args: lambda_arg '=' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 223
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 139

   71 expr_sequence: expr_sequence ';' . expr
   94 lambda_expr: MODULE expr_sequence ';' .

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    INTEGER        [reduce using rule 94 (lambda_expr)]
    DOUBLE         [reduce using rule 94 (lambda_expr)]
    FLOAT          [reduce using rule 94 (lambda_expr)]
    IDENTIFIER     [reduce using rule 94 (lambda_expr)]
    TOK_STRING     [reduce using rule 94 (lambda_expr)]
    TOK_CHAR       [reduce using rule 94 (lambda_expr)]
    TRUE           [reduce using rule 94 (lambda_expr)]
    FALSE          [reduce using rule 94 (lambda_expr)]
    TOK_VOID       [reduce using rule 94 (lambda_expr)]
    FSTRING_START  [reduce using rule 94 (lambda_expr)]
    '['            [reduce using rule 94 (lambda_expr)]
    '('            [reduce using rule 94 (lambda_expr)]
    'if'           [reduce using rule 94 (lambda_expr)]
    $default       reduce using rule 94 (lambda_expr)

    expr         go to state 201
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 140

   93 lambda_expr: MODULE lambda_args ARROW . expr_sequence ';'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr           go to state 28
    simple_expr    go to state 29
    expr_sequence  go to state 224
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 141

  119 match_expr: MATCH expr WITH . match_branches

    '|'  shift, and go to state 225

    match_branches  go to state 226


state 142

  132 type_decl: TYPE IDENTIFIER '=' . type_expr

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '|'         shift, and go to state 229
    '('         shift, and go to state 230

    fn_signature  go to state 231
    tuple_type    go to state 232
    type_expr     go to state 233
    type_atom     go to state 234


state 143

  136 type_args: type_args IDENTIFIER .

    $default  reduce using rule 136 (type_args)


state 144

  134 type_decl: TYPE type_args '=' . type_expr

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '|'         shift, and go to state 229
    '('         shift, and go to state 230

    fn_signature  go to state 231
    tuple_type    go to state 232
    type_expr     go to state 235
    type_atom     go to state 234


state 145

  127 fstring: FSTRING_START fstring_parts FSTRING_END .

    $default  reduce using rule 127 (fstring)


state 146

  131 fstring_part: FSTRING_INTERP_START . expr FSTRING_INTERP_END

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 236
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 147

  130 fstring_part: FSTRING_TEXT .

    $default  reduce using rule 130 (fstring_part)


state 148

  129 fstring_parts: fstring_parts fstring_part .

    $default  reduce using rule 129 (fstring_parts)


state 149

   32 expr: 'for' IDENTIFIER '=' . expr IN expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 237
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 150

  109 array: '[' '|' '|' . ']'

    ']'  shift, and go to state 238


state 151

  110 array: '[' '|' expr_list . '|' ']'
  111      | '[' '|' expr_list . ',' '|' ']'
  118 expr_list: expr_list . ',' expr

    '|'  shift, and go to state 239
    ','  shift, and go to state 240


state 152

  107 list: '[' expr_list ']' .

    $default  reduce using rule 107 (list)


state 153

  108 list: '[' expr_list ',' . ']'
  118 expr_list: expr_list ',' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    ']'               shift, and go to state 241
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 216
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 154

   64 simple_expr: '(' PIPE ')' .

    $default  reduce using rule 64 (simple_expr)


state 155

   50 simple_expr: '(' FN TOK_VOID . ARROW expr_sequence ')'
   90 lambda_expr: FN TOK_VOID . ARROW expr_sequence ';'
   92            | '(' FN TOK_VOID . ARROW expr_sequence ')'

    ARROW  shift, and go to state 242


state 156

   49 simple_expr: '(' FN lambda_args . ARROW expr_sequence ')'
   89 lambda_expr: FN lambda_args . ARROW expr_sequence ';'
   91            | '(' FN lambda_args . ARROW expr_sequence ')'
   97 lambda_args: lambda_args . lambda_arg
   98            | lambda_args . lambda_arg '=' expr
  101            | lambda_args . lambda_arg
  102            | lambda_args . lambda_arg ':' '(' type_expr ')'

    IDENTIFIER  shift, and go to state 50
    ARROW       shift, and go to state 243
    '('         shift, and go to state 52

    lambda_arg       go to state 136
    list_match_expr  go to state 48


state 157

   66 simple_expr: '(' DOUBLE_COLON ')' .

    $default  reduce using rule 66 (simple_expr)


state 158

   59 simple_expr: '(' DOUBLE_PIPE ')' .

    $default  reduce using rule 59 (simple_expr)


state 159

   58 simple_expr: '(' DOUBLE_AMP ')' .

    $default  reduce using rule 58 (simple_expr)


state 160

   57 simple_expr: '(' '>' ')' .

    $default  reduce using rule 57 (simple_expr)


state 161

   56 simple_expr: '(' '<' ')' .

    $default  reduce using rule 56 (simple_expr)


state 162

   62 simple_expr: '(' NE ')' .

    $default  reduce using rule 62 (simple_expr)


state 163

   63 simple_expr: '(' EQ ')' .

    $default  reduce using rule 63 (simple_expr)


state 164

   61 simple_expr: '(' LE ')' .

    $default  reduce using rule 61 (simple_expr)


state 165

   60 simple_expr: '(' GE ')' .

    $default  reduce using rule 60 (simple_expr)


state 166

   51 simple_expr: '(' '+' ')' .

    $default  reduce using rule 51 (simple_expr)


state 167

   52 simple_expr: '(' '-' ')' .

    $default  reduce using rule 52 (simple_expr)


state 168

   53 simple_expr: '(' '*' ')' .

    $default  reduce using rule 53 (simple_expr)


state 169

   54 simple_expr: '(' '/' ')' .

    $default  reduce using rule 54 (simple_expr)


state 170

   55 simple_expr: '(' MODULO ')' .

    $default  reduce using rule 55 (simple_expr)


state 171

   65 simple_expr: '(' ':' ')' .

    $default  reduce using rule 65 (simple_expr)


state 172

  114 tuple: '(' expr ')' .

    $default  reduce using rule 114 (tuple)


state 173

   67 simple_expr: '(' custom_binop ')' .

    $default  reduce using rule 67 (simple_expr)


state 174

   71 expr_sequence: expr_sequence ';' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 201
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 175

   48 simple_expr: '(' expr_sequence ')' .

    $default  reduce using rule 48 (simple_expr)


state 176

  115 tuple: '(' expr_list ')' .

    $default  reduce using rule 115 (tuple)


state 177

  116 tuple: '(' expr_list ',' . ')'
  118 expr_list: expr_list ',' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    ')'               shift, and go to state 244
    'if'              shift, and go to state 26

    expr         go to state 216
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 178

  120 match_expr: 'if' expr THEN . expr ELSE expr
  121           | 'if' expr THEN . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 245
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 179

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   21     | expr PIPE expr .
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 21 (expr)]
    DOUBLE         [reduce using rule 21 (expr)]
    FLOAT          [reduce using rule 21 (expr)]
    IDENTIFIER     [reduce using rule 21 (expr)]
    TOK_STRING     [reduce using rule 21 (expr)]
    TOK_CHAR       [reduce using rule 21 (expr)]
    TRUE           [reduce using rule 21 (expr)]
    FALSE          [reduce using rule 21 (expr)]
    DOUBLE_COLON   [reduce using rule 21 (expr)]
    TOK_VOID       [reduce using rule 21 (expr)]
    FSTRING_START  [reduce using rule 21 (expr)]
    'to'           [reduce using rule 21 (expr)]
    '['            [reduce using rule 21 (expr)]
    '('            [reduce using rule 21 (expr)]
    $default       reduce using rule 21 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 180

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   24     | expr DOUBLE_COLON expr .
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 24 (expr)]
    DOUBLE         [reduce using rule 24 (expr)]
    FLOAT          [reduce using rule 24 (expr)]
    IDENTIFIER     [reduce using rule 24 (expr)]
    TOK_STRING     [reduce using rule 24 (expr)]
    TOK_CHAR       [reduce using rule 24 (expr)]
    TRUE           [reduce using rule 24 (expr)]
    FALSE          [reduce using rule 24 (expr)]
    PIPE           [reduce using rule 24 (expr)]
    DOUBLE_COLON   [reduce using rule 24 (expr)]
    TOK_VOID       [reduce using rule 24 (expr)]
    DOUBLE_AT      [reduce using rule 24 (expr)]
    FSTRING_START  [reduce using rule 24 (expr)]
    DOUBLE_PIPE    [reduce using rule 24 (expr)]
    DOUBLE_AMP     [reduce using rule 24 (expr)]
    '>'            [reduce using rule 24 (expr)]
    '<'            [reduce using rule 24 (expr)]
    NE             [reduce using rule 24 (expr)]
    EQ             [reduce using rule 24 (expr)]
    LE             [reduce using rule 24 (expr)]
    GE             [reduce using rule 24 (expr)]
    '+'            [reduce using rule 24 (expr)]
    '-'            [reduce using rule 24 (expr)]
    '*'            [reduce using rule 24 (expr)]
    '/'            [reduce using rule 24 (expr)]
    MODULO         [reduce using rule 24 (expr)]
    ':'            [reduce using rule 24 (expr)]
    'to'           [reduce using rule 24 (expr)]
    '['            [reduce using rule 24 (expr)]
    '('            [reduce using rule 24 (expr)]
    $default       reduce using rule 24 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 181

    6 expr: expr . DOUBLE_AT expr
    6     | expr DOUBLE_AT expr .
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 6 (expr)]
    DOUBLE         [reduce using rule 6 (expr)]
    FLOAT          [reduce using rule 6 (expr)]
    IDENTIFIER     [reduce using rule 6 (expr)]
    TOK_STRING     [reduce using rule 6 (expr)]
    TOK_CHAR       [reduce using rule 6 (expr)]
    TRUE           [reduce using rule 6 (expr)]
    FALSE          [reduce using rule 6 (expr)]
    DOUBLE_COLON   [reduce using rule 6 (expr)]
    TOK_VOID       [reduce using rule 6 (expr)]
    FSTRING_START  [reduce using rule 6 (expr)]
    'to'           [reduce using rule 6 (expr)]
    '['            [reduce using rule 6 (expr)]
    '('            [reduce using rule 6 (expr)]
    $default       reduce using rule 6 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 182

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   16     | expr DOUBLE_PIPE expr .
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 16 (expr)]
    DOUBLE         [reduce using rule 16 (expr)]
    FLOAT          [reduce using rule 16 (expr)]
    IDENTIFIER     [reduce using rule 16 (expr)]
    TOK_STRING     [reduce using rule 16 (expr)]
    TOK_CHAR       [reduce using rule 16 (expr)]
    TRUE           [reduce using rule 16 (expr)]
    FALSE          [reduce using rule 16 (expr)]
    DOUBLE_COLON   [reduce using rule 16 (expr)]
    TOK_VOID       [reduce using rule 16 (expr)]
    FSTRING_START  [reduce using rule 16 (expr)]
    'to'           [reduce using rule 16 (expr)]
    '['            [reduce using rule 16 (expr)]
    '('            [reduce using rule 16 (expr)]
    $default       reduce using rule 16 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 183

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   15     | expr DOUBLE_AMP expr .
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 15 (expr)]
    DOUBLE         [reduce using rule 15 (expr)]
    FLOAT          [reduce using rule 15 (expr)]
    IDENTIFIER     [reduce using rule 15 (expr)]
    TOK_STRING     [reduce using rule 15 (expr)]
    TOK_CHAR       [reduce using rule 15 (expr)]
    TRUE           [reduce using rule 15 (expr)]
    FALSE          [reduce using rule 15 (expr)]
    DOUBLE_COLON   [reduce using rule 15 (expr)]
    TOK_VOID       [reduce using rule 15 (expr)]
    FSTRING_START  [reduce using rule 15 (expr)]
    'to'           [reduce using rule 15 (expr)]
    '['            [reduce using rule 15 (expr)]
    '('            [reduce using rule 15 (expr)]
    $default       reduce using rule 15 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 184

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   14     | expr '>' expr .
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 14 (expr)]
    DOUBLE         [reduce using rule 14 (expr)]
    FLOAT          [reduce using rule 14 (expr)]
    IDENTIFIER     [reduce using rule 14 (expr)]
    TOK_STRING     [reduce using rule 14 (expr)]
    TOK_CHAR       [reduce using rule 14 (expr)]
    TRUE           [reduce using rule 14 (expr)]
    FALSE          [reduce using rule 14 (expr)]
    DOUBLE_COLON   [reduce using rule 14 (expr)]
    TOK_VOID       [reduce using rule 14 (expr)]
    FSTRING_START  [reduce using rule 14 (expr)]
    'to'           [reduce using rule 14 (expr)]
    '['            [reduce using rule 14 (expr)]
    '('            [reduce using rule 14 (expr)]
    $default       reduce using rule 14 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 185

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   13     | expr '<' expr .
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 13 (expr)]
    DOUBLE         [reduce using rule 13 (expr)]
    FLOAT          [reduce using rule 13 (expr)]
    IDENTIFIER     [reduce using rule 13 (expr)]
    TOK_STRING     [reduce using rule 13 (expr)]
    TOK_CHAR       [reduce using rule 13 (expr)]
    TRUE           [reduce using rule 13 (expr)]
    FALSE          [reduce using rule 13 (expr)]
    DOUBLE_COLON   [reduce using rule 13 (expr)]
    TOK_VOID       [reduce using rule 13 (expr)]
    FSTRING_START  [reduce using rule 13 (expr)]
    'to'           [reduce using rule 13 (expr)]
    '['            [reduce using rule 13 (expr)]
    '('            [reduce using rule 13 (expr)]
    $default       reduce using rule 13 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 186

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   19     | expr NE expr .
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 19 (expr)]
    DOUBLE         [reduce using rule 19 (expr)]
    FLOAT          [reduce using rule 19 (expr)]
    IDENTIFIER     [reduce using rule 19 (expr)]
    TOK_STRING     [reduce using rule 19 (expr)]
    TOK_CHAR       [reduce using rule 19 (expr)]
    TRUE           [reduce using rule 19 (expr)]
    FALSE          [reduce using rule 19 (expr)]
    DOUBLE_COLON   [reduce using rule 19 (expr)]
    TOK_VOID       [reduce using rule 19 (expr)]
    FSTRING_START  [reduce using rule 19 (expr)]
    'to'           [reduce using rule 19 (expr)]
    '['            [reduce using rule 19 (expr)]
    '('            [reduce using rule 19 (expr)]
    $default       reduce using rule 19 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 187

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   20     | expr EQ expr .
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 20 (expr)]
    DOUBLE         [reduce using rule 20 (expr)]
    FLOAT          [reduce using rule 20 (expr)]
    IDENTIFIER     [reduce using rule 20 (expr)]
    TOK_STRING     [reduce using rule 20 (expr)]
    TOK_CHAR       [reduce using rule 20 (expr)]
    TRUE           [reduce using rule 20 (expr)]
    FALSE          [reduce using rule 20 (expr)]
    DOUBLE_COLON   [reduce using rule 20 (expr)]
    TOK_VOID       [reduce using rule 20 (expr)]
    FSTRING_START  [reduce using rule 20 (expr)]
    'to'           [reduce using rule 20 (expr)]
    '['            [reduce using rule 20 (expr)]
    '('            [reduce using rule 20 (expr)]
    $default       reduce using rule 20 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 188

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   18     | expr LE expr .
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 18 (expr)]
    DOUBLE         [reduce using rule 18 (expr)]
    FLOAT          [reduce using rule 18 (expr)]
    IDENTIFIER     [reduce using rule 18 (expr)]
    TOK_STRING     [reduce using rule 18 (expr)]
    TOK_CHAR       [reduce using rule 18 (expr)]
    TRUE           [reduce using rule 18 (expr)]
    FALSE          [reduce using rule 18 (expr)]
    DOUBLE_COLON   [reduce using rule 18 (expr)]
    TOK_VOID       [reduce using rule 18 (expr)]
    FSTRING_START  [reduce using rule 18 (expr)]
    'to'           [reduce using rule 18 (expr)]
    '['            [reduce using rule 18 (expr)]
    '('            [reduce using rule 18 (expr)]
    $default       reduce using rule 18 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 189

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   17     | expr GE expr .
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 17 (expr)]
    DOUBLE         [reduce using rule 17 (expr)]
    FLOAT          [reduce using rule 17 (expr)]
    IDENTIFIER     [reduce using rule 17 (expr)]
    TOK_STRING     [reduce using rule 17 (expr)]
    TOK_CHAR       [reduce using rule 17 (expr)]
    TRUE           [reduce using rule 17 (expr)]
    FALSE          [reduce using rule 17 (expr)]
    DOUBLE_COLON   [reduce using rule 17 (expr)]
    TOK_VOID       [reduce using rule 17 (expr)]
    FSTRING_START  [reduce using rule 17 (expr)]
    'to'           [reduce using rule 17 (expr)]
    '['            [reduce using rule 17 (expr)]
    '('            [reduce using rule 17 (expr)]
    $default       reduce using rule 17 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 190

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    8     | expr '+' expr .
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 8 (expr)]
    DOUBLE         [reduce using rule 8 (expr)]
    FLOAT          [reduce using rule 8 (expr)]
    IDENTIFIER     [reduce using rule 8 (expr)]
    TOK_STRING     [reduce using rule 8 (expr)]
    TOK_CHAR       [reduce using rule 8 (expr)]
    TRUE           [reduce using rule 8 (expr)]
    FALSE          [reduce using rule 8 (expr)]
    DOUBLE_COLON   [reduce using rule 8 (expr)]
    TOK_VOID       [reduce using rule 8 (expr)]
    FSTRING_START  [reduce using rule 8 (expr)]
    'to'           [reduce using rule 8 (expr)]
    '['            [reduce using rule 8 (expr)]
    '('            [reduce using rule 8 (expr)]
    $default       reduce using rule 8 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 191

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
    9     | expr '-' expr .
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 9 (expr)]
    DOUBLE         [reduce using rule 9 (expr)]
    FLOAT          [reduce using rule 9 (expr)]
    IDENTIFIER     [reduce using rule 9 (expr)]
    TOK_STRING     [reduce using rule 9 (expr)]
    TOK_CHAR       [reduce using rule 9 (expr)]
    TRUE           [reduce using rule 9 (expr)]
    FALSE          [reduce using rule 9 (expr)]
    DOUBLE_COLON   [reduce using rule 9 (expr)]
    TOK_VOID       [reduce using rule 9 (expr)]
    FSTRING_START  [reduce using rule 9 (expr)]
    'to'           [reduce using rule 9 (expr)]
    '['            [reduce using rule 9 (expr)]
    '('            [reduce using rule 9 (expr)]
    $default       reduce using rule 9 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 192

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   10     | expr '*' expr .
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 10 (expr)]
    DOUBLE         [reduce using rule 10 (expr)]
    FLOAT          [reduce using rule 10 (expr)]
    IDENTIFIER     [reduce using rule 10 (expr)]
    TOK_STRING     [reduce using rule 10 (expr)]
    TOK_CHAR       [reduce using rule 10 (expr)]
    TRUE           [reduce using rule 10 (expr)]
    FALSE          [reduce using rule 10 (expr)]
    DOUBLE_COLON   [reduce using rule 10 (expr)]
    TOK_VOID       [reduce using rule 10 (expr)]
    FSTRING_START  [reduce using rule 10 (expr)]
    'to'           [reduce using rule 10 (expr)]
    '['            [reduce using rule 10 (expr)]
    '('            [reduce using rule 10 (expr)]
    $default       reduce using rule 10 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 193

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   11     | expr '/' expr .
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 11 (expr)]
    DOUBLE         [reduce using rule 11 (expr)]
    FLOAT          [reduce using rule 11 (expr)]
    IDENTIFIER     [reduce using rule 11 (expr)]
    TOK_STRING     [reduce using rule 11 (expr)]
    TOK_CHAR       [reduce using rule 11 (expr)]
    TRUE           [reduce using rule 11 (expr)]
    FALSE          [reduce using rule 11 (expr)]
    DOUBLE_COLON   [reduce using rule 11 (expr)]
    TOK_VOID       [reduce using rule 11 (expr)]
    FSTRING_START  [reduce using rule 11 (expr)]
    'to'           [reduce using rule 11 (expr)]
    '['            [reduce using rule 11 (expr)]
    '('            [reduce using rule 11 (expr)]
    $default       reduce using rule 11 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 194

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   12     | expr MODULO expr .
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 12 (expr)]
    DOUBLE         [reduce using rule 12 (expr)]
    FLOAT          [reduce using rule 12 (expr)]
    IDENTIFIER     [reduce using rule 12 (expr)]
    TOK_STRING     [reduce using rule 12 (expr)]
    TOK_CHAR       [reduce using rule 12 (expr)]
    TRUE           [reduce using rule 12 (expr)]
    FALSE          [reduce using rule 12 (expr)]
    DOUBLE_COLON   [reduce using rule 12 (expr)]
    TOK_VOID       [reduce using rule 12 (expr)]
    FSTRING_START  [reduce using rule 12 (expr)]
    'to'           [reduce using rule 12 (expr)]
    '['            [reduce using rule 12 (expr)]
    '('            [reduce using rule 12 (expr)]
    $default       reduce using rule 12 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 195

   34 expr: expr ':' '=' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 246
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 196

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   22     | expr ':' expr .
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    FSTRING_START  shift, and go to state 21
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 22 (expr)]
    DOUBLE         [reduce using rule 22 (expr)]
    FLOAT          [reduce using rule 22 (expr)]
    IDENTIFIER     [reduce using rule 22 (expr)]
    TOK_STRING     [reduce using rule 22 (expr)]
    TOK_CHAR       [reduce using rule 22 (expr)]
    TRUE           [reduce using rule 22 (expr)]
    FALSE          [reduce using rule 22 (expr)]
    DOUBLE_COLON   [reduce using rule 22 (expr)]
    TOK_VOID       [reduce using rule 22 (expr)]
    FSTRING_START  [reduce using rule 22 (expr)]
    'to'           [reduce using rule 22 (expr)]
    '['            [reduce using rule 22 (expr)]
    '('            [reduce using rule 22 (expr)]
    $default       reduce using rule 22 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 197

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   23     | expr 'to' expr .
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 23 (expr)]
    DOUBLE         [reduce using rule 23 (expr)]
    FLOAT          [reduce using rule 23 (expr)]
    IDENTIFIER     [reduce using rule 23 (expr)]
    TOK_STRING     [reduce using rule 23 (expr)]
    TOK_CHAR       [reduce using rule 23 (expr)]
    TRUE           [reduce using rule 23 (expr)]
    FALSE          [reduce using rule 23 (expr)]
    PIPE           [reduce using rule 23 (expr)]
    DOUBLE_COLON   [reduce using rule 23 (expr)]
    TOK_VOID       [reduce using rule 23 (expr)]
    DOUBLE_AT      [reduce using rule 23 (expr)]
    FSTRING_START  [reduce using rule 23 (expr)]
    DOUBLE_PIPE    [reduce using rule 23 (expr)]
    DOUBLE_AMP     [reduce using rule 23 (expr)]
    '>'            [reduce using rule 23 (expr)]
    '<'            [reduce using rule 23 (expr)]
    NE             [reduce using rule 23 (expr)]
    EQ             [reduce using rule 23 (expr)]
    LE             [reduce using rule 23 (expr)]
    GE             [reduce using rule 23 (expr)]
    '+'            [reduce using rule 23 (expr)]
    '-'            [reduce using rule 23 (expr)]
    '*'            [reduce using rule 23 (expr)]
    '/'            [reduce using rule 23 (expr)]
    MODULO         [reduce using rule 23 (expr)]
    ':'            [reduce using rule 23 (expr)]
    'to'           [reduce using rule 23 (expr)]
    '['            [reduce using rule 23 (expr)]
    '('            [reduce using rule 23 (expr)]
    $default       reduce using rule 23 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 198

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   33     | expr '[' expr . ']'
   34     | expr . ':' '=' expr
  117 expr_list: expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    ']'            shift, and go to state 247
    '('            shift, and go to state 116

    ']'       [reduce using rule 117 (expr_list)]
    $default  reduce using rule 117 (expr_list)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 199

   49 simple_expr: '(' FN . lambda_args ARROW expr_sequence ')'
   50            | '(' FN . TOK_VOID ARROW expr_sequence ')'
   89 lambda_expr: FN . lambda_args ARROW expr_sequence ';'
   90            | FN . TOK_VOID ARROW expr_sequence ';'

    IDENTIFIER  shift, and go to state 50
    TOK_VOID    shift, and go to state 248
    '('         shift, and go to state 52

    lambda_args      go to state 249
    lambda_arg       go to state 54
    list_match_expr  go to state 48


state 200

   68 simple_expr: simple_expr '.' IDENTIFIER .

    $default  reduce using rule 68 (simple_expr)


state 201

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   71 expr_sequence: expr_sequence ';' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    $default  reduce using rule 71 (expr_sequence)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 202

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   80 let_binding: let_binding IN expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 80 (let_binding)]
    DOUBLE         [reduce using rule 80 (let_binding)]
    FLOAT          [reduce using rule 80 (let_binding)]
    IDENTIFIER     [reduce using rule 80 (let_binding)]
    TOK_STRING     [reduce using rule 80 (let_binding)]
    TOK_CHAR       [reduce using rule 80 (let_binding)]
    TRUE           [reduce using rule 80 (let_binding)]
    FALSE          [reduce using rule 80 (let_binding)]
    PIPE           [reduce using rule 80 (let_binding)]
    DOUBLE_COLON   [reduce using rule 80 (let_binding)]
    TOK_VOID       [reduce using rule 80 (let_binding)]
    DOUBLE_AT      [reduce using rule 80 (let_binding)]
    FSTRING_START  [reduce using rule 80 (let_binding)]
    DOUBLE_PIPE    [reduce using rule 80 (let_binding)]
    DOUBLE_AMP     [reduce using rule 80 (let_binding)]
    '>'            [reduce using rule 80 (let_binding)]
    '<'            [reduce using rule 80 (let_binding)]
    NE             [reduce using rule 80 (let_binding)]
    EQ             [reduce using rule 80 (let_binding)]
    LE             [reduce using rule 80 (let_binding)]
    GE             [reduce using rule 80 (let_binding)]
    '+'            [reduce using rule 80 (let_binding)]
    '-'            [reduce using rule 80 (let_binding)]
    '*'            [reduce using rule 80 (let_binding)]
    '/'            [reduce using rule 80 (let_binding)]
    MODULO         [reduce using rule 80 (let_binding)]
    ':'            [reduce using rule 80 (let_binding)]
    'to'           [reduce using rule 80 (let_binding)]
    '['            [reduce using rule 80 (let_binding)]
    '('            [reduce using rule 80 (let_binding)]
    $default       reduce using rule 80 (let_binding)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 203

   41 simple_expr: IDENTIFIER .
  112 list_match_expr: IDENTIFIER DOUBLE_COLON IDENTIFIER .

    IDENTIFIER  reduce using rule 41 (simple_expr)
    IDENTIFIER  [reduce using rule 112 (list_match_expr)]
    ARROW       reduce using rule 41 (simple_expr)
    ARROW       [reduce using rule 112 (list_match_expr)]
    ':'         reduce using rule 41 (simple_expr)
    ':'         [reduce using rule 112 (list_match_expr)]
    '='         reduce using rule 41 (simple_expr)
    '='         [reduce using rule 112 (list_match_expr)]
    '('         reduce using rule 41 (simple_expr)
    '('         [reduce using rule 112 (list_match_expr)]
    $default    reduce using rule 41 (simple_expr)


state 204

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
  113 list_match_expr: IDENTIFIER DOUBLE_COLON expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    IDENTIFIER  [reduce using rule 113 (list_match_expr)]
    ':'         [reduce using rule 113 (list_match_expr)]
    '('         [reduce using rule 113 (list_match_expr)]
    $default    reduce using rule 113 (list_match_expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 205

   88 let_binding: LET IDENTIFIER ':' IDENTIFIER . '=' lambda_expr

    '='  shift, and go to state 250


state 206

   74 let_binding: LET IDENTIFIER '=' EXTERN . FN fn_signature

    FN  shift, and go to state 251


state 207

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   73 let_binding: LET IDENTIFIER '=' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 73 (let_binding)]
    DOUBLE         [reduce using rule 73 (let_binding)]
    FLOAT          [reduce using rule 73 (let_binding)]
    IDENTIFIER     [reduce using rule 73 (let_binding)]
    TOK_STRING     [reduce using rule 73 (let_binding)]
    TOK_CHAR       [reduce using rule 73 (let_binding)]
    TRUE           [reduce using rule 73 (let_binding)]
    FALSE          [reduce using rule 73 (let_binding)]
    PIPE           [reduce using rule 73 (let_binding)]
    DOUBLE_COLON   [reduce using rule 73 (let_binding)]
    TOK_VOID       [reduce using rule 73 (let_binding)]
    DOUBLE_AT      [reduce using rule 73 (let_binding)]
    FSTRING_START  [reduce using rule 73 (let_binding)]
    DOUBLE_PIPE    [reduce using rule 73 (let_binding)]
    DOUBLE_AMP     [reduce using rule 73 (let_binding)]
    '>'            [reduce using rule 73 (let_binding)]
    '<'            [reduce using rule 73 (let_binding)]
    NE             [reduce using rule 73 (let_binding)]
    EQ             [reduce using rule 73 (let_binding)]
    LE             [reduce using rule 73 (let_binding)]
    GE             [reduce using rule 73 (let_binding)]
    '+'            [reduce using rule 73 (let_binding)]
    '-'            [reduce using rule 73 (let_binding)]
    '*'            [reduce using rule 73 (let_binding)]
    '/'            [reduce using rule 73 (let_binding)]
    MODULO         [reduce using rule 73 (let_binding)]
    ':'            [reduce using rule 73 (let_binding)]
    'to'           [reduce using rule 73 (let_binding)]
    '['            [reduce using rule 73 (let_binding)]
    '('            [reduce using rule 73 (let_binding)]
    $default       reduce using rule 73 (let_binding)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 208

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   79 let_binding: LET TOK_VOID '=' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 79 (let_binding)]
    DOUBLE         [reduce using rule 79 (let_binding)]
    FLOAT          [reduce using rule 79 (let_binding)]
    IDENTIFIER     [reduce using rule 79 (let_binding)]
    TOK_STRING     [reduce using rule 79 (let_binding)]
    TOK_CHAR       [reduce using rule 79 (let_binding)]
    TRUE           [reduce using rule 79 (let_binding)]
    FALSE          [reduce using rule 79 (let_binding)]
    PIPE           [reduce using rule 79 (let_binding)]
    DOUBLE_COLON   [reduce using rule 79 (let_binding)]
    TOK_VOID       [reduce using rule 79 (let_binding)]
    DOUBLE_AT      [reduce using rule 79 (let_binding)]
    FSTRING_START  [reduce using rule 79 (let_binding)]
    DOUBLE_PIPE    [reduce using rule 79 (let_binding)]
    DOUBLE_AMP     [reduce using rule 79 (let_binding)]
    '>'            [reduce using rule 79 (let_binding)]
    '<'            [reduce using rule 79 (let_binding)]
    NE             [reduce using rule 79 (let_binding)]
    EQ             [reduce using rule 79 (let_binding)]
    LE             [reduce using rule 79 (let_binding)]
    GE             [reduce using rule 79 (let_binding)]
    '+'            [reduce using rule 79 (let_binding)]
    '-'            [reduce using rule 79 (let_binding)]
    '*'            [reduce using rule 79 (let_binding)]
    '/'            [reduce using rule 79 (let_binding)]
    MODULO         [reduce using rule 79 (let_binding)]
    ':'            [reduce using rule 79 (let_binding)]
    'to'           [reduce using rule 79 (let_binding)]
    '['            [reduce using rule 79 (let_binding)]
    '('            [reduce using rule 79 (let_binding)]
    $default       reduce using rule 79 (let_binding)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 209

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   72 let_binding: LET TEST_ID '=' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 72 (let_binding)]
    DOUBLE         [reduce using rule 72 (let_binding)]
    FLOAT          [reduce using rule 72 (let_binding)]
    IDENTIFIER     [reduce using rule 72 (let_binding)]
    TOK_STRING     [reduce using rule 72 (let_binding)]
    TOK_CHAR       [reduce using rule 72 (let_binding)]
    TRUE           [reduce using rule 72 (let_binding)]
    FALSE          [reduce using rule 72 (let_binding)]
    PIPE           [reduce using rule 72 (let_binding)]
    DOUBLE_COLON   [reduce using rule 72 (let_binding)]
    TOK_VOID       [reduce using rule 72 (let_binding)]
    DOUBLE_AT      [reduce using rule 72 (let_binding)]
    FSTRING_START  [reduce using rule 72 (let_binding)]
    DOUBLE_PIPE    [reduce using rule 72 (let_binding)]
    DOUBLE_AMP     [reduce using rule 72 (let_binding)]
    '>'            [reduce using rule 72 (let_binding)]
    '<'            [reduce using rule 72 (let_binding)]
    NE             [reduce using rule 72 (let_binding)]
    EQ             [reduce using rule 72 (let_binding)]
    LE             [reduce using rule 72 (let_binding)]
    GE             [reduce using rule 72 (let_binding)]
    '+'            [reduce using rule 72 (let_binding)]
    '-'            [reduce using rule 72 (let_binding)]
    '*'            [reduce using rule 72 (let_binding)]
    '/'            [reduce using rule 72 (let_binding)]
    MODULO         [reduce using rule 72 (let_binding)]
    ':'            [reduce using rule 72 (let_binding)]
    'to'           [reduce using rule 72 (let_binding)]
    '['            [reduce using rule 72 (let_binding)]
    '('            [reduce using rule 72 (let_binding)]
    $default       reduce using rule 72 (let_binding)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 210

   76 let_binding: LET MUT lambda_arg '=' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 252
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 211

   78 let_binding: LET MUT expr_list '=' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 253
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 212

   82 let_binding: LET '(' IDENTIFIER ')' . '=' lambda_expr
   83            | LET '(' IDENTIFIER ')' . '=' expr

    '='  shift, and go to state 254


state 213

  104 lambda_arg: '(' expr_list ')' .
  115 tuple: '(' expr_list ')' .

    IDENTIFIER  reduce using rule 104 (lambda_arg)
    IDENTIFIER  [reduce using rule 115 (tuple)]
    ARROW       reduce using rule 104 (lambda_arg)
    ':'         reduce using rule 104 (lambda_arg)
    ':'         [reduce using rule 115 (tuple)]
    '='         reduce using rule 104 (lambda_arg)
    '='         [reduce using rule 115 (tuple)]
    '('         reduce using rule 104 (lambda_arg)
    '('         [reduce using rule 115 (tuple)]
    $default    reduce using rule 115 (tuple)


state 214

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   75 let_binding: LET lambda_arg '=' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 75 (let_binding)]
    DOUBLE         [reduce using rule 75 (let_binding)]
    FLOAT          [reduce using rule 75 (let_binding)]
    IDENTIFIER     [reduce using rule 75 (let_binding)]
    TOK_STRING     [reduce using rule 75 (let_binding)]
    TOK_CHAR       [reduce using rule 75 (let_binding)]
    TRUE           [reduce using rule 75 (let_binding)]
    FALSE          [reduce using rule 75 (let_binding)]
    PIPE           [reduce using rule 75 (let_binding)]
    DOUBLE_COLON   [reduce using rule 75 (let_binding)]
    TOK_VOID       [reduce using rule 75 (let_binding)]
    DOUBLE_AT      [reduce using rule 75 (let_binding)]
    FSTRING_START  [reduce using rule 75 (let_binding)]
    DOUBLE_PIPE    [reduce using rule 75 (let_binding)]
    DOUBLE_AMP     [reduce using rule 75 (let_binding)]
    '>'            [reduce using rule 75 (let_binding)]
    '<'            [reduce using rule 75 (let_binding)]
    NE             [reduce using rule 75 (let_binding)]
    EQ             [reduce using rule 75 (let_binding)]
    LE             [reduce using rule 75 (let_binding)]
    GE             [reduce using rule 75 (let_binding)]
    '+'            [reduce using rule 75 (let_binding)]
    '-'            [reduce using rule 75 (let_binding)]
    '*'            [reduce using rule 75 (let_binding)]
    '/'            [reduce using rule 75 (let_binding)]
    MODULO         [reduce using rule 75 (let_binding)]
    ':'            [reduce using rule 75 (let_binding)]
    'to'           [reduce using rule 75 (let_binding)]
    '['            [reduce using rule 75 (let_binding)]
    '('            [reduce using rule 75 (let_binding)]
    $default       reduce using rule 75 (let_binding)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 215

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   77 let_binding: LET expr_list '=' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 77 (let_binding)]
    DOUBLE         [reduce using rule 77 (let_binding)]
    FLOAT          [reduce using rule 77 (let_binding)]
    IDENTIFIER     [reduce using rule 77 (let_binding)]
    TOK_STRING     [reduce using rule 77 (let_binding)]
    TOK_CHAR       [reduce using rule 77 (let_binding)]
    TRUE           [reduce using rule 77 (let_binding)]
    FALSE          [reduce using rule 77 (let_binding)]
    PIPE           [reduce using rule 77 (let_binding)]
    DOUBLE_COLON   [reduce using rule 77 (let_binding)]
    TOK_VOID       [reduce using rule 77 (let_binding)]
    DOUBLE_AT      [reduce using rule 77 (let_binding)]
    FSTRING_START  [reduce using rule 77 (let_binding)]
    DOUBLE_PIPE    [reduce using rule 77 (let_binding)]
    DOUBLE_AMP     [reduce using rule 77 (let_binding)]
    '>'            [reduce using rule 77 (let_binding)]
    '<'            [reduce using rule 77 (let_binding)]
    NE             [reduce using rule 77 (let_binding)]
    EQ             [reduce using rule 77 (let_binding)]
    LE             [reduce using rule 77 (let_binding)]
    GE             [reduce using rule 77 (let_binding)]
    '+'            [reduce using rule 77 (let_binding)]
    '-'            [reduce using rule 77 (let_binding)]
    '*'            [reduce using rule 77 (let_binding)]
    '/'            [reduce using rule 77 (let_binding)]
    MODULO         [reduce using rule 77 (let_binding)]
    ':'            [reduce using rule 77 (let_binding)]
    'to'           [reduce using rule 77 (let_binding)]
    '['            [reduce using rule 77 (let_binding)]
    '('            [reduce using rule 77 (let_binding)]
    $default       reduce using rule 77 (let_binding)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 216

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
  118 expr_list: expr_list ',' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    $default  reduce using rule 118 (expr_list)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 217

   71 expr_sequence: expr_sequence . ';' expr
   90 lambda_expr: FN TOK_VOID ARROW expr_sequence . ';'

    ';'  shift, and go to state 255


state 218

  104 lambda_arg: '(' expr_list ')' .

    $default  reduce using rule 104 (lambda_arg)


state 219

   71 expr_sequence: expr_sequence . ';' expr
   89 lambda_expr: FN lambda_args ARROW expr_sequence . ';'

    ';'  shift, and go to state 256


state 220

  102 lambda_args: lambda_args lambda_arg ':' . '(' type_expr ')'

    '('  shift, and go to state 257


state 221

   98 lambda_args: lambda_args lambda_arg '=' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 258
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 222

  100 lambda_args: lambda_arg ':' '(' . type_expr ')'

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '|'         shift, and go to state 229
    '('         shift, and go to state 230

    fn_signature  go to state 231
    tuple_type    go to state 232
    type_expr     go to state 259
    type_atom     go to state 234


state 223

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   96 lambda_args: lambda_arg '=' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    IDENTIFIER  [reduce using rule 96 (lambda_args)]
    '('         [reduce using rule 96 (lambda_args)]
    $default    reduce using rule 96 (lambda_args)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 224

   71 expr_sequence: expr_sequence . ';' expr
   93 lambda_expr: MODULE lambda_args ARROW expr_sequence . ';'

    ';'  shift, and go to state 260


state 225

  124 match_branches: '|' . match_test_clause ARROW expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr               go to state 261
    simple_expr        go to state 29
    let_binding        go to state 31
    lambda_expr        go to state 32
    list               go to state 33
    array              go to state 34
    tuple              go to state 35
    match_expr         go to state 36
    match_test_clause  go to state 262
    fstring            go to state 37
    type_decl          go to state 38


state 226

  119 match_expr: MATCH expr WITH match_branches .
  125 match_branches: match_branches . '|' match_test_clause ARROW expr
  126               | match_branches . '|' '_' ARROW expr

    '|'  shift, and go to state 263

    '|'       [reduce using rule 119 (match_expr)]
    $default  reduce using rule 119 (match_expr)


state 227

  146 type_atom: IDENTIFIER .
  147          | IDENTIFIER . '=' INTEGER
  148          | IDENTIFIER . 'of' type_atom
  149          | IDENTIFIER . ':' type_atom
  152          | IDENTIFIER . '.' IDENTIFIER

    ':'   shift, and go to state 264
    '.'   shift, and go to state 265
    '='   shift, and go to state 266
    'of'  shift, and go to state 267

    ':'       [reduce using rule 146 (type_atom)]
    '='       [reduce using rule 146 (type_atom)]
    $default  reduce using rule 146 (type_atom)


state 228

  151 type_atom: TOK_VOID .

    $default  reduce using rule 151 (type_atom)


state 229

  142 type_expr: '|' . type_atom

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '('         shift, and go to state 230

    type_atom  go to state 268


state 230

  150 type_atom: '(' . type_expr ')'

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '|'         shift, and go to state 229
    '('         shift, and go to state 230

    fn_signature  go to state 231
    tuple_type    go to state 232
    type_expr     go to state 269
    type_atom     go to state 234


state 231

  138 fn_signature: fn_signature . ARROW type_expr
  144 type_expr: fn_signature .

    ARROW  shift, and go to state 270

    ARROW     [reduce using rule 144 (type_expr)]
    $default  reduce using rule 144 (type_expr)


state 232

  140 tuple_type: tuple_type . ',' type_atom
  145 type_expr: tuple_type .

    ','  shift, and go to state 271

    ','       [reduce using rule 145 (type_expr)]
    $default  reduce using rule 145 (type_expr)


state 233

  132 type_decl: TYPE IDENTIFIER '=' type_expr .
  137 fn_signature: type_expr . ARROW type_expr
  143 type_expr: type_expr . '|' type_atom

    ARROW  shift, and go to state 272
    '|'    shift, and go to state 273

    ARROW     [reduce using rule 132 (type_decl)]
    '|'       [reduce using rule 132 (type_decl)]
    $default  reduce using rule 132 (type_decl)


state 234

  139 tuple_type: type_atom . ',' type_atom
  141 type_expr: type_atom .

    ','  shift, and go to state 274

    ','       [reduce using rule 141 (type_expr)]
    $default  reduce using rule 141 (type_expr)


state 235

  134 type_decl: TYPE type_args '=' type_expr .
  137 fn_signature: type_expr . ARROW type_expr
  143 type_expr: type_expr . '|' type_atom

    ARROW  shift, and go to state 272
    '|'    shift, and go to state 273

    ARROW     [reduce using rule 134 (type_decl)]
    '|'       [reduce using rule 134 (type_decl)]
    $default  reduce using rule 134 (type_decl)


state 236

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
  131 fstring_part: FSTRING_INTERP_START expr . FSTRING_INTERP_END

    INTEGER             shift, and go to state 1
    DOUBLE              shift, and go to state 2
    FLOAT               shift, and go to state 3
    IDENTIFIER          shift, and go to state 4
    TOK_STRING          shift, and go to state 7
    TOK_CHAR            shift, and go to state 8
    TRUE                shift, and go to state 9
    FALSE               shift, and go to state 10
    PIPE                shift, and go to state 97
    DOUBLE_COLON        shift, and go to state 98
    TOK_VOID            shift, and go to state 16
    DOUBLE_AT           shift, and go to state 99
    FSTRING_START       shift, and go to state 21
    FSTRING_INTERP_END  shift, and go to state 275
    DOUBLE_PIPE         shift, and go to state 100
    DOUBLE_AMP          shift, and go to state 101
    '>'                 shift, and go to state 102
    '<'                 shift, and go to state 103
    NE                  shift, and go to state 104
    EQ                  shift, and go to state 105
    LE                  shift, and go to state 106
    GE                  shift, and go to state 107
    '+'                 shift, and go to state 108
    '-'                 shift, and go to state 109
    '*'                 shift, and go to state 110
    '/'                 shift, and go to state 111
    MODULO              shift, and go to state 112
    ':'                 shift, and go to state 113
    'to'                shift, and go to state 114
    '['                 shift, and go to state 115
    '('                 shift, and go to state 116

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 237

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   32     | 'for' IDENTIFIER '=' expr . IN expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    IN             shift, and go to state 276
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 238

  109 array: '[' '|' '|' ']' .

    $default  reduce using rule 109 (array)


state 239

  110 array: '[' '|' expr_list '|' . ']'

    ']'  shift, and go to state 277


state 240

  111 array: '[' '|' expr_list ',' . '|' ']'
  118 expr_list: expr_list ',' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    '|'               shift, and go to state 278
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 216
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 241

  108 list: '[' expr_list ',' ']' .

    $default  reduce using rule 108 (list)


state 242

   50 simple_expr: '(' FN TOK_VOID ARROW . expr_sequence ')'
   90 lambda_expr: FN TOK_VOID ARROW . expr_sequence ';'
   92            | '(' FN TOK_VOID ARROW . expr_sequence ')'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr           go to state 28
    simple_expr    go to state 29
    expr_sequence  go to state 279
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 243

   49 simple_expr: '(' FN lambda_args ARROW . expr_sequence ')'
   89 lambda_expr: FN lambda_args ARROW . expr_sequence ';'
   91            | '(' FN lambda_args ARROW . expr_sequence ')'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr           go to state 28
    simple_expr    go to state 29
    expr_sequence  go to state 280
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 244

  116 tuple: '(' expr_list ',' ')' .

    $default  reduce using rule 116 (tuple)


state 245

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
  120 match_expr: 'if' expr THEN expr . ELSE expr
  121           | 'if' expr THEN expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    ELSE           shift, and go to state 281
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 121 (match_expr)]
    DOUBLE         [reduce using rule 121 (match_expr)]
    FLOAT          [reduce using rule 121 (match_expr)]
    IDENTIFIER     [reduce using rule 121 (match_expr)]
    TOK_STRING     [reduce using rule 121 (match_expr)]
    TOK_CHAR       [reduce using rule 121 (match_expr)]
    TRUE           [reduce using rule 121 (match_expr)]
    FALSE          [reduce using rule 121 (match_expr)]
    PIPE           [reduce using rule 121 (match_expr)]
    DOUBLE_COLON   [reduce using rule 121 (match_expr)]
    TOK_VOID       [reduce using rule 121 (match_expr)]
    DOUBLE_AT      [reduce using rule 121 (match_expr)]
    ELSE           [reduce using rule 121 (match_expr)]
    FSTRING_START  [reduce using rule 121 (match_expr)]
    DOUBLE_PIPE    [reduce using rule 121 (match_expr)]
    DOUBLE_AMP     [reduce using rule 121 (match_expr)]
    '>'            [reduce using rule 121 (match_expr)]
    '<'            [reduce using rule 121 (match_expr)]
    NE             [reduce using rule 121 (match_expr)]
    EQ             [reduce using rule 121 (match_expr)]
    LE             [reduce using rule 121 (match_expr)]
    GE             [reduce using rule 121 (match_expr)]
    '+'            [reduce using rule 121 (match_expr)]
    '-'            [reduce using rule 121 (match_expr)]
    '*'            [reduce using rule 121 (match_expr)]
    '/'            [reduce using rule 121 (match_expr)]
    MODULO         [reduce using rule 121 (match_expr)]
    ':'            [reduce using rule 121 (match_expr)]
    'to'           [reduce using rule 121 (match_expr)]
    '['            [reduce using rule 121 (match_expr)]
    '('            [reduce using rule 121 (match_expr)]
    $default       reduce using rule 121 (match_expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 246

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   34     | expr ':' '=' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 34 (expr)]
    DOUBLE         [reduce using rule 34 (expr)]
    FLOAT          [reduce using rule 34 (expr)]
    IDENTIFIER     [reduce using rule 34 (expr)]
    TOK_STRING     [reduce using rule 34 (expr)]
    TOK_CHAR       [reduce using rule 34 (expr)]
    TRUE           [reduce using rule 34 (expr)]
    FALSE          [reduce using rule 34 (expr)]
    PIPE           [reduce using rule 34 (expr)]
    DOUBLE_COLON   [reduce using rule 34 (expr)]
    TOK_VOID       [reduce using rule 34 (expr)]
    DOUBLE_AT      [reduce using rule 34 (expr)]
    FSTRING_START  [reduce using rule 34 (expr)]
    DOUBLE_PIPE    [reduce using rule 34 (expr)]
    DOUBLE_AMP     [reduce using rule 34 (expr)]
    '>'            [reduce using rule 34 (expr)]
    '<'            [reduce using rule 34 (expr)]
    NE             [reduce using rule 34 (expr)]
    EQ             [reduce using rule 34 (expr)]
    LE             [reduce using rule 34 (expr)]
    GE             [reduce using rule 34 (expr)]
    '+'            [reduce using rule 34 (expr)]
    '-'            [reduce using rule 34 (expr)]
    '*'            [reduce using rule 34 (expr)]
    '/'            [reduce using rule 34 (expr)]
    MODULO         [reduce using rule 34 (expr)]
    ':'            [reduce using rule 34 (expr)]
    'to'           [reduce using rule 34 (expr)]
    '['            [reduce using rule 34 (expr)]
    '('            [reduce using rule 34 (expr)]
    $default       reduce using rule 34 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 247

   33 expr: expr '[' expr ']' .

    $default  reduce using rule 33 (expr)


state 248

   50 simple_expr: '(' FN TOK_VOID . ARROW expr_sequence ')'
   90 lambda_expr: FN TOK_VOID . ARROW expr_sequence ';'

    ARROW  shift, and go to state 282


state 249

   49 simple_expr: '(' FN lambda_args . ARROW expr_sequence ')'
   89 lambda_expr: FN lambda_args . ARROW expr_sequence ';'
   97 lambda_args: lambda_args . lambda_arg
   98            | lambda_args . lambda_arg '=' expr
  101            | lambda_args . lambda_arg
  102            | lambda_args . lambda_arg ':' '(' type_expr ')'

    IDENTIFIER  shift, and go to state 50
    ARROW       shift, and go to state 283
    '('         shift, and go to state 52

    lambda_arg       go to state 136
    list_match_expr  go to state 48


state 250

   88 let_binding: LET IDENTIFIER ':' IDENTIFIER '=' . lambda_expr

    FN      shift, and go to state 13
    MODULE  shift, and go to state 14
    '('     shift, and go to state 284

    lambda_expr  go to state 285


state 251

   74 let_binding: LET IDENTIFIER '=' EXTERN FN . fn_signature

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '|'         shift, and go to state 229
    '('         shift, and go to state 230

    fn_signature  go to state 286
    tuple_type    go to state 232
    type_expr     go to state 287
    type_atom     go to state 234


state 252

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   76 let_binding: LET MUT lambda_arg '=' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 76 (let_binding)]
    DOUBLE         [reduce using rule 76 (let_binding)]
    FLOAT          [reduce using rule 76 (let_binding)]
    IDENTIFIER     [reduce using rule 76 (let_binding)]
    TOK_STRING     [reduce using rule 76 (let_binding)]
    TOK_CHAR       [reduce using rule 76 (let_binding)]
    TRUE           [reduce using rule 76 (let_binding)]
    FALSE          [reduce using rule 76 (let_binding)]
    PIPE           [reduce using rule 76 (let_binding)]
    DOUBLE_COLON   [reduce using rule 76 (let_binding)]
    TOK_VOID       [reduce using rule 76 (let_binding)]
    DOUBLE_AT      [reduce using rule 76 (let_binding)]
    FSTRING_START  [reduce using rule 76 (let_binding)]
    DOUBLE_PIPE    [reduce using rule 76 (let_binding)]
    DOUBLE_AMP     [reduce using rule 76 (let_binding)]
    '>'            [reduce using rule 76 (let_binding)]
    '<'            [reduce using rule 76 (let_binding)]
    NE             [reduce using rule 76 (let_binding)]
    EQ             [reduce using rule 76 (let_binding)]
    LE             [reduce using rule 76 (let_binding)]
    GE             [reduce using rule 76 (let_binding)]
    '+'            [reduce using rule 76 (let_binding)]
    '-'            [reduce using rule 76 (let_binding)]
    '*'            [reduce using rule 76 (let_binding)]
    '/'            [reduce using rule 76 (let_binding)]
    MODULO         [reduce using rule 76 (let_binding)]
    ':'            [reduce using rule 76 (let_binding)]
    'to'           [reduce using rule 76 (let_binding)]
    '['            [reduce using rule 76 (let_binding)]
    '('            [reduce using rule 76 (let_binding)]
    $default       reduce using rule 76 (let_binding)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 253

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   78 let_binding: LET MUT expr_list '=' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 78 (let_binding)]
    DOUBLE         [reduce using rule 78 (let_binding)]
    FLOAT          [reduce using rule 78 (let_binding)]
    IDENTIFIER     [reduce using rule 78 (let_binding)]
    TOK_STRING     [reduce using rule 78 (let_binding)]
    TOK_CHAR       [reduce using rule 78 (let_binding)]
    TRUE           [reduce using rule 78 (let_binding)]
    FALSE          [reduce using rule 78 (let_binding)]
    PIPE           [reduce using rule 78 (let_binding)]
    DOUBLE_COLON   [reduce using rule 78 (let_binding)]
    TOK_VOID       [reduce using rule 78 (let_binding)]
    DOUBLE_AT      [reduce using rule 78 (let_binding)]
    FSTRING_START  [reduce using rule 78 (let_binding)]
    DOUBLE_PIPE    [reduce using rule 78 (let_binding)]
    DOUBLE_AMP     [reduce using rule 78 (let_binding)]
    '>'            [reduce using rule 78 (let_binding)]
    '<'            [reduce using rule 78 (let_binding)]
    NE             [reduce using rule 78 (let_binding)]
    EQ             [reduce using rule 78 (let_binding)]
    LE             [reduce using rule 78 (let_binding)]
    GE             [reduce using rule 78 (let_binding)]
    '+'            [reduce using rule 78 (let_binding)]
    '-'            [reduce using rule 78 (let_binding)]
    '*'            [reduce using rule 78 (let_binding)]
    '/'            [reduce using rule 78 (let_binding)]
    MODULO         [reduce using rule 78 (let_binding)]
    ':'            [reduce using rule 78 (let_binding)]
    'to'           [reduce using rule 78 (let_binding)]
    '['            [reduce using rule 78 (let_binding)]
    '('            [reduce using rule 78 (let_binding)]
    $default       reduce using rule 78 (let_binding)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 254

   82 let_binding: LET '(' IDENTIFIER ')' '=' . lambda_expr
   83            | LET '(' IDENTIFIER ')' '=' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 288
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 289
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 255

   71 expr_sequence: expr_sequence ';' . expr
   90 lambda_expr: FN TOK_VOID ARROW expr_sequence ';' .

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    INTEGER        [reduce using rule 90 (lambda_expr)]
    DOUBLE         [reduce using rule 90 (lambda_expr)]
    FLOAT          [reduce using rule 90 (lambda_expr)]
    IDENTIFIER     [reduce using rule 90 (lambda_expr)]
    TOK_STRING     [reduce using rule 90 (lambda_expr)]
    TOK_CHAR       [reduce using rule 90 (lambda_expr)]
    TRUE           [reduce using rule 90 (lambda_expr)]
    FALSE          [reduce using rule 90 (lambda_expr)]
    TOK_VOID       [reduce using rule 90 (lambda_expr)]
    FSTRING_START  [reduce using rule 90 (lambda_expr)]
    '['            [reduce using rule 90 (lambda_expr)]
    '('            [reduce using rule 90 (lambda_expr)]
    'if'           [reduce using rule 90 (lambda_expr)]
    $default       reduce using rule 90 (lambda_expr)

    expr         go to state 201
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 256

   71 expr_sequence: expr_sequence ';' . expr
   89 lambda_expr: FN lambda_args ARROW expr_sequence ';' .

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    INTEGER        [reduce using rule 89 (lambda_expr)]
    DOUBLE         [reduce using rule 89 (lambda_expr)]
    FLOAT          [reduce using rule 89 (lambda_expr)]
    IDENTIFIER     [reduce using rule 89 (lambda_expr)]
    TOK_STRING     [reduce using rule 89 (lambda_expr)]
    TOK_CHAR       [reduce using rule 89 (lambda_expr)]
    TRUE           [reduce using rule 89 (lambda_expr)]
    FALSE          [reduce using rule 89 (lambda_expr)]
    TOK_VOID       [reduce using rule 89 (lambda_expr)]
    FSTRING_START  [reduce using rule 89 (lambda_expr)]
    '['            [reduce using rule 89 (lambda_expr)]
    '('            [reduce using rule 89 (lambda_expr)]
    'if'           [reduce using rule 89 (lambda_expr)]
    $default       reduce using rule 89 (lambda_expr)

    expr         go to state 201
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 257

  102 lambda_args: lambda_args lambda_arg ':' '(' . type_expr ')'

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '|'         shift, and go to state 229
    '('         shift, and go to state 230

    fn_signature  go to state 231
    tuple_type    go to state 232
    type_expr     go to state 290
    type_atom     go to state 234


state 258

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   98 lambda_args: lambda_args lambda_arg '=' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    IDENTIFIER  [reduce using rule 98 (lambda_args)]
    '('         [reduce using rule 98 (lambda_args)]
    $default    reduce using rule 98 (lambda_args)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 259

  100 lambda_args: lambda_arg ':' '(' type_expr . ')'
  137 fn_signature: type_expr . ARROW type_expr
  143 type_expr: type_expr . '|' type_atom

    ARROW  shift, and go to state 272
    '|'    shift, and go to state 273
    ')'    shift, and go to state 291


state 260

   71 expr_sequence: expr_sequence ';' . expr
   93 lambda_expr: MODULE lambda_args ARROW expr_sequence ';' .

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    INTEGER        [reduce using rule 93 (lambda_expr)]
    DOUBLE         [reduce using rule 93 (lambda_expr)]
    FLOAT          [reduce using rule 93 (lambda_expr)]
    IDENTIFIER     [reduce using rule 93 (lambda_expr)]
    TOK_STRING     [reduce using rule 93 (lambda_expr)]
    TOK_CHAR       [reduce using rule 93 (lambda_expr)]
    TRUE           [reduce using rule 93 (lambda_expr)]
    FALSE          [reduce using rule 93 (lambda_expr)]
    TOK_VOID       [reduce using rule 93 (lambda_expr)]
    FSTRING_START  [reduce using rule 93 (lambda_expr)]
    '['            [reduce using rule 93 (lambda_expr)]
    '('            [reduce using rule 93 (lambda_expr)]
    'if'           [reduce using rule 93 (lambda_expr)]
    $default       reduce using rule 93 (lambda_expr)

    expr         go to state 201
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 261

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
  122 match_test_clause: expr .
  123                  | expr . 'if' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116
    'if'           shift, and go to state 292

    $default  reduce using rule 122 (match_test_clause)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 262

  124 match_branches: '|' match_test_clause . ARROW expr

    ARROW  shift, and go to state 293


state 263

  125 match_branches: match_branches '|' . match_test_clause ARROW expr
  126               | match_branches '|' . '_' ARROW expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26
    '_'               shift, and go to state 294

    expr               go to state 261
    simple_expr        go to state 29
    let_binding        go to state 31
    lambda_expr        go to state 32
    list               go to state 33
    array              go to state 34
    tuple              go to state 35
    match_expr         go to state 36
    match_test_clause  go to state 295
    fstring            go to state 37
    type_decl          go to state 38


state 264

  149 type_atom: IDENTIFIER ':' . type_atom

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '('         shift, and go to state 230

    type_atom  go to state 296


state 265

  152 type_atom: IDENTIFIER '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 297


state 266

  147 type_atom: IDENTIFIER '=' . INTEGER

    INTEGER  shift, and go to state 298


state 267

  148 type_atom: IDENTIFIER 'of' . type_atom

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '('         shift, and go to state 230

    type_atom  go to state 299


state 268

  142 type_expr: '|' type_atom .

    $default  reduce using rule 142 (type_expr)


state 269

  137 fn_signature: type_expr . ARROW type_expr
  143 type_expr: type_expr . '|' type_atom
  150 type_atom: '(' type_expr . ')'

    ARROW  shift, and go to state 272
    '|'    shift, and go to state 273
    ')'    shift, and go to state 300


state 270

  138 fn_signature: fn_signature ARROW . type_expr

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '|'         shift, and go to state 229
    '('         shift, and go to state 230

    fn_signature  go to state 231
    tuple_type    go to state 232
    type_expr     go to state 301
    type_atom     go to state 234


state 271

  140 tuple_type: tuple_type ',' . type_atom

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '('         shift, and go to state 230

    type_atom  go to state 302


state 272

  137 fn_signature: type_expr ARROW . type_expr

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '|'         shift, and go to state 229
    '('         shift, and go to state 230

    fn_signature  go to state 231
    tuple_type    go to state 232
    type_expr     go to state 303
    type_atom     go to state 234


state 273

  143 type_expr: type_expr '|' . type_atom

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '('         shift, and go to state 230

    type_atom  go to state 304


state 274

  139 tuple_type: type_atom ',' . type_atom

    IDENTIFIER  shift, and go to state 227
    TOK_VOID    shift, and go to state 228
    '('         shift, and go to state 230

    type_atom  go to state 305


state 275

  131 fstring_part: FSTRING_INTERP_START expr FSTRING_INTERP_END .

    $default  reduce using rule 131 (fstring_part)


state 276

   32 expr: 'for' IDENTIFIER '=' expr IN . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 306
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 277

  110 array: '[' '|' expr_list '|' ']' .

    $default  reduce using rule 110 (array)


state 278

  111 array: '[' '|' expr_list ',' '|' . ']'

    ']'  shift, and go to state 307


state 279

   50 simple_expr: '(' FN TOK_VOID ARROW expr_sequence . ')'
   71 expr_sequence: expr_sequence . ';' expr
   90 lambda_expr: FN TOK_VOID ARROW expr_sequence . ';'
   92            | '(' FN TOK_VOID ARROW expr_sequence . ')'

    ';'  shift, and go to state 255
    ')'  shift, and go to state 308


state 280

   49 simple_expr: '(' FN lambda_args ARROW expr_sequence . ')'
   71 expr_sequence: expr_sequence . ';' expr
   89 lambda_expr: FN lambda_args ARROW expr_sequence . ';'
   91            | '(' FN lambda_args ARROW expr_sequence . ')'

    ';'  shift, and go to state 256
    ')'  shift, and go to state 309


state 281

  120 match_expr: 'if' expr THEN expr ELSE . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 310
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 282

   50 simple_expr: '(' FN TOK_VOID ARROW . expr_sequence ')'
   90 lambda_expr: FN TOK_VOID ARROW . expr_sequence ';'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr           go to state 28
    simple_expr    go to state 29
    expr_sequence  go to state 311
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 283

   49 simple_expr: '(' FN lambda_args ARROW . expr_sequence ')'
   89 lambda_expr: FN lambda_args ARROW . expr_sequence ';'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr           go to state 28
    simple_expr    go to state 29
    expr_sequence  go to state 312
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 284

   91 lambda_expr: '(' . FN lambda_args ARROW expr_sequence ')'
   92            | '(' . FN TOK_VOID ARROW expr_sequence ')'

    FN  shift, and go to state 313


state 285

   88 let_binding: LET IDENTIFIER ':' IDENTIFIER '=' lambda_expr .

    $default  reduce using rule 88 (let_binding)


state 286

   74 let_binding: LET IDENTIFIER '=' EXTERN FN fn_signature .
  138 fn_signature: fn_signature . ARROW type_expr
  144 type_expr: fn_signature .

    ARROW  shift, and go to state 270

    ARROW     [reduce using rule 74 (let_binding)]
    ARROW     [reduce using rule 144 (type_expr)]
    '|'       reduce using rule 74 (let_binding)
    '|'       [reduce using rule 144 (type_expr)]
    $default  reduce using rule 74 (let_binding)


state 287

  137 fn_signature: type_expr . ARROW type_expr
  143 type_expr: type_expr . '|' type_atom

    ARROW  shift, and go to state 272
    '|'    shift, and go to state 273


state 288

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
   83 let_binding: LET '(' IDENTIFIER ')' '=' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 83 (let_binding)]
    DOUBLE         [reduce using rule 83 (let_binding)]
    FLOAT          [reduce using rule 83 (let_binding)]
    IDENTIFIER     [reduce using rule 83 (let_binding)]
    TOK_STRING     [reduce using rule 83 (let_binding)]
    TOK_CHAR       [reduce using rule 83 (let_binding)]
    TRUE           [reduce using rule 83 (let_binding)]
    FALSE          [reduce using rule 83 (let_binding)]
    PIPE           [reduce using rule 83 (let_binding)]
    DOUBLE_COLON   [reduce using rule 83 (let_binding)]
    TOK_VOID       [reduce using rule 83 (let_binding)]
    DOUBLE_AT      [reduce using rule 83 (let_binding)]
    FSTRING_START  [reduce using rule 83 (let_binding)]
    DOUBLE_PIPE    [reduce using rule 83 (let_binding)]
    DOUBLE_AMP     [reduce using rule 83 (let_binding)]
    '>'            [reduce using rule 83 (let_binding)]
    '<'            [reduce using rule 83 (let_binding)]
    NE             [reduce using rule 83 (let_binding)]
    EQ             [reduce using rule 83 (let_binding)]
    LE             [reduce using rule 83 (let_binding)]
    GE             [reduce using rule 83 (let_binding)]
    '+'            [reduce using rule 83 (let_binding)]
    '-'            [reduce using rule 83 (let_binding)]
    '*'            [reduce using rule 83 (let_binding)]
    '/'            [reduce using rule 83 (let_binding)]
    MODULO         [reduce using rule 83 (let_binding)]
    ':'            [reduce using rule 83 (let_binding)]
    'to'           [reduce using rule 83 (let_binding)]
    '['            [reduce using rule 83 (let_binding)]
    '('            [reduce using rule 83 (let_binding)]
    $default       reduce using rule 83 (let_binding)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 289

   81 let_binding: lambda_expr .
   82            | LET '(' IDENTIFIER ')' '=' lambda_expr .

    $end                reduce using rule 81 (let_binding)
    $end                [reduce using rule 82 (let_binding)]
    INTEGER             reduce using rule 81 (let_binding)
    INTEGER             [reduce using rule 82 (let_binding)]
    DOUBLE              reduce using rule 81 (let_binding)
    DOUBLE              [reduce using rule 82 (let_binding)]
    FLOAT               reduce using rule 81 (let_binding)
    FLOAT               [reduce using rule 82 (let_binding)]
    IDENTIFIER          reduce using rule 81 (let_binding)
    IDENTIFIER          [reduce using rule 82 (let_binding)]
    TOK_STRING          reduce using rule 81 (let_binding)
    TOK_STRING          [reduce using rule 82 (let_binding)]
    TOK_CHAR            reduce using rule 81 (let_binding)
    TOK_CHAR            [reduce using rule 82 (let_binding)]
    TRUE                reduce using rule 81 (let_binding)
    TRUE                [reduce using rule 82 (let_binding)]
    FALSE               reduce using rule 81 (let_binding)
    FALSE               [reduce using rule 82 (let_binding)]
    PIPE                reduce using rule 81 (let_binding)
    PIPE                [reduce using rule 82 (let_binding)]
    WITH                reduce using rule 81 (let_binding)
    WITH                [reduce using rule 82 (let_binding)]
    ARROW               reduce using rule 81 (let_binding)
    ARROW               [reduce using rule 82 (let_binding)]
    DOUBLE_COLON        reduce using rule 81 (let_binding)
    DOUBLE_COLON        [reduce using rule 82 (let_binding)]
    TOK_VOID            reduce using rule 81 (let_binding)
    TOK_VOID            [reduce using rule 82 (let_binding)]
    IN                  reduce using rule 81 (let_binding)
    IN                  [reduce using rule 82 (let_binding)]
    DOUBLE_AT           reduce using rule 81 (let_binding)
    DOUBLE_AT           [reduce using rule 82 (let_binding)]
    THEN                reduce using rule 81 (let_binding)
    THEN                [reduce using rule 82 (let_binding)]
    ELSE                reduce using rule 81 (let_binding)
    ELSE                [reduce using rule 82 (let_binding)]
    FSTRING_START       reduce using rule 81 (let_binding)
    FSTRING_START       [reduce using rule 82 (let_binding)]
    FSTRING_INTERP_END  reduce using rule 81 (let_binding)
    FSTRING_INTERP_END  [reduce using rule 82 (let_binding)]
    '|'                 reduce using rule 81 (let_binding)
    '|'                 [reduce using rule 82 (let_binding)]
    DOUBLE_PIPE         reduce using rule 81 (let_binding)
    DOUBLE_PIPE         [reduce using rule 82 (let_binding)]
    DOUBLE_AMP          reduce using rule 81 (let_binding)
    DOUBLE_AMP          [reduce using rule 82 (let_binding)]
    '>'                 reduce using rule 81 (let_binding)
    '>'                 [reduce using rule 82 (let_binding)]
    '<'                 reduce using rule 81 (let_binding)
    '<'                 [reduce using rule 82 (let_binding)]
    NE                  reduce using rule 81 (let_binding)
    NE                  [reduce using rule 82 (let_binding)]
    EQ                  reduce using rule 81 (let_binding)
    EQ                  [reduce using rule 82 (let_binding)]
    LE                  reduce using rule 81 (let_binding)
    LE                  [reduce using rule 82 (let_binding)]
    GE                  reduce using rule 81 (let_binding)
    GE                  [reduce using rule 82 (let_binding)]
    '+'                 reduce using rule 81 (let_binding)
    '+'                 [reduce using rule 82 (let_binding)]
    '-'                 reduce using rule 81 (let_binding)
    '-'                 [reduce using rule 82 (let_binding)]
    '*'                 reduce using rule 81 (let_binding)
    '*'                 [reduce using rule 82 (let_binding)]
    '/'                 reduce using rule 81 (let_binding)
    '/'                 [reduce using rule 82 (let_binding)]
    MODULO              reduce using rule 81 (let_binding)
    MODULO              [reduce using rule 82 (let_binding)]
    ':'                 reduce using rule 81 (let_binding)
    ':'                 [reduce using rule 82 (let_binding)]
    ';'                 reduce using rule 81 (let_binding)
    ';'                 [reduce using rule 82 (let_binding)]
    'to'                reduce using rule 81 (let_binding)
    'to'                [reduce using rule 82 (let_binding)]
    '='                 reduce using rule 81 (let_binding)
    '='                 [reduce using rule 82 (let_binding)]
    '['                 reduce using rule 81 (let_binding)
    '['                 [reduce using rule 82 (let_binding)]
    ']'                 reduce using rule 81 (let_binding)
    ']'                 [reduce using rule 82 (let_binding)]
    '('                 reduce using rule 81 (let_binding)
    '('                 [reduce using rule 82 (let_binding)]
    ')'                 reduce using rule 81 (let_binding)
    ')'                 [reduce using rule 82 (let_binding)]
    ','                 reduce using rule 81 (let_binding)
    ','                 [reduce using rule 82 (let_binding)]
    'if'                reduce using rule 81 (let_binding)
    'if'                [reduce using rule 82 (let_binding)]
    $default            reduce using rule 81 (let_binding)


state 290

  102 lambda_args: lambda_args lambda_arg ':' '(' type_expr . ')'
  137 fn_signature: type_expr . ARROW type_expr
  143 type_expr: type_expr . '|' type_atom

    ARROW  shift, and go to state 272
    '|'    shift, and go to state 273
    ')'    shift, and go to state 314


state 291

  100 lambda_args: lambda_arg ':' '(' type_expr ')' .

    $default  reduce using rule 100 (lambda_args)


state 292

  123 match_test_clause: expr 'if' . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 315
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 293

  124 match_branches: '|' match_test_clause ARROW . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 316
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 294

  126 match_branches: match_branches '|' '_' . ARROW expr

    ARROW  shift, and go to state 317


state 295

  125 match_branches: match_branches '|' match_test_clause . ARROW expr

    ARROW  shift, and go to state 318


state 296

  149 type_atom: IDENTIFIER ':' type_atom .

    $default  reduce using rule 149 (type_atom)


state 297

  152 type_atom: IDENTIFIER '.' IDENTIFIER .

    $default  reduce using rule 152 (type_atom)


state 298

  147 type_atom: IDENTIFIER '=' INTEGER .

    $default  reduce using rule 147 (type_atom)


state 299

  148 type_atom: IDENTIFIER 'of' type_atom .

    $default  reduce using rule 148 (type_atom)


state 300

  150 type_atom: '(' type_expr ')' .

    $default  reduce using rule 150 (type_atom)


state 301

  137 fn_signature: type_expr . ARROW type_expr
  138             | fn_signature ARROW type_expr .
  143 type_expr: type_expr . '|' type_atom

    ARROW  shift, and go to state 272
    '|'    shift, and go to state 273

    ARROW     [reduce using rule 138 (fn_signature)]
    '|'       [reduce using rule 138 (fn_signature)]
    $default  reduce using rule 138 (fn_signature)


state 302

  140 tuple_type: tuple_type ',' type_atom .

    $default  reduce using rule 140 (tuple_type)


state 303

  137 fn_signature: type_expr . ARROW type_expr
  137             | type_expr ARROW type_expr .
  143 type_expr: type_expr . '|' type_atom

    ARROW  shift, and go to state 272
    '|'    shift, and go to state 273

    ARROW     [reduce using rule 137 (fn_signature)]
    '|'       [reduce using rule 137 (fn_signature)]
    $default  reduce using rule 137 (fn_signature)


state 304

  143 type_expr: type_expr '|' type_atom .

    $default  reduce using rule 143 (type_expr)


state 305

  139 tuple_type: type_atom ',' type_atom .

    $default  reduce using rule 139 (tuple_type)


state 306

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   32     | 'for' IDENTIFIER '=' expr IN expr .
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 32 (expr)]
    DOUBLE         [reduce using rule 32 (expr)]
    FLOAT          [reduce using rule 32 (expr)]
    IDENTIFIER     [reduce using rule 32 (expr)]
    TOK_STRING     [reduce using rule 32 (expr)]
    TOK_CHAR       [reduce using rule 32 (expr)]
    TRUE           [reduce using rule 32 (expr)]
    FALSE          [reduce using rule 32 (expr)]
    PIPE           [reduce using rule 32 (expr)]
    DOUBLE_COLON   [reduce using rule 32 (expr)]
    TOK_VOID       [reduce using rule 32 (expr)]
    DOUBLE_AT      [reduce using rule 32 (expr)]
    FSTRING_START  [reduce using rule 32 (expr)]
    DOUBLE_PIPE    [reduce using rule 32 (expr)]
    DOUBLE_AMP     [reduce using rule 32 (expr)]
    '>'            [reduce using rule 32 (expr)]
    '<'            [reduce using rule 32 (expr)]
    NE             [reduce using rule 32 (expr)]
    EQ             [reduce using rule 32 (expr)]
    LE             [reduce using rule 32 (expr)]
    GE             [reduce using rule 32 (expr)]
    '+'            [reduce using rule 32 (expr)]
    '-'            [reduce using rule 32 (expr)]
    '*'            [reduce using rule 32 (expr)]
    '/'            [reduce using rule 32 (expr)]
    MODULO         [reduce using rule 32 (expr)]
    ':'            [reduce using rule 32 (expr)]
    'to'           [reduce using rule 32 (expr)]
    '['            [reduce using rule 32 (expr)]
    '('            [reduce using rule 32 (expr)]
    $default       reduce using rule 32 (expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 307

  111 array: '[' '|' expr_list ',' '|' ']' .

    $default  reduce using rule 111 (array)


state 308

   50 simple_expr: '(' FN TOK_VOID ARROW expr_sequence ')' .
   92 lambda_expr: '(' FN TOK_VOID ARROW expr_sequence ')' .

    $end                reduce using rule 50 (simple_expr)
    $end                [reduce using rule 92 (lambda_expr)]
    INTEGER             reduce using rule 50 (simple_expr)
    INTEGER             [reduce using rule 92 (lambda_expr)]
    DOUBLE              reduce using rule 50 (simple_expr)
    DOUBLE              [reduce using rule 92 (lambda_expr)]
    FLOAT               reduce using rule 50 (simple_expr)
    FLOAT               [reduce using rule 92 (lambda_expr)]
    IDENTIFIER          reduce using rule 50 (simple_expr)
    IDENTIFIER          [reduce using rule 92 (lambda_expr)]
    TOK_STRING          reduce using rule 50 (simple_expr)
    TOK_STRING          [reduce using rule 92 (lambda_expr)]
    TOK_CHAR            reduce using rule 50 (simple_expr)
    TOK_CHAR            [reduce using rule 92 (lambda_expr)]
    TRUE                reduce using rule 50 (simple_expr)
    TRUE                [reduce using rule 92 (lambda_expr)]
    FALSE               reduce using rule 50 (simple_expr)
    FALSE               [reduce using rule 92 (lambda_expr)]
    PIPE                reduce using rule 50 (simple_expr)
    PIPE                [reduce using rule 92 (lambda_expr)]
    WITH                reduce using rule 50 (simple_expr)
    WITH                [reduce using rule 92 (lambda_expr)]
    ARROW               reduce using rule 50 (simple_expr)
    ARROW               [reduce using rule 92 (lambda_expr)]
    DOUBLE_COLON        reduce using rule 50 (simple_expr)
    DOUBLE_COLON        [reduce using rule 92 (lambda_expr)]
    TOK_VOID            reduce using rule 50 (simple_expr)
    TOK_VOID            [reduce using rule 92 (lambda_expr)]
    IN                  reduce using rule 50 (simple_expr)
    IN                  [reduce using rule 92 (lambda_expr)]
    DOUBLE_AT           reduce using rule 50 (simple_expr)
    DOUBLE_AT           [reduce using rule 92 (lambda_expr)]
    THEN                reduce using rule 50 (simple_expr)
    THEN                [reduce using rule 92 (lambda_expr)]
    ELSE                reduce using rule 50 (simple_expr)
    ELSE                [reduce using rule 92 (lambda_expr)]
    FSTRING_START       reduce using rule 50 (simple_expr)
    FSTRING_START       [reduce using rule 92 (lambda_expr)]
    FSTRING_INTERP_END  reduce using rule 50 (simple_expr)
    FSTRING_INTERP_END  [reduce using rule 92 (lambda_expr)]
    '|'                 reduce using rule 50 (simple_expr)
    '|'                 [reduce using rule 92 (lambda_expr)]
    DOUBLE_PIPE         reduce using rule 50 (simple_expr)
    DOUBLE_PIPE         [reduce using rule 92 (lambda_expr)]
    DOUBLE_AMP          reduce using rule 50 (simple_expr)
    DOUBLE_AMP          [reduce using rule 92 (lambda_expr)]
    '>'                 reduce using rule 50 (simple_expr)
    '>'                 [reduce using rule 92 (lambda_expr)]
    '<'                 reduce using rule 50 (simple_expr)
    '<'                 [reduce using rule 92 (lambda_expr)]
    NE                  reduce using rule 50 (simple_expr)
    NE                  [reduce using rule 92 (lambda_expr)]
    EQ                  reduce using rule 50 (simple_expr)
    EQ                  [reduce using rule 92 (lambda_expr)]
    LE                  reduce using rule 50 (simple_expr)
    LE                  [reduce using rule 92 (lambda_expr)]
    GE                  reduce using rule 50 (simple_expr)
    GE                  [reduce using rule 92 (lambda_expr)]
    '+'                 reduce using rule 50 (simple_expr)
    '+'                 [reduce using rule 92 (lambda_expr)]
    '-'                 reduce using rule 50 (simple_expr)
    '-'                 [reduce using rule 92 (lambda_expr)]
    '*'                 reduce using rule 50 (simple_expr)
    '*'                 [reduce using rule 92 (lambda_expr)]
    '/'                 reduce using rule 50 (simple_expr)
    '/'                 [reduce using rule 92 (lambda_expr)]
    MODULO              reduce using rule 50 (simple_expr)
    MODULO              [reduce using rule 92 (lambda_expr)]
    ':'                 reduce using rule 50 (simple_expr)
    ':'                 [reduce using rule 92 (lambda_expr)]
    ';'                 reduce using rule 50 (simple_expr)
    ';'                 [reduce using rule 92 (lambda_expr)]
    'to'                reduce using rule 50 (simple_expr)
    'to'                [reduce using rule 92 (lambda_expr)]
    '='                 reduce using rule 50 (simple_expr)
    '='                 [reduce using rule 92 (lambda_expr)]
    '['                 reduce using rule 50 (simple_expr)
    '['                 [reduce using rule 92 (lambda_expr)]
    ']'                 reduce using rule 50 (simple_expr)
    ']'                 [reduce using rule 92 (lambda_expr)]
    '('                 reduce using rule 50 (simple_expr)
    '('                 [reduce using rule 92 (lambda_expr)]
    ')'                 reduce using rule 50 (simple_expr)
    ')'                 [reduce using rule 92 (lambda_expr)]
    ','                 reduce using rule 50 (simple_expr)
    ','                 [reduce using rule 92 (lambda_expr)]
    'if'                reduce using rule 50 (simple_expr)
    'if'                [reduce using rule 92 (lambda_expr)]
    $default            reduce using rule 50 (simple_expr)


state 309

   49 simple_expr: '(' FN lambda_args ARROW expr_sequence ')' .
   91 lambda_expr: '(' FN lambda_args ARROW expr_sequence ')' .

    $end                reduce using rule 49 (simple_expr)
    $end                [reduce using rule 91 (lambda_expr)]
    INTEGER             reduce using rule 49 (simple_expr)
    INTEGER             [reduce using rule 91 (lambda_expr)]
    DOUBLE              reduce using rule 49 (simple_expr)
    DOUBLE              [reduce using rule 91 (lambda_expr)]
    FLOAT               reduce using rule 49 (simple_expr)
    FLOAT               [reduce using rule 91 (lambda_expr)]
    IDENTIFIER          reduce using rule 49 (simple_expr)
    IDENTIFIER          [reduce using rule 91 (lambda_expr)]
    TOK_STRING          reduce using rule 49 (simple_expr)
    TOK_STRING          [reduce using rule 91 (lambda_expr)]
    TOK_CHAR            reduce using rule 49 (simple_expr)
    TOK_CHAR            [reduce using rule 91 (lambda_expr)]
    TRUE                reduce using rule 49 (simple_expr)
    TRUE                [reduce using rule 91 (lambda_expr)]
    FALSE               reduce using rule 49 (simple_expr)
    FALSE               [reduce using rule 91 (lambda_expr)]
    PIPE                reduce using rule 49 (simple_expr)
    PIPE                [reduce using rule 91 (lambda_expr)]
    WITH                reduce using rule 49 (simple_expr)
    WITH                [reduce using rule 91 (lambda_expr)]
    ARROW               reduce using rule 49 (simple_expr)
    ARROW               [reduce using rule 91 (lambda_expr)]
    DOUBLE_COLON        reduce using rule 49 (simple_expr)
    DOUBLE_COLON        [reduce using rule 91 (lambda_expr)]
    TOK_VOID            reduce using rule 49 (simple_expr)
    TOK_VOID            [reduce using rule 91 (lambda_expr)]
    IN                  reduce using rule 49 (simple_expr)
    IN                  [reduce using rule 91 (lambda_expr)]
    DOUBLE_AT           reduce using rule 49 (simple_expr)
    DOUBLE_AT           [reduce using rule 91 (lambda_expr)]
    THEN                reduce using rule 49 (simple_expr)
    THEN                [reduce using rule 91 (lambda_expr)]
    ELSE                reduce using rule 49 (simple_expr)
    ELSE                [reduce using rule 91 (lambda_expr)]
    FSTRING_START       reduce using rule 49 (simple_expr)
    FSTRING_START       [reduce using rule 91 (lambda_expr)]
    FSTRING_INTERP_END  reduce using rule 49 (simple_expr)
    FSTRING_INTERP_END  [reduce using rule 91 (lambda_expr)]
    '|'                 reduce using rule 49 (simple_expr)
    '|'                 [reduce using rule 91 (lambda_expr)]
    DOUBLE_PIPE         reduce using rule 49 (simple_expr)
    DOUBLE_PIPE         [reduce using rule 91 (lambda_expr)]
    DOUBLE_AMP          reduce using rule 49 (simple_expr)
    DOUBLE_AMP          [reduce using rule 91 (lambda_expr)]
    '>'                 reduce using rule 49 (simple_expr)
    '>'                 [reduce using rule 91 (lambda_expr)]
    '<'                 reduce using rule 49 (simple_expr)
    '<'                 [reduce using rule 91 (lambda_expr)]
    NE                  reduce using rule 49 (simple_expr)
    NE                  [reduce using rule 91 (lambda_expr)]
    EQ                  reduce using rule 49 (simple_expr)
    EQ                  [reduce using rule 91 (lambda_expr)]
    LE                  reduce using rule 49 (simple_expr)
    LE                  [reduce using rule 91 (lambda_expr)]
    GE                  reduce using rule 49 (simple_expr)
    GE                  [reduce using rule 91 (lambda_expr)]
    '+'                 reduce using rule 49 (simple_expr)
    '+'                 [reduce using rule 91 (lambda_expr)]
    '-'                 reduce using rule 49 (simple_expr)
    '-'                 [reduce using rule 91 (lambda_expr)]
    '*'                 reduce using rule 49 (simple_expr)
    '*'                 [reduce using rule 91 (lambda_expr)]
    '/'                 reduce using rule 49 (simple_expr)
    '/'                 [reduce using rule 91 (lambda_expr)]
    MODULO              reduce using rule 49 (simple_expr)
    MODULO              [reduce using rule 91 (lambda_expr)]
    ':'                 reduce using rule 49 (simple_expr)
    ':'                 [reduce using rule 91 (lambda_expr)]
    ';'                 reduce using rule 49 (simple_expr)
    ';'                 [reduce using rule 91 (lambda_expr)]
    'to'                reduce using rule 49 (simple_expr)
    'to'                [reduce using rule 91 (lambda_expr)]
    '='                 reduce using rule 49 (simple_expr)
    '='                 [reduce using rule 91 (lambda_expr)]
    '['                 reduce using rule 49 (simple_expr)
    '['                 [reduce using rule 91 (lambda_expr)]
    ']'                 reduce using rule 49 (simple_expr)
    ']'                 [reduce using rule 91 (lambda_expr)]
    '('                 reduce using rule 49 (simple_expr)
    '('                 [reduce using rule 91 (lambda_expr)]
    ')'                 reduce using rule 49 (simple_expr)
    ')'                 [reduce using rule 91 (lambda_expr)]
    ','                 reduce using rule 49 (simple_expr)
    ','                 [reduce using rule 91 (lambda_expr)]
    'if'                reduce using rule 49 (simple_expr)
    'if'                [reduce using rule 91 (lambda_expr)]
    $default            reduce using rule 49 (simple_expr)


state 310

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
  120 match_expr: 'if' expr THEN expr ELSE expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 120 (match_expr)]
    DOUBLE         [reduce using rule 120 (match_expr)]
    FLOAT          [reduce using rule 120 (match_expr)]
    IDENTIFIER     [reduce using rule 120 (match_expr)]
    TOK_STRING     [reduce using rule 120 (match_expr)]
    TOK_CHAR       [reduce using rule 120 (match_expr)]
    TRUE           [reduce using rule 120 (match_expr)]
    FALSE          [reduce using rule 120 (match_expr)]
    PIPE           [reduce using rule 120 (match_expr)]
    DOUBLE_COLON   [reduce using rule 120 (match_expr)]
    TOK_VOID       [reduce using rule 120 (match_expr)]
    DOUBLE_AT      [reduce using rule 120 (match_expr)]
    FSTRING_START  [reduce using rule 120 (match_expr)]
    DOUBLE_PIPE    [reduce using rule 120 (match_expr)]
    DOUBLE_AMP     [reduce using rule 120 (match_expr)]
    '>'            [reduce using rule 120 (match_expr)]
    '<'            [reduce using rule 120 (match_expr)]
    NE             [reduce using rule 120 (match_expr)]
    EQ             [reduce using rule 120 (match_expr)]
    LE             [reduce using rule 120 (match_expr)]
    GE             [reduce using rule 120 (match_expr)]
    '+'            [reduce using rule 120 (match_expr)]
    '-'            [reduce using rule 120 (match_expr)]
    '*'            [reduce using rule 120 (match_expr)]
    '/'            [reduce using rule 120 (match_expr)]
    MODULO         [reduce using rule 120 (match_expr)]
    ':'            [reduce using rule 120 (match_expr)]
    'to'           [reduce using rule 120 (match_expr)]
    '['            [reduce using rule 120 (match_expr)]
    '('            [reduce using rule 120 (match_expr)]
    $default       reduce using rule 120 (match_expr)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 311

   50 simple_expr: '(' FN TOK_VOID ARROW expr_sequence . ')'
   71 expr_sequence: expr_sequence . ';' expr
   90 lambda_expr: FN TOK_VOID ARROW expr_sequence . ';'

    ';'  shift, and go to state 255
    ')'  shift, and go to state 319


state 312

   49 simple_expr: '(' FN lambda_args ARROW expr_sequence . ')'
   71 expr_sequence: expr_sequence . ';' expr
   89 lambda_expr: FN lambda_args ARROW expr_sequence . ';'

    ';'  shift, and go to state 256
    ')'  shift, and go to state 320


state 313

   91 lambda_expr: '(' FN . lambda_args ARROW expr_sequence ')'
   92            | '(' FN . TOK_VOID ARROW expr_sequence ')'

    IDENTIFIER  shift, and go to state 50
    TOK_VOID    shift, and go to state 321
    '('         shift, and go to state 52

    lambda_args      go to state 322
    lambda_arg       go to state 54
    list_match_expr  go to state 48


state 314

  102 lambda_args: lambda_args lambda_arg ':' '(' type_expr ')' .

    $default  reduce using rule 102 (lambda_args)


state 315

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
  123 match_test_clause: expr 'if' expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    $default  reduce using rule 123 (match_test_clause)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 316

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
  124 match_branches: '|' match_test_clause ARROW expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 124 (match_branches)]
    DOUBLE         [reduce using rule 124 (match_branches)]
    FLOAT          [reduce using rule 124 (match_branches)]
    IDENTIFIER     [reduce using rule 124 (match_branches)]
    TOK_STRING     [reduce using rule 124 (match_branches)]
    TOK_CHAR       [reduce using rule 124 (match_branches)]
    TRUE           [reduce using rule 124 (match_branches)]
    FALSE          [reduce using rule 124 (match_branches)]
    PIPE           [reduce using rule 124 (match_branches)]
    DOUBLE_COLON   [reduce using rule 124 (match_branches)]
    TOK_VOID       [reduce using rule 124 (match_branches)]
    DOUBLE_AT      [reduce using rule 124 (match_branches)]
    FSTRING_START  [reduce using rule 124 (match_branches)]
    DOUBLE_PIPE    [reduce using rule 124 (match_branches)]
    DOUBLE_AMP     [reduce using rule 124 (match_branches)]
    '>'            [reduce using rule 124 (match_branches)]
    '<'            [reduce using rule 124 (match_branches)]
    NE             [reduce using rule 124 (match_branches)]
    EQ             [reduce using rule 124 (match_branches)]
    LE             [reduce using rule 124 (match_branches)]
    GE             [reduce using rule 124 (match_branches)]
    '+'            [reduce using rule 124 (match_branches)]
    '-'            [reduce using rule 124 (match_branches)]
    '*'            [reduce using rule 124 (match_branches)]
    '/'            [reduce using rule 124 (match_branches)]
    MODULO         [reduce using rule 124 (match_branches)]
    ':'            [reduce using rule 124 (match_branches)]
    'to'           [reduce using rule 124 (match_branches)]
    '['            [reduce using rule 124 (match_branches)]
    '('            [reduce using rule 124 (match_branches)]
    $default       reduce using rule 124 (match_branches)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 317

  126 match_branches: match_branches '|' '_' ARROW . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 323
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 318

  125 match_branches: match_branches '|' match_test_clause ARROW . expr

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr         go to state 324
    simple_expr  go to state 29
    let_binding  go to state 31
    lambda_expr  go to state 32
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    match_expr   go to state 36
    fstring      go to state 37
    type_decl    go to state 38


state 319

   50 simple_expr: '(' FN TOK_VOID ARROW expr_sequence ')' .

    $default  reduce using rule 50 (simple_expr)


state 320

   49 simple_expr: '(' FN lambda_args ARROW expr_sequence ')' .

    $default  reduce using rule 49 (simple_expr)


state 321

   92 lambda_expr: '(' FN TOK_VOID . ARROW expr_sequence ')'

    ARROW  shift, and go to state 325


state 322

   91 lambda_expr: '(' FN lambda_args . ARROW expr_sequence ')'
   97 lambda_args: lambda_args . lambda_arg
   98            | lambda_args . lambda_arg '=' expr
  101            | lambda_args . lambda_arg
  102            | lambda_args . lambda_arg ':' '(' type_expr ')'

    IDENTIFIER  shift, and go to state 50
    ARROW       shift, and go to state 326
    '('         shift, and go to state 52

    lambda_arg       go to state 136
    list_match_expr  go to state 48


state 323

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
  126 match_branches: match_branches '|' '_' ARROW expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 126 (match_branches)]
    DOUBLE         [reduce using rule 126 (match_branches)]
    FLOAT          [reduce using rule 126 (match_branches)]
    IDENTIFIER     [reduce using rule 126 (match_branches)]
    TOK_STRING     [reduce using rule 126 (match_branches)]
    TOK_CHAR       [reduce using rule 126 (match_branches)]
    TRUE           [reduce using rule 126 (match_branches)]
    FALSE          [reduce using rule 126 (match_branches)]
    PIPE           [reduce using rule 126 (match_branches)]
    DOUBLE_COLON   [reduce using rule 126 (match_branches)]
    TOK_VOID       [reduce using rule 126 (match_branches)]
    DOUBLE_AT      [reduce using rule 126 (match_branches)]
    FSTRING_START  [reduce using rule 126 (match_branches)]
    DOUBLE_PIPE    [reduce using rule 126 (match_branches)]
    DOUBLE_AMP     [reduce using rule 126 (match_branches)]
    '>'            [reduce using rule 126 (match_branches)]
    '<'            [reduce using rule 126 (match_branches)]
    NE             [reduce using rule 126 (match_branches)]
    EQ             [reduce using rule 126 (match_branches)]
    LE             [reduce using rule 126 (match_branches)]
    GE             [reduce using rule 126 (match_branches)]
    '+'            [reduce using rule 126 (match_branches)]
    '-'            [reduce using rule 126 (match_branches)]
    '*'            [reduce using rule 126 (match_branches)]
    '/'            [reduce using rule 126 (match_branches)]
    MODULO         [reduce using rule 126 (match_branches)]
    ':'            [reduce using rule 126 (match_branches)]
    'to'           [reduce using rule 126 (match_branches)]
    '['            [reduce using rule 126 (match_branches)]
    '('            [reduce using rule 126 (match_branches)]
    $default       reduce using rule 126 (match_branches)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 324

    6 expr: expr . DOUBLE_AT expr
    7     | expr . simple_expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . MODULO expr
   13     | expr . '<' expr
   14     | expr . '>' expr
   15     | expr . DOUBLE_AMP expr
   16     | expr . DOUBLE_PIPE expr
   17     | expr . GE expr
   18     | expr . LE expr
   19     | expr . NE expr
   20     | expr . EQ expr
   21     | expr . PIPE expr
   22     | expr . ':' expr
   23     | expr . 'to' expr
   24     | expr . DOUBLE_COLON expr
   33     | expr . '[' expr ']'
   34     | expr . ':' '=' expr
  125 match_branches: match_branches '|' match_test_clause ARROW expr .

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    FLOAT          shift, and go to state 3
    IDENTIFIER     shift, and go to state 4
    TOK_STRING     shift, and go to state 7
    TOK_CHAR       shift, and go to state 8
    TRUE           shift, and go to state 9
    FALSE          shift, and go to state 10
    PIPE           shift, and go to state 97
    DOUBLE_COLON   shift, and go to state 98
    TOK_VOID       shift, and go to state 16
    DOUBLE_AT      shift, and go to state 99
    FSTRING_START  shift, and go to state 21
    DOUBLE_PIPE    shift, and go to state 100
    DOUBLE_AMP     shift, and go to state 101
    '>'            shift, and go to state 102
    '<'            shift, and go to state 103
    NE             shift, and go to state 104
    EQ             shift, and go to state 105
    LE             shift, and go to state 106
    GE             shift, and go to state 107
    '+'            shift, and go to state 108
    '-'            shift, and go to state 109
    '*'            shift, and go to state 110
    '/'            shift, and go to state 111
    MODULO         shift, and go to state 112
    ':'            shift, and go to state 113
    'to'           shift, and go to state 114
    '['            shift, and go to state 115
    '('            shift, and go to state 116

    INTEGER        [reduce using rule 125 (match_branches)]
    DOUBLE         [reduce using rule 125 (match_branches)]
    FLOAT          [reduce using rule 125 (match_branches)]
    IDENTIFIER     [reduce using rule 125 (match_branches)]
    TOK_STRING     [reduce using rule 125 (match_branches)]
    TOK_CHAR       [reduce using rule 125 (match_branches)]
    TRUE           [reduce using rule 125 (match_branches)]
    FALSE          [reduce using rule 125 (match_branches)]
    PIPE           [reduce using rule 125 (match_branches)]
    DOUBLE_COLON   [reduce using rule 125 (match_branches)]
    TOK_VOID       [reduce using rule 125 (match_branches)]
    DOUBLE_AT      [reduce using rule 125 (match_branches)]
    FSTRING_START  [reduce using rule 125 (match_branches)]
    DOUBLE_PIPE    [reduce using rule 125 (match_branches)]
    DOUBLE_AMP     [reduce using rule 125 (match_branches)]
    '>'            [reduce using rule 125 (match_branches)]
    '<'            [reduce using rule 125 (match_branches)]
    NE             [reduce using rule 125 (match_branches)]
    EQ             [reduce using rule 125 (match_branches)]
    LE             [reduce using rule 125 (match_branches)]
    GE             [reduce using rule 125 (match_branches)]
    '+'            [reduce using rule 125 (match_branches)]
    '-'            [reduce using rule 125 (match_branches)]
    '*'            [reduce using rule 125 (match_branches)]
    '/'            [reduce using rule 125 (match_branches)]
    MODULO         [reduce using rule 125 (match_branches)]
    ':'            [reduce using rule 125 (match_branches)]
    'to'           [reduce using rule 125 (match_branches)]
    '['            [reduce using rule 125 (match_branches)]
    '('            [reduce using rule 125 (match_branches)]
    $default       reduce using rule 125 (match_branches)

    simple_expr  go to state 117
    list         go to state 33
    array        go to state 34
    tuple        go to state 35
    fstring      go to state 37


state 325

   92 lambda_expr: '(' FN TOK_VOID ARROW . expr_sequence ')'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr           go to state 28
    simple_expr    go to state 29
    expr_sequence  go to state 327
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 326

   91 lambda_expr: '(' FN lambda_args ARROW . expr_sequence ')'

    INTEGER           shift, and go to state 1
    DOUBLE            shift, and go to state 2
    FLOAT             shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    MACRO_IDENTIFIER  shift, and go to state 5
    IDENTIFIER_LIST   shift, and go to state 6
    TOK_STRING        shift, and go to state 7
    TOK_CHAR          shift, and go to state 8
    TRUE              shift, and go to state 9
    FALSE             shift, and go to state 10
    TRIPLE_DOT        shift, and go to state 11
    LET               shift, and go to state 12
    FN                shift, and go to state 13
    MODULE            shift, and go to state 14
    MATCH             shift, and go to state 15
    TOK_VOID          shift, and go to state 16
    THUNK             shift, and go to state 17
    IMPORT            shift, and go to state 18
    OPEN              shift, and go to state 19
    TYPE              shift, and go to state 20
    FSTRING_START     shift, and go to state 21
    'yield'           shift, and go to state 22
    'for'             shift, and go to state 23
    '['               shift, and go to state 24
    '('               shift, and go to state 25
    'if'              shift, and go to state 26

    expr           go to state 28
    simple_expr    go to state 29
    expr_sequence  go to state 328
    let_binding    go to state 31
    lambda_expr    go to state 32
    list           go to state 33
    array          go to state 34
    tuple          go to state 35
    match_expr     go to state 36
    fstring        go to state 37
    type_decl      go to state 38


state 327

   71 expr_sequence: expr_sequence . ';' expr
   92 lambda_expr: '(' FN TOK_VOID ARROW expr_sequence . ')'

    ';'  shift, and go to state 174
    ')'  shift, and go to state 329


state 328

   71 expr_sequence: expr_sequence . ';' expr
   91 lambda_expr: '(' FN lambda_args ARROW expr_sequence . ')'

    ';'  shift, and go to state 174
    ')'  shift, and go to state 330


state 329

   92 lambda_expr: '(' FN TOK_VOID ARROW expr_sequence ')' .

    $default  reduce using rule 92 (lambda_expr)


state 330

   91 lambda_expr: '(' FN lambda_args ARROW expr_sequence ')' .

    $default  reduce using rule 91 (lambda_expr)
