open engine/bindings/Synth;
open engine/bindings/Sched; 
import lib/Math;

let Acid = module
  let ampenv = [|
    0.000000, 0.000000, 2.400000,
    1.000000, 2.210165, -2.000000,
    1.000000, 0.789836, 1.300000,
    0.000000
  |]
  |> array_to_buf;

  let synth = (fn () -> 
    let freq = inlet 55. in
    let trig = inlet 0. in
    # ( sq_node (1.01 * freq) + sq_node freq ) * (aslr_node 0.01 1. 0.01 0.1 trig)
    # ( sin_node (4. * freq) + sin_node freq ) * (aslr_node 0.01 1. 0.01 0.1 trig)
    ( pm_node freq (4. * sin_node (0.0625 /0.2)) 1.5 ) * (aslr_node 0.001 1. 0.01 0.1 trig)
    # ( sin_node freq ) * (aslr_node 0.01 1. 0.01 0.1 trig)
    |> vital_rev_node
        0.5
        0.5
        0.5
        0.62184876
        0.0
        0.5
        0.8333333
        0.6
        0.789916
        0.0
        0.0
        0.8

  ) |> play_tpl;


  let trign = fn n -> 
    let fo = get_tl_tick ();
    set_input_trig_offset synth 1 fo;
    set_input_scalar_offset synth 0 fo (midi_to_freq n)
  ;;

  let pattern_ref = [|empty_coroutine ()|] ;

  let set_pattern = fn t cor ->
    cor_stop ( pattern_ref[0] );
    cor
    |> play_routine t schedule_event
    |> array_set pattern_ref 0
  ;;
;

let q = 60. / 130.;
let full_notes =	[|
   60, 64, 67, 72, 76, 60, 62, 69, 74, 77, 59, 62, 67, 74, 77, 60, 64, 67, 72, 76,
	 60, 64, 69, 76, 81, 60, 62, 66, 69, 74, 59, 62, 67, 74, 79, 59, 60, 64, 67, 72,
	 57, 60, 64, 67, 72, 50, 57, 62, 66, 72, 55, 59, 62, 67, 71, 55, 58, 64, 67, 73,
	 53, 57, 62, 69, 74, 53, 56, 62, 65, 71, 52, 55, 60, 67, 72, 52, 53, 57, 60, 65,
	 50, 53, 57, 60, 65, 43, 50, 55, 59, 65, 48, 52, 55, 60, 64, 48, 55, 58, 60, 64,
	 41, 53, 57, 60, 64, 42, 48, 57, 60, 63, 44, 53, 59, 60, 62, 43, 53, 55, 59, 62,
	 43, 52, 55, 60, 64, 43, 50, 55, 60, 65, 43, 50, 55, 59, 65, 43, 51, 57, 60, 66,
	 43, 52, 55, 60, 67, 43, 50, 55, 60, 65, 43, 50, 55, 59, 65, 36, 48, 55, 58, 64,
|];

# let twice = fn arr: (Array of Int) ->
#   yield (iter arr);
#   yield (iter arr)
# ;;

let note_seq = fn idx notes -> 
  yield iter (array_range (idx * 5 + 0) 5 notes);
  yield iter (array_range (idx * 5 + 2) 3 notes);
  yield iter (array_range (idx * 5 + 0) 5 notes);
  yield iter (array_range (idx * 5 + 2) 3 notes);
  yield note_seq ((idx + 1) % 32) notes
;;

defer_quant q (fn t -> 
  note_seq 0 full_notes
  |> cor_loop
  |> cor_map (fn n ->
    Acid.trign n;
    0.2
  )
  |> Acid.set_pattern t
);

