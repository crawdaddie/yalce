# Scheduler returns (add_task, run)
let scheduler = fn () ->
  let tasks = ref [] in  # List of active coroutines
  
  let add_task = fn routine ->
    tasks := list_append !tasks [routine]
  in
  
  let run = fn () ->
    while not (list_empty !tasks) do
      let current = list_head !tasks in
      tasks := list_tail !tasks in
      
      # Resume the coroutine
      match current () with
      | Done -> ()  # Task is complete
      | Yield next -> tasks := list_append !tasks [next]  # Put task back in queue
    done
  in
  
  (add_task, run)
;;

# Server accept loop as a coroutine
let accept_connections = fn server_fd add_task ->
  let rec accept_loop = fn () ->
    let client_addr = make_sockaddr_in () in
    let client_fd = accept server_fd client_addr in
    
    if client_fd >= 0 then
      # Start a new coroutine for this client
      add_task (handle_client client_fd)
    ;;
    
    # Yield control and continue accepting
    yield accept_loop
  in
  accept_loop
;;

# Client handler as a coroutine
let handle_client = fn client_fd ->
  let rec handle = fn () ->
    let buffer = make_buffer 1024 in
    let bytes_read = read client_fd buffer 1024 in
    
    if bytes_read > 0 then
      # Process request and send response
      write client_fd "HTTP/1.1 200 OK\r\n\r\nHello!\r\n" in
      yield handle  # Keep handling requests from this client
    else
      close client_fd  # Client disconnected
    ;;
  in
  
  handle
;;

# Main server setup and run
let run_server = fn port ->
  let server_fd = socket AF_INET SOCK_STREAM 0 in
  let addr = make_sockaddr_in () in
  
  set_sockaddr addr AF_INET INADDR_ANY port;
  
  bind server_fd addr;
  listen server_fd 10;
  
  let (add_task, run) = scheduler () in
  
  # Start accept loop
  add_task (accept_connections server_fd add_task);
  
  # Run the scheduler
  run ()
;;

# Start the server
run_server 8080;
