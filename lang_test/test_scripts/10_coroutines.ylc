%test
%include ../../examples/String


let test_iter_all_void = fn () ->
  let co_void = fn () ->
    yield 1.;
    yield 2.;
    yield 3.
  ;;
  let inst = co_void ();


  (match inst () with
  | Some 1. -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2. -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 3. -> true
  | _ -> false
  )
  && (
  match inst () with
  | None -> true
  | _ -> false
  )
;;


let test_iter_all = fn () ->
  let co = fn a ->
    yield 1.;
    yield a;
    yield 3.
  ;;

  let inst = co 2.;

  (match inst () with
  | Some 1. -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2. -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 3. -> true
  | _ -> false
  )
  && (
  match inst () with
  | None -> true
  | _ -> false
  )
;;



let test_recursive_cor = fn () ->
  let rec_cor = fn () ->
    yield 1;
    yield 2;
    yield 3;
    yield rec_cor ()
  ;;
  let inst = rec_cor ();
  (match inst () with
  | Some 1 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 3 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 1 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  )
;;


let test_embed_coroutine = fn () ->
  let sub_cor = fn () ->
    yield 4;
    yield 5;
    yield 6 
  ;;

  let cor = fn () ->
    yield 1;
    yield sub_cor ();
    yield 2;
    yield 3
  ;;
  let inst = cor ();
  (
  match inst () with
  | Some 1 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 4 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 5 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 6 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 3 -> true
  | _ -> false
  )
  && (
  match inst () with
  | None -> true
  | _ -> false
  )
;;

let test_generic_cor = fn () ->
  let generic_cor = fn a b ->
    yield a;
    yield b
  ;;
  let inst = generic_cor 1 2;
  (match inst () with
  | Some 1 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  )
;;

# let g = fn opt_int: (Option of Int) ->
#   match opt_int with
#   | Some x -> print `got Some {x}\n`
#   | None -> print `got None\n`
#   ;;

let test_cor_loop = fn () ->
  let cor = fn () ->
    yield 1;
    yield 2;
    yield 3
  ;;
  let inst = loop cor ();
  (match inst () with
  | Some 1 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 3 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 1 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  )
;;

let test_cor_loop_params = fn () ->
  let cor = fn a ->
    yield 1;
    yield a;
    yield 3
  ;;
  let inst = loop cor 2;
  (match inst () with
  | Some 1 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 3 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 1 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  )
;;


let test_iter_array = fn () ->
  let inst = iter_of_array [|0.2, 0.3, 0.2, 0.3|];
  (match inst () with
  | Some 0.2 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.3 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.2 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.3 -> true
  | _ -> false
  ) && (
  match inst () with
  | None -> true
  | _ -> false
  )
;;

let test_iter_array_loop = fn () ->
  let inst = loop iter_of_array [|0.2, 0.3, 0.2, 0.3|];
  (match inst () with
  | Some 0.2 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.3 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.2 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.3 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.2 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.3 -> true
  | _ -> false
  )
;;

let test_iter_list = fn () ->
  let inst = iter_of_list [0.2, 0.3, 0.2, 0.3];
  (match inst () with
  | Some 0.2 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.3 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.2 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.3 -> true
  | _ -> false
  ) && (
  match inst () with
  | None -> true
  | _ -> false
  )
;;

let test_iter_list_loop = fn () ->
  let inst = loop iter_of_list [0.2, 0.3, 0.2, 0.3];
  (match inst () with
  | Some 0.2 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.3 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.2 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.3 -> true
  | _ -> false
  ) && (match inst () with
  | Some 0.2 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.3 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 0.2 -> true
  | _ -> false
  ) 
;;

# let test_struct_of_coroutines = fn () ->
#   let cor = fn () ->
#     yield 1;
#     yield 2;
#     yield 3
#   ;;
#
#   let inst = (a: cor (), b: cor (), c: 2000); 
#
#   (match inst () with
#   | Some _ -> true
#   | _ -> false
#   ) && (
#   match inst () with
#   | Some _ -> true
#   | _ -> false
#   ) && (
#   match inst () with
#   | Some _ -> true
#   | _ -> false
#   ) && (
#   match inst () with
#   | None -> true
#   | _ -> false
#   )
# ;;
