%test
%include ../../examples/String


let test_iter_all_void = fn () ->
  let co_void = fn () ->
    yield 1.;
    yield 2.;
    yield 3.
  ;;
  let inst = co_void ();


  (match inst () with
  | Some 1. -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2. -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 3. -> true
  | _ -> false
  )
  && (
  match inst () with
  | None -> true
  | _ -> false
  )
;;


let test_iter_all = fn () ->
  let co = fn a ->
    yield 1.;
    yield a;
    yield 3.
  ;;

  let inst = co 2.;

  (match inst () with
  | Some 1. -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2. -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 3. -> true
  | _ -> false
  )
  && (
  match inst () with
  | None -> true
  | _ -> false
  )
;;




let test_recursive_cor = fn () ->
  let rec_cor = fn () ->
    yield 1;
    yield 2;
    yield 3;
    yield rec_cor ()
  ;;
  let inst = rec_cor ();
  (match inst () with
  | Some 1 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 3 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 1 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  )
;;


let test_embed_coroutine = fn () ->
  let sub_cor = fn () ->
    yield 4;
    yield 5;
    yield 6 
  ;;

  let cor = fn () ->
    yield 1;
    yield sub_cor ();
    yield 2;
    yield 3
  ;;
  let inst = cor ();
  (
  match inst () with
  | Some 1 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 4 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 5 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 6 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 3 -> true
  | _ -> false
  )
  && (
  match inst () with
  | None -> true
  | _ -> false
  )
;;

let test_generic_cor = fn () ->
  let generic_cor = fn a b ->
    yield a;
    yield b
  ;;
  let inst = generic_cor 1 2;
  (match inst () with
  | Some 1 -> true
  | _ -> false
  ) && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  )
;;

let g = fn opt_int: (Option of Int) ->
  match opt_int with
  | Some x -> print `got Some {x}\n`
  | None -> print `got None\n`
  ;;

let test_cor_loop = fn () ->
  let cor = fn () ->
    yield 1;
    yield 2;
    yield 3
  ;;
  let inst = loop cor ();
  (match inst () with
  | Some 1 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 3 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 1 -> true
  | _ -> false
  )
  && (
  match inst () with
  | Some 2 -> true
  | _ -> false
  )

;;
