open engine/bindings/Synth;
open engine/bindings/Sched; 
import lib/Math;
set_main_vol 0.0625;

let array_choose = fn arr: (Array of Double) ->
  let idx = Math.rand_int (array_size arr) in
  arr[idx] 
;;

let S = module
  let blob = (fn () -> 
    let freq_ = inlet 55. in
    let gate = inlet 1. in
    let freq = freq_ + (freq_ * (chirp_node 2. 0.001 0.3 gate)) in

    let pm_amt = (chirp_node 3. 0.1 0.1 gate) + lfnoise_node 2. 0. 1. in
    (pm_node freq pm_amt 2.)
    |> (+) (pm_node freq pm_amt (2.0 + lfnoise_node 1. 0. 0.1))
    |> delay_node 0.02 0.05 0.4
    |> (*) (asr_kill_node 0.001 1. 0.3 gate)

  ) |> compile_blob_template
  ;

  let group = group_node () |> play_node; 

  let fx = (fn () ->
    let input = multi_chan_inlet 2 0.;
    input
    |> delay_node (0.75 * 0.8) 0.75 0.5
  ) |> play_tpl
  ;

  let _ = group |> pipe_into fx 0;

  let play_dur = fn freq dur ->
    let fo = get_tl_tick ();
    blob |> instantiate_template [(0, freq)] |> play_node_dur_in_group fo dur 1 group;
    dur
  ;;

  let seq_plug = fn (durs, notes): (dur: Coroutine of Double, note: Coroutine of Int) ->
    let d = use_or_finish @@ durs ();
    let n = use_or_finish @@ notes ();
    play_dur (midi_to_freq n) (d * 0.5);
    yield d;
    yield (seq_plug (durs, notes))
  ;;

  let pattern_ref = [|empty_coroutine ()|] ;
  let set_pattern = fn t cor ->
    cor_stop ( pattern_ref[0]);
    cor
    |> play_routine t schedule_event
    |> array_set pattern_ref 0
  ;;
;

let Constructor : S = module
  let of_coroutines_ts = fn (a, t): ((dur: Coroutine of Double, note: Coroutine of Int), Uint64) ->
    S.seq_plug a |> cor_map ((*) 0.8) |> S.set_pattern t 
  ;;

  let of_coroutines = fn a: (dur: Coroutine of Double, note: Coroutine of Int) ->
    S.seq_plug a |> cor_map ((*) 0.8) |> S.set_pattern 0 
  ;;
;


let vals = (
  dur: iter [| 0.5, 0.25, 0.25, 0.125, 0.125, 0.75, 0.75, 0.75, 0.25 |] |> cor_loop,
  note: iter [| 30, 66, 30, 30, 30, 69, 68, 30, 30, 38, 37, 30, 30, 50, 49 |] |> cor_loop,
);


defer_quant 1. (fn t -> 
  (vals, t) |> S
)
