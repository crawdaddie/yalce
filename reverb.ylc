open engine/bindings/Sched;
open engine/bindings/Synth;

let freqs = [|
  (midi_to_freq 84), 
  (midi_to_freq 89), 
  (midi_to_freq 92) 
|];


let exp_env = fn dec: (Synth) trig: (Synth) ->
  (chirp_node 1.01 0.01 dec trig) - 0.01
;;

let rev_node_tpl = (fn () ->

  let trig = impulse_node 8.;
  trig 
  |> array_choose_trig_node (array_size freqs) (cstr freqs)
  |> sin_node
  |> (*) (exp_env (rand_trig_node trig 0.1 1.) trig)
  |> reverb_node 0.8 1. 1. 1.
  # |> grain_pitchshift_node 0.5 0.2
  ;
)
  |> compile_blob_template
  ;


let _seq = fn () ->

  array_set 0 freqs (midi_to_freq 80) ;
  array_set 1 freqs (midi_to_freq 89) ;
  array_set 2 freqs (midi_to_freq 92) ;
  yield 2.;

  array_set 0 freqs (midi_to_freq 79) ;
  array_set 1 freqs (midi_to_freq 89) ;
  array_set 2 freqs (midi_to_freq 92) ;
  yield 2.;

  array_set 0 freqs (midi_to_freq 75) ;
  array_set 1 freqs (midi_to_freq 89) ;
  array_set 2 freqs (midi_to_freq 92) ;
  yield 2.;

  array_set 0 freqs (midi_to_freq 84);
  array_set 1 freqs (midi_to_freq 87);
  array_set 2 freqs (midi_to_freq 89);
  yield 1.;

  array_set 0 freqs (midi_to_freq 84);
  array_set 1 freqs (midi_to_freq 89);
  array_set 2 freqs (midi_to_freq 94);
  yield 1.;

  yield _seq ()
;;


let seq = fn () ->

  array_set 0 freqs (midi_to_freq 60) ;
  array_set 1 freqs (midi_to_freq 60) ;
  array_set 2 freqs (midi_to_freq 60) ;
  yield 2.;

  array_set 0 freqs (midi_to_freq 79) ;
  array_set 1 freqs (midi_to_freq 79) ;
  array_set 2 freqs (midi_to_freq 79) ;
  yield 2.;

  array_set 0 freqs (midi_to_freq 80) ;
  array_set 1 freqs (midi_to_freq 80) ;
  array_set 2 freqs (midi_to_freq 80) ;
  yield 2.;

  array_set 0 freqs (midi_to_freq 67);
  array_set 1 freqs (midi_to_freq 67);
  array_set 2 freqs (midi_to_freq 67);
  yield 1.;

  array_set 0 freqs (midi_to_freq 63);
  array_set 1 freqs (midi_to_freq 63);
  array_set 2 freqs (midi_to_freq 63);
  yield 1.;

  yield seq ()
;;
let st = (fn () -> 
  let trig = impulse_node 1.;
  let ff = chirp_node 5000. 55. 0.03 trig; 

  let sig = white_noise_node ()
    |> (*) (aslr_node 0. 0.2 0.001 0.05 trig ) in
  let sig = sig + (aslr_node 0.0001 1. 0.1 0.5 trig) * (sin_node ff)  in
  sig + (dyn_tanh_node (chirp_node 10. 0.01 0.3 trig) sig) 
  ;)
  |> compile_blob_template
;
let routine = fn () ->
let fo =get_frame_offset () in (
  (instantiate_template [] rev_node_tpl)
    |> play_node_offset fo;
    st |> instantiate_template [] |> play_node_offset fo
    );

  yield 1.;
  yield seq ()
;;



play_routine schedule_event (routine ())
