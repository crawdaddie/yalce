#! /usr/bin/env ylc -i
let Tempo = module
  let bpm = [| 130. |];
  let set = fn x ->
    bpm[0] := x
  ;;
  let q = fn () ->
    60. / bpm[0]
  ;;
;

import lib/Math;
import gui/bindings/Gui;

open engine/bindings/Synth; 
open engine/bindings/Sched; 

let len = 32;

let data = (
  dur: array_fill_const len 0.25,
  note: array_fill len (fn i -> (30 + Double (Math.rand_int 24))),
  vel: array_fill_const len false,
  probability_mask: array_fill_const len 1.,
);


Gui.create_bool_array_editor len (cstr data.vel);
Gui.create_array_editor len (cstr data.note) 30. 60.;
Gui.create_array_editor len (cstr data.probability_mask) 0. 1.;

let seq = fn i d: (dur: Array of Double, note: Array of Double, vel: Array of Bool, probability_mask: Array of Double) ->
  yield (d.dur[i], d.note[i], d.vel[i], d.probability_mask[i]);
  yield seq ((i + 1) % len) d
;;

let Synth = module
  let synth = (fn () -> 
    let trig = inlet 0.;
    let freq = inlet 100. |> lag_node 0.01;
    let ff = chirp_node 8000. 200. 0.1 trig;

    sq_node freq
    |> (+) (sq_node (freq * 1.01))
    |> (+) (sq_node (freq * 2.))
    |> biquad_lp_node ff 6. 
    |> (*) (aslr_node 0. 0.5 0.2 0.1 trig)

  ) |> play_tpl;

  let trig = fn (dur, note, vel, prob_mask) ->
    match vel && (Math.rand_double () <= prob_mask) with
    | true -> (
      let fo = get_tl_tick ();
      let freq = (dmidi_to_freq note);
      set_input_trig_offset synth 0 fo;
      set_input_scalar_offset synth 1 fo freq;
      ()
    )
    | _ -> ()
  ;;
;

seq 0 data |> cor_map (fn d -> 
  Synth.trig d;
  0.25 * Tempo.q ();
) |> play_routine 0 schedule_event



